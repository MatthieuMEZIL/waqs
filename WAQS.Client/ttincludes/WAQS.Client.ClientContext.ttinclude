<#@ include file="WAQS.Client.ClientContext.Base.ttinclude"#>
<#@ include file="WAQS.DTO.ttinclude"#>
<#+
// Copyright (c) Matthieu MEZIL.  All rights reserved.

void WriteClientClientContext(string edmxPath, SpecificationPath[] specificationPathes, SpecificationPath[] dtoPathes, string dtoNamespace, SpecificationPath serverEntitiesPath, string clientFxComponentModelNamespace, string clientFxEntitiesNamespace, string clientFxEntitiesTrackingNamespace, string clientFxClientContextInterfacesNamespace, string clientFxClientContextNamespace, string clientFxQueryResultNamespace, string clientEntitiesNamespace, string clientServiceNamespace, string clientContextInterfacesNamespace, string serverFxCommonNamespace, string serverFxSpecificationsNamespace, string serverFxDALInterfacesNamespace, string serverFxServiceInterfacesNamespace, string serverEntitiesNamespace, bool utc, Dictionary<string, string> namespacesReplacement, int nbRetryOnTimeout, string namespaceName, bool useAsyncPrefix, string relativePath)
{
    string asyncSuffix = useAsyncPrefix ? "Async" : "";
    var fileManager = EntityFrameworkTemplateFileManager.Create(this);
    DefineMetadata();
    var edmxElements = EdmxElements.Get(Host, edmxPath, namespaceName);
    var code = edmxElements.Code;
    var dtoTypes = GetClassesOrderByDepthDescending(dtoPathes).ToList();
    var dtoNamespaces = GetNamespaces(dtoPathes).Select(n => n.ToString()).ToList();
    var specificationsElements = SpecificationsElements.Get(Host, specificationPathes, serverEntitiesPath, serverFxSpecificationsNamespace, serverFxDALInterfacesNamespace, serverFxServiceInterfacesNamespace, serverEntitiesNamespace, edmxElements, SpecificationsElements.Type.Client, getNamespaceFromTypeSymbol: t => (t.ToString() == serverFxCommonNamespace + ".PropertyName") ? clientFxComponentModelNamespace : null);
    var edmxName = edmxElements.EdmxName;
    var container = edmxElements.Container;
    var itemCollection = edmxElements.ItemCollection;
    string contextName = edmxName + "ClientContext";
    string edm_ns, msl_ns;
    XElement runtime;
    GetEdmxRuntimeAndEDMAndMSLNamespaces(edmxPath, out edm_ns, out msl_ns, out runtime);
    if (! namespacesReplacement.ContainsKey(serverEntitiesNamespace))
        namespacesReplacement.Add(serverEntitiesNamespace, clientEntitiesNamespace);

    var keysTypes = WriteKeysTypes(edmxElements, fileManager, clientEntitiesNamespace, edmxName, relativePath).ToList();

    var contextBaseName = string.Format("{0}Base", contextName);

    IEnumerable<string> usings = new string[] { "System", "System.Collections.Generic", "System.Collections.Specialized", "System.ComponentModel", "System.Linq", "System.ServiceModel", "System.Threading.Tasks", "System.Windows", clientContextInterfacesNamespace + ".Serialization", clientFxEntitiesNamespace, clientFxEntitiesTrackingNamespace, clientFxComponentModelNamespace, clientFxClientContextNamespace, clientFxClientContextNamespace + ".Fault", clientFxQueryResultNamespace, clientFxClientContextInterfacesNamespace, clientFxClientContextInterfacesNamespace + ".Querying", clientFxClientContextInterfacesNamespace + ".Errors", clientServiceNamespace, clientContextInterfacesNamespace, clientContextInterfacesNamespace + ".Errors", clientFxClientContextInterfacesNamespace + ".ExpressionSerialization", edmxElements.NamespaceName + ".Fault" };
    List<string> specificationMethodsUsings;
    if (specificationsElements.Usings.TryGetValue("@Service", out specificationMethodsUsings))
    {
        bool withDto = false;
        specificationMethodsUsings = specificationMethodsUsings.Where(u => 
            {
                var value = dtoNamespaces.Contains(u);
                if (value)
                    withDto = true;
                return ! value;
            }).Select(u => 
            {
                string newUsing;
                if (namespacesReplacement.TryGetValue(u, out newUsing))
                    return newUsing;
                return u;
            }).ToList();
        if (withDto)
            specificationMethodsUsings.Add(dtoNamespace);		    
        usings = usings.Union(specificationMethodsUsings);
    }
    var entityTypes = edmxElements.EntityTypes.OrderBy(e => e.Name).Where(e => GetEntitySet(container, e) != null && IsPublic(e)).ToList();
    var entityTypesName = entityTypes.Select(et => code.Escape(et)).ToList();

    fileManager.StartNewFile(contextBaseName + ".cs");
    WriteHeader(edmxElements.NamespaceName, code, "System", "System.Collections", "System.Collections.Generic", propertyDescriptorNamespace, "System.IO", "System.Linq", "System.Reflection", "System.Runtime.Serialization", "System.Text", "System.Threading.Tasks", clientFxClientContextNamespace, clientFxClientContextInterfacesNamespace, clientFxClientContextInterfacesNamespace + ".ExpressionSerialization", clientFxClientContextInterfacesNamespace + ".Querying", clientFxClientContextInterfacesNamespace + ".Query", clientFxQueryResultNamespace, clientFxComponentModelNamespace, clientFxEntitiesNamespace, clientServiceNamespace, edmxElements.NamespaceName + ".QueryResult");
#>
public abstract partial class <#=contextBaseName#> : IClientContextBase
{
    public <#=contextBaseName#>(Func<I<#=edmxName#>Service> serviceFactory)
    {
        ServiceFactory = serviceFactory;
    }
    
    ~<#=contextBaseName#>()
    {
        Dispose(false);
    }

    public string Name 
    { 
        get { return "<#=edmxElements.NamespaceName#>.<#=contextName#>"; } 
    }

    public string ServerEntitiesNamespace 
	{ 
		get { return "<#=serverEntitiesNamespace#>"; } 
	}

    public string ClientEntitiesNamespace 
	{ 
		get { return "<#=clientEntitiesNamespace#>"; }
	}

    protected Func<<#=clientServiceNamespace#>.I<#=edmxName#>Service> ServiceFactory { get; private set; }
    
    private Dictionary<object, object> _entitiesGot;
    protected Dictionary<object, object> EntitiesGot
    {
        get { return _entitiesGot ?? (_entitiesGot = new Dictionary<object, object>()); }
    }

<#+
    foreach (EntityType entityType in entityTypes)
    {
        var entitySet = GetEntitySet(container, entityType);
        if (entitySet == null)
            continue;
        var entityTypeName = code.Escape(entityType);
        var entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
#>
    protected abstract <#=entityTypeFullName#> GetEntity(<#=entityTypeFullName#> entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false);

<#+
    }
#>

    public virtual async Task<IEnumerable<T>> ExecuteQuery<#=asyncSuffix#><T>(IAsyncQueryable<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        var value = await ExecuteQueryInternal<#=asyncSuffix#>(query, mergeOption ?? MergeOption.NoTracking, cancel, getEntityOption);
        if (value == null)
            return new T[0];
        return ((IEnumerable<object>)value).Cast<T>();
    }
    
    public virtual async Task<T> ExecuteQuery<#=asyncSuffix#><T>(IAsyncQueryableValue<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        var value = await ExecuteQueryInternal<#=asyncSuffix#>(query, mergeOption ?? MergeOption.NoTracking, cancel, getEntityOption);
        return value == null ? default(T) : (T)value;
    }

    public virtual async Task<QueryPage<T>> LoadPage<#=asyncSuffix#><T>(int pageSize, IAsyncQueryable<T> query, LoadPageParameter[] identifiers, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        if (identifiers.Length == 0)
            throw new InvalidOperationException();
        if (query.Includes.Any())
            throw new NotImplementedException();
        try
        {
            var result = await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginLoadPage(pageSize, query.Expression, query.WithSpecificationsProperties.ToArray(), identifiers, null, null), ar => service.EndLoadPage(ar)), <#=nbRetryOnTimeout#>);
            EntitiesGot.Clear();
            return new QueryPage<T>(result.PageIndex, ((IEnumerable<object>)InstanciateAndAttach(query, result.Result, mergeOption ?? MergeOption.NoTracking)).Cast<T>());
        }
        catch (Exception e)
        {
            if (IsDisposed)
                return null;
            bool catched = false;
            CatchException(e, ref catched);
            if (catched)
                return null;
            throw e;
        }
    }

    public Task<object[]> ExecuteQueries<#=asyncSuffix#>(params IAsyncQueryableBase[] queries)
    {
        return ExecuteQueries<#=asyncSuffix#>(queries.AsEnumerable());
    }

    public virtual async Task<object[]> ExecuteQueries<#=asyncSuffix#>(IEnumerable<IAsyncQueryableBase> queries, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        if (mergeOption == null)
            mergeOption = MergeOption.NoTracking;
        ExecutingQueries(queries, mergeOption.Value);
        try
        {
            Queue<AsyncQueryableInclude> includes = null;
            var result = await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginExecuteMany(MakeQueriesSerialization(queries, out includes), null, null), ar => service.EndExecuteMany(ar)), <#=nbRetryOnTimeout#>);
            if (IsDisposed || cancel != null && cancel())
                return null;

			if (getEntityOption == GetEntityAsyncOption.AllMergeOption || (mergeOption.Value == MergeOption.NoTracking && (int)getEntityOption >= (int)GetEntityAsyncOption.NoTrackingOnly))
            {
				return await Task.Factory.StartNew(() => GetQueriesResults(queries, includes, result, mergeOption.Value));
            }
            else
            {
            return GetQueriesResults(queries, includes, result, mergeOption.Value);
        }
        }
        catch (Exception e)
        {
            if (IsDisposed || cancel != null && cancel())
                return null;
            bool catched = false;
            CatchException(e, ref catched);
            if (catched)
                return null;
            throw e;
        }
    }
    partial void ExecutingQueries(IEnumerable<IAsyncQueryableBase> queries, MergeOption mergeOption);

    private object[] GetQueriesResults(IEnumerable<IAsyncQueryableBase> queries, Queue<AsyncQueryableInclude> includes, <#=edmxName#>QueriesResult result, MergeOption mergeOption)
    {
        EntitiesGot.Clear();
        var value = new object[queries.Count()];
        int mainQueryIndex = 0;
        int queryIndex = 0;
        foreach (var query in queries)
        {
            var queryValue = InstanciateAndAttach(query, result.QueryResults[queryIndex ++], mergeOption);
            LoadIncludes(query, queryValue, includes, result, mergeOption, ref queryIndex, new Dictionary<string,object[]>());
            value[mainQueryIndex ++] = queryValue;
        }
        return value;
    }
    
    private async Task<object> ExecuteQueryInternal<#=asyncSuffix#>(IAsyncQueryableBase query, MergeOption mergeOption, Func<bool> cancel, GetEntityAsyncOption getEntityOption)
    {
        ExecutingQuery(query, mergeOption);
        if (IsDisposed || cancel != null && cancel())
            return null;
        try
        {
            if (query.Includes.Any())
            {
                Queue<AsyncQueryableInclude> includes = null;
                var result = await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginExecuteMany(MakeQueriesSerialization(query, out includes), null, null), ar => service.EndExecuteMany(ar)), <#=nbRetryOnTimeout#>);
                if (IsDisposed || cancel != null && cancel())
                    return null;
                EntitiesGot.Clear();
				if (getEntityOption == GetEntityAsyncOption.AllMergeOption || (mergeOption == MergeOption.NoTracking && (int)getEntityOption >= (int)GetEntityAsyncOption.NoTrackingOnly))
				{
					return await Task.Factory.StartNew(() => 
					{
                var value = InstanciateAndAttach(query, result.QueryResults[0], mergeOption);
                LoadIncludes(query, value, includes, result, mergeOption);
                return value;
					});
				} else {
					var value = InstanciateAndAttach(query, result.QueryResults[0], mergeOption);
					LoadIncludes(query, value, includes, result, mergeOption);
					return value;
            }
            }
            else
            {
                var result = await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginExecute(MakeQuerySerialization(query), null, null), ar => service.EndExecute(ar)), <#=nbRetryOnTimeout#>);
                EntitiesGot.Clear();
                if (getEntityOption == GetEntityAsyncOption.AllMergeOption || (mergeOption == MergeOption.NoTracking && (int)getEntityOption >= (int)GetEntityAsyncOption.NoTrackingOnly)) 
				{
					return await Task.Factory.StartNew(() => InstanciateAndAttach(query, result, mergeOption));
				} else {
                return InstanciateAndAttach(query, result, mergeOption);
            }
        }
        }
        catch (Exception e)
        {
            if (IsDisposed || cancel != null && cancel())
                return null;
            bool catched = false;
            CatchException(e, ref catched);
            if (catched)
                return null;
            throw e;
        }
    }
    partial void ExecutingQuery(IAsyncQueryableBase query, MergeOption mergeOption);
    
    private QuerySerialization MakeQuerySerialization(IAsyncQueryableBase query)
    {
        return new QuerySerialization { Expression = query.Expression, SerializableType = new SerializableType(query.Type), WithSpecificationsProperties = query.WithSpecificationsProperties.ToList() };
    }
    
    private QueriesSerialization MakeQueriesSerialization(IEnumerable<IAsyncQueryableBase> queries, out Queue<AsyncQueryableInclude> includes)
    {
        var queriesSerialization = new QueriesSerialization();
        includes = new Queue<AsyncQueryableInclude>();
        foreach (var query in queries)
            MakeQueriesSerialization(query, queriesSerialization, includes, new HashSet<string>());
        return queriesSerialization;
    }
    
    private QueriesSerialization MakeQueriesSerialization(IAsyncQueryableBase query, out Queue<AsyncQueryableInclude> includes)
    {
        var queriesSerialization = new QueriesSerialization();
        includes = new Queue<AsyncQueryableInclude>();
        MakeQueriesSerialization(query, queriesSerialization, includes, new HashSet<string>());
        return queriesSerialization;
    }
    
    private void MakeQueriesSerialization(IAsyncQueryableBase query, QueriesSerialization queriesSerialization, Queue<AsyncQueryableInclude> includes, HashSet<string> includePathes, string includeBasePath = "", bool add = true)
    {
        if (add)
            queriesSerialization.QuerySerializations.Add(MakeQuerySerialization(query));
        foreach (var include in query.Includes)
        {
            var includeValue = include(query);
            string path = includeBasePath == null || includeValue.Path == null ? null : string.Concat(includeBasePath, ".", includeValue.Path);
            bool addIncludeQuery = ! (path == null || includePathes.Contains(path));
            if (addIncludeQuery)
                includePathes.Add(path);
            includes.Enqueue(includeValue);
            foreach (var includeQuery in includeValue.Queries)
                MakeQueriesSerialization(includeQuery, queriesSerialization, includes, includePathes, path, path == null || addIncludeQuery);
        }
    }

    private void LoadIncludes(IAsyncQueryableBase query, object parentEntities, Queue<AsyncQueryableInclude> includes, <#=edmxName#>QueriesResult result, MergeOption mergeOption)
    {
        int index = 1;
        LoadIncludes(query, parentEntities, includes, result, mergeOption, ref index, new Dictionary<string,object[]>());
    }

    private void LoadIncludes(IAsyncQueryableBase query, object parentEntities, Queue<AsyncQueryableInclude> includes, <#=edmxName#>QueriesResult result, MergeOption mergeOption, ref int index, Dictionary<string, object[]> includeValues, string includeBasePath = "")
    {
        var includesEnumerator = query.Includes.GetEnumerator();
        while (includesEnumerator.MoveNext())
        {
            var include = includes.Dequeue();
            string path = includeBasePath == null || include.Path == null ? null : string.Concat(includeBasePath, ".", include.Path);
            bool loadIncludeQuery = ! (path == null || includeValues.ContainsKey(path));
            var includeQueriesEnumerator = include.Queries.AsEnumerable().GetEnumerator();
            while (includeQueriesEnumerator.MoveNext())
            {
                var values = new object[include.Queries.Length];
                if (path == null || loadIncludeQuery)
                {
                    for (int queryIndex = 0; queryIndex < include.Queries.Length; queryIndex++)
                    {
                        var includeQuery = includeQueriesEnumerator.Current;
                        var value = InstanciateAndAttach(includeQuery, result.QueryResults[index++], mergeOption);
                        LoadIncludes(includeQuery, value, includes, result, mergeOption, ref index, includeValues, path);
                        values[queryIndex] = value;
                        if (queryIndex < include.Queries.Length - 1)
                            includeQueriesEnumerator.MoveNext();
                    }
                    if (loadIncludeQuery)
                        includeValues.Add(path, values);
                    if (parentEntities != null)
                        include.Load(parentEntities, values, mergeOption);                        
                }
                else
                {
                    values = includeValues[path];
                    for (int queryIndex = 0; queryIndex < include.Queries.Length; queryIndex++)
                    {
                        var includeQuery = includeQueriesEnumerator.Current;
                        var value = values == null ? null : values[queryIndex];
                        LoadIncludes(includeQuery, value, includes, result, mergeOption, ref index, includeValues, path);
                        if (queryIndex < include.Queries.Length - 1)
                            includeQueriesEnumerator.MoveNext();
                    }
                }
            }
        }
    }

    protected virtual object InstanciateAndAttach(IAsyncQueryableBase query, <#=edmxName#>QueryResult queryResult, MergeOption mergeOption)
    {
        Func<object, Type, object> getEntity = null;
        getEntity = (value, type) =>
            {
<#+
foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
{
    string entityTypeName = code.Escape(entitySet.ElementType);
    foreach (var subEntity in GetSubEntityTypes(itemCollection, entityTypeName))
        GetEntity(clientEntitiesNamespace, code.Escape(subEntity));
    GetEntity(clientEntitiesNamespace, entityTypeName);
}
var attachedParameters = new StringBuilder();
var attachedParametersWithType = new StringBuilder();
var attachedParametersInstanciation = new StringBuilder();
foreach (var dtoType in dtoTypes)
{
    attachedParameters.Append(", attachedDtos");
    attachedParameters.Append(dtoType.Name);
    attachedParametersWithType.Append(", List<");
    attachedParametersWithType.Append(dtoNamespace);
    attachedParametersWithType.Append(".");
    attachedParametersWithType.Append(dtoType.Name);
    attachedParametersWithType.Append("> attachedDtos");
    attachedParametersWithType.Append(dtoType.Name);
    attachedParametersInstanciation.Append(", new List<");
    attachedParametersInstanciation.Append(dtoNamespace);
    attachedParametersInstanciation.Append(".");
    attachedParametersInstanciation.Append(dtoType.Name);
    attachedParametersInstanciation.Append(">()");#>
                var attachedDtos<#=dtoType.Name#> = new List<<#=dtoNamespace#>.<#=dtoType.Name#>>();
<#+
}
var attachedParametersString = attachedParameters.ToString();
var attachedParametersWithTypeString = attachedParametersWithType.ToString();
var attachedParametersInstanciationString = attachedParametersInstanciation.ToString();
foreach (var dtoType in dtoTypes)
{
    var dtoTypeName = dtoType.Name;
#>
                <#=dtoNamespace#>.<#=dtoTypeName#> valueAs<#=dtoTypeName#>;
                if ((valueAs<#=dtoTypeName#> = (value as <#=dtoNamespace#>.<#=dtoTypeName#>)) != null)
                    return GetDTO(valueAs<#=dtoTypeName#><#=attachedParametersString#>, mergeOption);
                var valueAs<#=GetPlurial(dtoTypeName)#> = value as IEnumerable<<#=dtoNamespace#>.<#=dtoTypeName#>>;
                if (valueAs<#=GetPlurial(dtoTypeName)#> != null)
                {
                    var ctor = value.GetType().GetConstructor(new Type[] { typeof(IEnumerable<<#=dtoNamespace#>.<#=dtoTypeName#>>) });
                    if (ctor != null)
                        return ctor.Invoke(new object[] { valueAs<#=GetPlurial(dtoTypeName)#>.Select(e => GetDTO(e<#=attachedParametersString#>, mergeOption)) });
                    valueAs<#=GetPlurial(dtoTypeName)#> = valueAs<#=GetPlurial(dtoTypeName)#>.Select(e => GetDTO(e<#=attachedParametersString#>, mergeOption));
                    if (type.IsArray)
                        return valueAs<#=GetPlurial(dtoTypeName)#>.ToArray();
                    return valueAs<#=GetPlurial(dtoTypeName)#>.ToList();
                }
<#+
}
if (utc)
{
#>
                if (type == typeof(DateTime))
                    return ((DateTime)value).ToLocalTime();
                var dateTimes = value as IEnumerable<DateTime>;
                if (dateTimes != null)
                    return dateTimes.Select(d => d.ToLocalTime());
<#+
}
#>
                if (type == typeof(string))
                    return value;
                if (type == typeof(byte[]))
                    return value;
                Type iEnumerable = null;
                if (type.IsArray || type.IsGenericType && (iEnumerable = type).GetGenericTypeDefinition().Name == "IEnumerable`1" && type.GetGenericTypeDefinition().Namespace == "System.Collections.Generic" || (iEnumerable = type.GetInterfaces().FirstOrDefault(i => i.Name == "IEnumerable`1" && i.Namespace == "System.Collections.Generic")) != null)
                    return ((object[])value).Select(v => getEntity(v, iEnumerable == null ? iEnumerable.GetGenericArguments()[0] : type.GetElementType())).ToArray();
                return value;
            };
        Func<string, Type, object> readFromSerialization = (serializedValue, type) =>
            {
                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(serializedValue)))
                {
                    var dataContractSerializer = new DataContractSerializer(type);
                    var value = dataContractSerializer.ReadObject(stream);
                    return getEntity(value, type);
                }
            };
        Func<QueryResultRecord, Type, object> instanciateAndAttach = null;
        instanciateAndAttach = (record, type) =>
            {
                if (record == null)
                    return null;
                if (record.SerializedValue != null)
                    return readFromSerialization(record.SerializedValue, type);
                ConstructorInfo ctor;
                Func<QueryResultProperty, Type, object> instanciateWithConstructorWithParameters = (property, propertyType) => 
                {
                    if (property.SerializedValue != null)
                        return readFromSerialization(property.SerializedValue, propertyType);
                    if (property.Value != null)
                        return instanciateAndAttach(property.Value, propertyType);
                    if (property.Values != null)
                    {
                        if (propertyType.IsArray)
                        {
                            Type propertyArrayType = propertyType.GetElementType();
                            var cast = typeof(Enumerable).GetMethod("Cast").MakeGenericMethod(propertyArrayType);
                            var toArray = typeof(Enumerable).GetMethod("ToArray").MakeGenericMethod(propertyArrayType);
                            return toArray.Invoke(null, new object[] { cast.Invoke(null, new object[] { property.Values.Select(v => instanciateAndAttach(v, propertyType.GetElementType())) }) });
                        }
                        else if (propertyType.IsGenericType && propertyType.GetGenericArguments().Length == 1)
                        {
                            Type propertyListType = propertyType.GetGenericArguments()[0];
                            var cast = typeof(Enumerable).GetMethod("Cast").MakeGenericMethod(propertyListType);
                            var value = cast.Invoke(null, new object[] { property.Values.Select(v => instanciateAndAttach(v, propertyListType)) });
                            ConstructorInfo collectionCtor;
                            ParameterInfo[] parametersInfo;
                            Type parameterType;
                            if ((collectionCtor = propertyType.GetConstructors().FirstOrDefault(c => (parametersInfo = c.GetParameters()).Length == 1 && (parameterType = parametersInfo[0].ParameterType).IsGenericType && parameterType.GetGenericTypeDefinition() == typeof(IEnumerable<>))) != null)
                                return collectionCtor.Invoke(new object[] { value });
                            if (propertyType.GetGenericTypeDefinition() == typeof(IEnumerable<>))
                                return value; 
                        }
                    }
                    return null;
                };
                if (type.Name.StartsWith("<>f__AnonymousType"))
                {
                    ctor = type.GetConstructors().First();
                    object[] parameters = record.Properties.Select((property, index) => instanciateWithConstructorWithParameters(property, type.GetProperties()[index].PropertyType)).ToArray();
                    return ctor.Invoke(parameters);
                }
                else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IGrouping<,>))
                {
                    ctor = typeof(Grouping<,>).MakeGenericType(type.GetGenericArguments()).GetConstructors().First();
                    object[] parameters = new object[] { instanciateWithConstructorWithParameters(record.Properties[0], type.GetGenericArguments()[0]), instanciateWithConstructorWithParameters(record.Properties[1], typeof(List<>).MakeGenericType(type.GetGenericArguments()[1])) };
                    return ctor.Invoke(parameters);
                }
                else if ((ctor = type.GetConstructor(new Type[0])) != null)
                {
                    var value = ctor.Invoke(new object[0]);
                    for (int rpi = 0 ; rpi < record.Properties.Count ; rpi++)
                    {
						var recordProperty = record.Properties[rpi];
                        var prop = type.GetProperty(recordProperty.PropertyName);
                        prop.SetValue(value, instanciateWithConstructorWithParameters(recordProperty, prop.PropertyType), null);
                    }
                    return value;
                }
                throw new NotImplementedException();
            };

        return InstanciateAndAttach(() =>
            {
                if (queryResult.Value != null)
                    return getEntity(queryResult.Value, query.Type);
                if (queryResult.Values != null)
                    return ((IEnumerable)queryResult.Values).Cast<object>().Select(o => o == null ? null : getEntity(o, query.Type)).ToList();
                if (queryResult.Record != null)
                    return instanciateAndAttach(queryResult.Record, query.Type);
                if (queryResult.Records != null)
                    return queryResult.Records.Select(r => instanciateAndAttach(r, query.Type)).ToList();
                return null;
            }, mergeOption);
    }

    protected virtual object InstanciateAndAttach(Func<object> getValue, MergeOption? mergeOption)
    {
        return getValue();
    }

    partial void CustomCatchException(Exception e, ref bool catched);
    protected virtual void CatchException(Exception e, ref bool catched)
    {
        CustomCatchException(e, ref catched);
    }

<#+
foreach (var dtoType in dtoTypes)
{
#>
    protected abstract <#=dtoNamespace#>.<#=dtoType.Name#> GetDTO(<#=dtoNamespace#>.<#=dtoType.Name#> dto<#=attachedParametersWithTypeString#>, MergeOption? mergeOption = null, bool applyDataTransfer = false);

<#+
    }
    ClientContextInterfacesNamespaceAddProperty();
#>	

    IExpressionTransformer IClientContextBase.GetTransformer()
    {
        return new <#=edmxName#>ExpressionTransformer();
    }

    void IDisposable.Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
    protected bool IsDisposed { get; set; }
    protected abstract void Dispose(bool disposing);
}
<#+
    WriteFooter(edmxElements.NamespaceName);

    fileManager.StartNewFile(contextName + ".cs");
    WriteHeader(edmxElements.NamespaceName, code, usings.OrderBy(u => u).ToArray());
#>
public partial class <#=contextName#> : <#=contextBaseName#>, I<#=contextName#>, IClientContext
{
<#+
    WriteClientContextConstructor(contextName, edmxName);
#>

    public bool Init { get; set; }
    public MergeOption MergeOption { get; set; }

    private HashSet<object> _entityRemovings;
    protected HashSet<object> EntityRemovings
    {
        get { return _entityRemovings ?? (_entityRemovings = new HashSet<object>()); }
    }

<#+
    foreach (EntityType entityType in entityTypes)
    {
        var entitySet = GetEntitySet(container, entityType);
        if (entitySet == null)
            continue;
        var entitySetEntityType = entitySet.ElementType;
        var entitySetEntityTypeName = code.Escape(entitySetEntityType);
        var entitySetEntityTypeNamePlurial = GetPlurial(code, container, entitySetEntityType);
        var entitySetEntityTypeNamePlurialCamelCase = code.CamelCase(entitySetEntityTypeNamePlurial);
        var entityTypeName = code.Escape(entityType);
        var subEntityTypes = GetSubEntityTypes(itemCollection, entityTypeName).ToList();
        var entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
        var entityTypeNamePlurial = GetPlurial(code, container, entityType);
        var fieldClientEntitySetName = string.Concat("_", code.CamelCase(entityTypeNamePlurial));
        var baseTypeName = entityType.BaseType == null ? null : code.Escape(entityType.BaseType);

        var identityProperties = GetCSDLIdentityProperties(entityType);
        var computedProperties = GetCSDLComputedProperties(entityType);
        bool hasTemporaryKey = HasCSDLTemporaryKeys(entityType);
        var couldHaveTemporaryKeyNps = CouldHaveCSDLTemporaryKeysNps(entityType, HostResolvePath).ToList();
        bool couldHaveTemporaryKey = hasTemporaryKey || couldHaveTemporaryKeyNps.Count != 0;

        bool isEntitySet = GetEntitySet(container, entityType).ElementType == entityType;
        var navigationProperties = entityType.NavigationProperties.Where(np => np.DeclaringType == entityType && IsPublic(np)).ToList();
        var allNavigationProperties = entityType.NavigationProperties.Where(np => IsPublic(np)).ToList();
        var navigationPropertiesCascadeDelete = entityType.NavigationProperties.Where(np => (np.FromEndMember.DeleteBehavior == OperationAction.Cascade || np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One) && (isEntitySet || np.DeclaringType == entityType) && IsPublic(np));

        if (entitySet.ElementType == entityType)
        {
#>
    private Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>> <#=fieldClientEntitySetName#>Dico;
    private Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#>Dico
    {
        get { return <#=fieldClientEntitySetName#>Dico ?? (<#=fieldClientEntitySetName#>Dico = new Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>>()); }
    }

    private Dictionary<Guid, <#=entityTypeFullName#>> <#=fieldClientEntitySetName#>DataTransferDico;
    private Dictionary<Guid, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#>DataTransferDico
    {
        get { return <#=fieldClientEntitySetName#>DataTransferDico ?? (<#=fieldClientEntitySetName#>DataTransferDico = new Dictionary<Guid, <#=entityTypeFullName#>>()); }
    }

<#+
    if (couldHaveTemporaryKey)
    {
#>
    private Dictionary<string, <#=entityTypeFullName#>> <#=fieldClientEntitySetName#>AddedDico;
    private Dictionary<string, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#>AddedDico
    {
        get { return <#=fieldClientEntitySetName#>AddedDico ?? (<#=fieldClientEntitySetName#>AddedDico = new Dictionary<string, <#=entityTypeFullName#>>()); }
    }
    private void Add<#=entityTypeNamePlurial#>AddedDico(<#=entityTypeFullName#> entity)
    {
        <#=entityTypeNamePlurial#>AddedDico.Add(entity.EntityKey, entity);
        entity.EntityKeyChanged += ResetEntityKey;
    }
    private void Remove<#=entityTypeNamePlurial#>AddedDico(<#=entityTypeFullName#> entity)
    {
        <#=entityTypeNamePlurial#>AddedDico.Remove(entity.EntityKey);
        entity.EntityKeyChanged -= ResetEntityKey;
    }

    private void ResetEntityKey(<#=entityTypeFullName#> entity, string oldEntityKey)
    {
        if (entity.HasTemporaryKey)
        {
            if (entity.EntityKey != oldEntityKey)
            {
                if (oldEntityKey != null)
                    <#=entityTypeNamePlurial#>AddedDico.Remove(oldEntityKey);
                <#=entityTypeNamePlurial#>AddedDico.Add(entity.EntityKey, entity);
            }
        }
        else
        {
            <#=entityTypeNamePlurial#>AddedDico.Remove(oldEntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
            <#=entityTypeNamePlurial#>Dico.Add(new <#=entitySetEntityTypeName#>Keys { <#=entityType.KeyMembers.Select(km => string.Concat(code.Escape(km), " = entity.", code.Escape(km))).Aggregate((km1, km2) => string.Concat(km1, ", ", km2))#> }, entity);
        }
    }
<#+
    }
#>
    public IClientEntitySet<I<#=contextName#>, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#> 
    { 
        get { return <#=entityTypeNamePlurial#>Internal; }
    }
    private ClientEntitySet<I<#=contextName#>, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#>Internal
    {
        get
        {
            if (<#=fieldClientEntitySetName#> == null)
            {
                <#=fieldClientEntitySetName#> = new ClientEntitySet<I<#=contextName#>, <#=entityTypeFullName#>>("<#=entityTypeNamePlurial#>", this, e => new <#=entitySetEntityTypeName#>Keys { <#+ InitKeys(code, entityType, "e"); #> });
                <#=fieldClientEntitySetName#>.EntityAdded += EntityAddedOrAttached;
                <#=fieldClientEntitySetName#>.EntityAttached += EntityAddedOrAttached;
                <#=fieldClientEntitySetName#>.EntityReplaced += EntityReplaced;
<#+ 
        if (navigationPropertiesCascadeDelete.Any())
        {
#>
                <#=fieldClientEntitySetName#>.EntityRemoving += EntityRemoving;
<#+
        }
#>
                <#=fieldClientEntitySetName#>.EntityDetached += EntityDetached;
            }
            return <#=fieldClientEntitySetName#>;
        }
    }
    private ClientEntitySet<I<#=contextName#>, <#=entityTypeFullName#>> <#=fieldClientEntitySetName#>;
<#+
        }
        else
        {
#>
    public IClientEntitySet<I<#=contextName#>, <#=entityTypeFullName#>> <#=entityTypeNamePlurial#> 
    { 
        get { return <#=entityTypeNamePlurial#>Internal; } 
    }
    private ClientSubEntitySet<I<#=contextName#>, <#=entityTypeFullName#>, <#=clientEntitiesNamespace#>.<#=baseTypeName#>> <#=entityTypeNamePlurial#>Internal
    {
        get
        {
            if (<#=fieldClientEntitySetName#> == null)
            {
                <#=fieldClientEntitySetName#> = new ClientSubEntitySet<I<#=contextName#>, <#=entityTypeFullName#>, <#=clientEntitiesNamespace#>.<#=baseTypeName#>>(<#=GetPlurial(code, container, entityType.BaseType)#>Internal);
                <#=fieldClientEntitySetName#>.EntityAdded += EntityAddedOrAttached;
                <#=fieldClientEntitySetName#>.EntityAttached += EntityAddedOrAttached;
                <#=fieldClientEntitySetName#>.EntityReplaced += EntityReplaced;
<#+ 
        if (navigationPropertiesCascadeDelete.Any())
        {
#>
                <#=fieldClientEntitySetName#>.EntityRemoving += EntityRemoving;
<#+
        }
#>
                <#=fieldClientEntitySetName#>.EntityDetached += EntityDetached;
            }
            return <#=fieldClientEntitySetName#>;
        }
    }
    private ClientSubEntitySet<I<#=contextName#>, <#=entityTypeFullName#>, <#=clientEntitiesNamespace#>.<#=baseTypeName#>> <#=fieldClientEntitySetName#>;
<#+
    }
    foreach (var navProp in navigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many))
    {
        var dicoNpFieldNameBegining = code.CamelCase(entityTypeNamePlurial);
        var npName = code.Escape(navProp);
        var npEntityType = navProp.ToEndMember.GetEntityType();
        var npEntityTypeName = GetEntitySetEntityTypeName(npEntityType, container, code);
#>
    private Dictionary<<#=npEntityTypeName#>Keys, List<<#=entityTypeFullName#>>> _<#=dicoNpFieldNameBegining#><#=npName#>FKsDico;
    private Dictionary<<#=npEntityTypeName#>Keys, List<<#=entityTypeFullName#>>> <#=entityTypeNamePlurial#><#=npName#>FKsDico
    {
        get { return _<#=dicoNpFieldNameBegining#><#=npName#>FKsDico ?? (_<#=dicoNpFieldNameBegining#><#=npName#>FKsDico = new Dictionary<<#=npEntityTypeName#>Keys, List<<#=entityTypeFullName#>>>()); }
    }
<#+
    }
#>

    private void EntityAddedOrAttached(<#=entityTypeFullName#> entity)
    {
<#+
        foreach (var subType in subEntityTypes)
        {
            string subTypeName = code.Escape(subType);
#>
        <#=clientEntitiesNamespace#>.<#=subTypeName#> entityAs<#=subTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=subTypeName#>;
        if (entityAs<#=subTypeName#> != null)
        {
            EntityAddedOrAttached(entityAs<#=subTypeName#>);
            return;
        }
<#+
        }
#>
        if (!ClientEntitySetExtensions.AddEntityInDico(<#=entityTypeNamePlurial#>, entity)) 
		{
			return;
		}

        <#=entitySetEntityTypeName#> entityTmp;
        if (<#=entitySetEntityTypeNamePlurial#>DataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
        {
            if (entityTmp != entity)
                throw new InvalidOperationException();
        }
        else
            <#=entitySetEntityTypeNamePlurial#>DataTransferDico.Add(entity.DataTransferEntityKey, entity);		
<#+
        if (couldHaveTemporaryKey)
        {
#>
        if (entity.HasTemporaryKey)
        {
            <#=clientEntitiesNamespace#>.<#=entitySetEntityTypeName#> entityInAddedDico;
            if (! <#=entitySetEntityTypeNamePlurial#>AddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                Add<#=entitySetEntityTypeNamePlurial#>AddedDico(entity);
            else if (entityInAddedDico != entity)
                throw new InvalidOperationException();
<#+
            PushIndent(CodeRegion.GetIndent(1));		
            EntityAttachWithoutChangingStateSubEntities(entityType, code);
            PopIndent();		
#>
        }
        else
        {
    <#+
            PushIndent(CodeRegion.GetIndent(1));		
        }
#>
        var <#=code.CamelCase(entitySetEntityTypeName)#>Keys = new <#=entitySetEntityTypeName#>Keys { <#=entityType.KeyMembers.Select(km => string.Concat(code.Escape(km), " = entity.", code.Escape(km))).Aggregate((km1, km2) => string.Concat(km1, ", ", km2))#> };
        <#=clientEntitiesNamespace#>.<#=entitySetEntityTypeName#> entityInDico;
        if (! <#=entitySetEntityTypeNamePlurial#>Dico.TryGetValue(<#=code.CamelCase(entitySetEntityTypeName)#>Keys, out entityInDico))
            <#=entitySetEntityTypeNamePlurial#>Dico.Add(<#=code.CamelCase(entitySetEntityTypeName)#>Keys, entity);
        else if (entityInDico != entity)
            throw new InvalidOperationException();
<#+
        EntityAttachWithoutChangingStateSubEntities(entityType, code);
#>

<#+
        foreach (var navProp in allNavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
        {
            var npName = code.Escape(navProp);
            var npNameCamelCase = code.CamelCase(npName);
            var npEntityType = navProp.ToEndMember.GetEntityType();
            var npEntityTypeName = code.Escape(npEntityType);
            if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
                if (navProp.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
                {
                    var otherNavPropName = code.Escape(GetOtherNavigationProperty(navProp));
#>
        List<<#=clientEntitiesNamespace#>.<#=npEntityTypeName#>> <#=npNameCamelCase#>;
        if (<#=GetPlurial(code, container, npEntityType)#><#=otherNavPropName#>FKsDico.TryGetValue(<#=code.CamelCase(entitySetEntityTypeName)#>Keys, out <#=npNameCamelCase#>))
            for (int ei = 0 ; ei < <#=npNameCamelCase#>.Count ; ei++)
			{
                <#=npNameCamelCase#>[ei].<#=otherNavPropName#> = entity;
			}
<#+
                }
            }
        }
        if (couldHaveTemporaryKey)
        {
            PopIndent();
#>
        }
<#+
        }

        foreach (var navProp in allNavigationProperties)
        {
            var npName = code.Escape(navProp);
            var npNameCamelCase = code.CamelCase(npName);
            var npEntityType = navProp.ToEndMember.GetEntityType();
            var npFromEndMemberEntityType = navProp.FromEndMember.GetEntityType();
            var npFromEndMemberEntityTypeName = code.Escape(npFromEndMemberEntityType);
            var npFromEndMemberEntityTypeNamePlurial = GetPlurial(code, container, npFromEndMemberEntityType);
            var npFromEndMemberEntityTypeNamePlurialCamelCase = code.CamelCase(npFromEndMemberEntityTypeNamePlurial);
            var npEntityTypeEntitySetEntityType = GetEntitySet(container, npEntityType).ElementType;
            var npEntityTypeEntitySetEntityTypeName = code.Escape(npEntityTypeEntitySetEntityType);
            var npToEntityTypePlurial = GetPlurial(code, container, navProp.ToEndMember.GetEntityType());
            if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#>

        for (int sei = 0 ; sei < entity.<#=npName#>.Count ; sei++)
		{
			var se = entity.<#=npName#>[sei];
            if (! <#=npToEntityTypePlurial#>Internal.Contains(se))
                <#=npToEntityTypePlurial#>Internal.AttachWithoutChangingState(se, entity.ChangeTracker.State);
		}

<#+
                continue;
            }
            else
            {
#>

        if (! (entity.<#=npName#> == null || <#=npToEntityTypePlurial#>Internal.Contains(entity.<#=npName#>)))
            <#=npToEntityTypePlurial#>Internal.AttachWithoutChangingState(entity.<#=npName#>, entity.ChangeTracker.State);

<#+
            }
            IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
            GetNavigationPropertyReferentialConstraintsEnumerables(navProp, out fromEnumerable, out toEnumerable);
            var fromEnumerator = fromEnumerable.GetEnumerator();
            var toEnumerator = toEnumerable.GetEnumerator();
#>

<#+
            var zeroOneMany = navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProp.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.One;
            if (zeroOneMany)
            {
#>
        if (<#=fromEnumerable.Where(f => f.Nullable).Select(f => string.Concat("entity.", code.Escape(f), " != null")).Aggregate((f1, f2) => string.Concat(f1, " && ", f2))#>)
        {
<#+
                    PushIndent(CodeRegion.GetIndent(1));
            }
#>
        var <#=entitySetEntityTypeNamePlurialCamelCase#><#=npName#>Keys = new <#=npEntityTypeEntitySetEntityTypeName#>Keys { <#+
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    string fkProp = code.Escape(toEnumerator.Current);
#><#=fkProp#> = entity.<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && code.Escape(fromEnumerator.Current.TypeUsage) != "string" ? ".Value" : ""#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> };
        List<<#=clientEntitiesNamespace#>.<#=npFromEndMemberEntityTypeName#>> <#=npFromEndMemberEntityTypeNamePlurialCamelCase#><#=npName#>Entities;
        if (! <#=npFromEndMemberEntityTypeNamePlurial#><#=npName#>FKsDico.TryGetValue(<#=entitySetEntityTypeNamePlurialCamelCase#><#=npName#>Keys, out <#=npFromEndMemberEntityTypeNamePlurialCamelCase#><#=npName#>Entities))
            <#=npFromEndMemberEntityTypeNamePlurial#><#=npName#>FKsDico.Add(<#=entitySetEntityTypeNamePlurialCamelCase#><#=npName#>Keys, <#=npFromEndMemberEntityTypeNamePlurialCamelCase#><#=npName#>Entities = new List<<#=clientEntitiesNamespace#>.<#=npFromEndMemberEntityTypeName#>>());
        <#=npFromEndMemberEntityTypeNamePlurialCamelCase#><#=npName#>Entities.Add(entity);

        <#=clientEntitiesNamespace#>.<#=npEntityTypeEntitySetEntityTypeName#> <#=npNameCamelCase#>;
        if (<#=GetPlurial(code, container, npEntityTypeEntitySetEntityType)#>Dico.TryGetValue(<#=entitySetEntityTypeNamePlurialCamelCase#><#=npName#>Keys, out <#=npNameCamelCase#>))
<#+
            if (npEntityType == npEntityTypeEntitySetEntityType)
            {
#>
            entity.<#=npName#> = <#=npNameCamelCase#>;
<#+
            }
            else
            {
#>
        {
            var entity<#=npName#> = <#=npNameCamelCase#> as <#=code.Escape(npEntityType)#>;
            if (entity<#=npName#> != null)
                entity.<#=npName#> = entity<#=npName#>;
        }
<#+
            }
            if (zeroOneMany)
            {
                PopIndent();
#>
        }
<#+
            }
            if (navProp.GetDependentProperties().Where(p => ! entityType.KeyMembers.Contains(p)).Any())
            {
#>
		entity.<#=npName#>FKsChanged -= <#=npFromEndMemberEntityTypeName#><#=npName#>FKsChanged;
        entity.<#=npName#>FKsChanged += <#=npFromEndMemberEntityTypeName#><#=npName#>FKsChanged;
<#+
            }
        }
#>

<#+
        bool hasRelationshipCardinalityOne = false;
        bool first = true;
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np)))
        {
            if(navigationProperty.ToEndMember.RelationshipMultiplicity != System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
                hasRelationshipCardinalityOne = true;
        }
#>
        entity.IsInitializingRelationships = false;
    }

    private void EntityReplaced(<#=entityTypeFullName#> entityInEntitySet, <#=entityTypeFullName#> entity)
    {
<#+
        foreach (var subEntityType in subEntityTypes)
        {
            string subEntityTypeName = code.Escape(subEntityType);
#>
        var entityAs<#=subEntityTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=subEntityTypeName#>;
        if (entityAs<#=subEntityTypeName#> != null)
        {
            EntityReplacedInternal((<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>)entityInEntitySet, entityAs<#=subEntityTypeName#>);
            return;
        }
<#+
        }
#>
        EntityReplacedInternal(entityInEntitySet, entity);
    }
    private void EntityReplacedInternal(<#=entityTypeFullName#> entityInEntitySet, <#=entityTypeFullName#> entity)
    {
<#+
    var entityTypeTmp = entityType.BaseType;
    while (entityTypeTmp != null)
    {
#>
        EntityReplacedInternal((<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entityInEntitySet, (<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entity);
<#+
        entityTypeTmp = entityTypeTmp.BaseType;
    }
    foreach (EdmProperty edmProperty in entityType.Properties.Where(p => ! entityType.KeyMembers.Contains(p) && p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entityType && IsPublic(p) && ! (IsConcurrencyFixed(p) && p.TypeUsage.ToString() == "Edm.Binary")))
    {
#>
        if (entityInEntitySet.<#=code.Escape(edmProperty)#> != entity.<#=code.Escape(edmProperty)#>)
            entityInEntitySet.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#>;
<#+
    }
    foreach(EdmProperty complexProperty in entityType.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entityType && IsPublic(p)))
    {
#>
        if (entityInEntitySet.<#=code.Escape(complexProperty)#> != null)
        {
<#+
        var complexType = edmxElements.ComplexTypes.First(ct => code.Escape(ct) == code.Escape(complexProperty.TypeUsage));
        foreach(EdmProperty edmProperty in complexType.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complexType))
        {
#>
            if (entityInEntitySet.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> != entity.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#>)
            {
                entityInEntitySet.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#>;
                if (entityInEntitySet.ChangeTracker.ModifiedProperties.Contains("<#=code.Escape(complexProperty)#>"))
                    entityInEntitySet.ChangeTracker.ModifiedProperties.Remove("<#=code.Escape(complexProperty)#>");
            }
<#+
        }
#>
        }
<#+
    }
    if (specificationsElements.GetMethods.ContainsKey(code.Escape(entityType)))
    {
#>
        entityInEntitySet.Specifications = entity.Specifications;
<#+
    }
#>
    }

<#+
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => (isEntitySet || np.DeclaringType == entityType) && IsPublic(np)))
        {
            if(navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
            {
                var subEntityTypeName = code.Escape(navigationProperty.ToEndMember.GetEntityType());
#>
    private void <#=entityTypeName#>_<#=code.Escape(navigationProperty)#>CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
            for (int sei = 0 ; sei < e.NewItems.Count ; sei++)
            {
				var subEntity = (<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>)e.NewItems[sei];
                <#=clientEntitiesNamespace#>.<#=subEntityTypeName#> se = null;
                if (!subEntity.IsInitializingRelationships && (se = GetEntityInCache(subEntity)) == null)
                    AttachWithoutChangingState(subEntity);
                else if (se != null && se != subEntity)
                    throw new InvalidOperationException();
            }
    }
     
<#+
            }
            else
            {
                if (! navigationProperty.GetDependentProperties().Any())
                    continue;
                var npName = code.Escape(navigationProperty);
                var npNameCamelCase = code.CamelCase(npName);
                var npEntityType = navigationProperty.ToEndMember.GetEntityType();
                var npEntityTypeEntitySetEntityType = GetEntitySet(container, npEntityType).ElementType;
                var npEntityTypeEntitySetEntityTypeName = code.Escape(npEntityTypeEntitySetEntityType);
                IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
                GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out fromEnumerable, out toEnumerable);
                var fromEnumerator = fromEnumerable.GetEnumerator();
                var toEnumerator = toEnumerable.GetEnumerator();
                bool zeroOne = navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne;
                if (navigationProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One)
                    continue;
#>
    private void <#=entityTypeName#><#=npName#>FKsChanged(<#=entityTypeFullName#> entity, <#=navigationProperty.GetDependentProperties().Select(dp => string.Concat(code.Escape(dp.TypeUsage), " old", code.Escape(dp), ", ", code.Escape(dp.TypeUsage), " new", code.Escape(dp))).Aggregate((dp1, dp2) => string.Concat(dp1, ", ", dp2))#>)
    {
        <#=npEntityTypeEntitySetEntityTypeName#>Keys<#=zeroOne ? "?" : ""#> old<#=entityTypeNamePlurial#><#=npName#>Keys = <#=zeroOne ? string.Concat(fromEnumerable.Where(f => f.Nullable).Select(f => string.Concat("old", code.Escape(f), " == null")).Aggregate((f1, f2) => string.Concat(f1, " || ", f2)), " ? (", npEntityTypeEntitySetEntityTypeName, "Keys?)null : ") : ""#>new <#=npEntityTypeEntitySetEntityTypeName#>Keys { <#+
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    var fkProp = code.Escape(toEnumerator.Current);
#><#=fkProp#> = old<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && code.Escape(fromEnumerator.Current.TypeUsage) != "string" ? ".Value" : ""#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> };
        <#=npEntityTypeEntitySetEntityTypeName#>Keys<#=zeroOne ? "?" : ""#> new<#=entityTypeNamePlurial#><#=npName#>Keys = <#=zeroOne ? string.Concat(fromEnumerable.Where(f => f.Nullable).Select(f => string.Concat("new", code.Escape(f), " == null")).Aggregate((f1, f2) => string.Concat(f1, " || ", f2)), " ? (", npEntityTypeEntitySetEntityTypeName, "Keys?)null : ") : ""#>new <#=npEntityTypeEntitySetEntityTypeName#>Keys { <#+
                fromEnumerator.Reset();
                toEnumerator.Reset();
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    var fkProp = code.Escape(toEnumerator.Current);
#><#=fkProp#> = new<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && code.Escape(fromEnumerator.Current.TypeUsage) != "string" ? ".Value" : ""#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> };
<#+
                if (zeroOne)
                {
#>
        if (new<#=entityTypeNamePlurial#><#=npName#>Keys.HasValue)
        {
<#+
                    PushIndent(CodeRegion.GetIndent(1));
                }
#>
        List<<#=entityTypeFullName#>> newCollection;
        if (! <#=entityTypeNamePlurial#><#=npName#>FKsDico.TryGetValue(new<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOne ? ".Value" : ""#>, out newCollection))
            <#=entityTypeNamePlurial#><#=npName#>FKsDico.Add(new<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOne ? ".Value" : ""#>, newCollection = new List<<#=entityTypeFullName#>>());
        newCollection.Add(entity);

        <#=clientEntitiesNamespace#>.<#=npEntityTypeEntitySetEntityTypeName#> <#=npNameCamelCase#>;
        if (<#=GetPlurial(code, container, npEntityTypeEntitySetEntityType)#>Dico.TryGetValue(new<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOne ? ".Value" : ""#>, out <#=npNameCamelCase#>))
<#+
        if (npEntityType == npEntityTypeEntitySetEntityType)
        {
#>
            entity.<#=npName#> = <#=npNameCamelCase#>;
<#+
        }
        else
        {
#>
        {
            var entity<#=npName#> = <#=npNameCamelCase#> as <#=code.Escape(npEntityType)#>;
            if (entity<#=npName#> != null)
                entity.<#=npName#> = entity<#=npName#>;
        }
<#+
        }
                if (zeroOne)
                {
                    PopIndent();
#>
        }
<#+
                }
#>
        List<<#=entityTypeFullName#>> oldCollection;
        if (<#=zeroOne ? string.Concat("old", entityTypeNamePlurial, npName, "Keys.HasValue && ") : ""#><#=entityTypeNamePlurial#><#=npName#>FKsDico.TryGetValue(old<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOne ? ".Value" : ""#>, out oldCollection))
        {
            oldCollection.Remove(entity);
            if (oldCollection.Count == 0)
                <#=entityTypeNamePlurial#><#=npName#>FKsDico.Remove(old<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOne ? ".Value" : ""#>);
        }
    }

<#+
        }
    }

    if (hasRelationshipCardinalityOne)
    {
#>
    private void <#=entityTypeName#>NavigationPropertyChanged(<#=entitySetEntityTypeName#> sender, string propertyName)
    {
        var entity = <#=entitySetEntityType == entityType ? "" : string.Concat("(", entityTypeName, ")")#>sender;
<#+
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np)))
        {
            if(navigationProperty.ToEndMember.RelationshipMultiplicity != System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
            {
#>
        <#+
                if(first)
                    first = false;
                else
                {
                #>else <#+
                }
                #>if (propertyName == "<#=navigationProperty#>" && entity.<#=navigationProperty#> != null)
        {
            if (! <#=GetPlurial(code, container, navigationProperty.ToEndMember.GetEntityType())#>.Contains(entity.<#=navigationProperty#>))
                AttachWithoutChangingState(entity.<#=navigationProperty#>);
        }
<#+

                IEnumerator<EdmProperty> fromEnumerator, toEnumerator;
                ReferentialConstraint referentialConstraint;
                GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
                if (referentialConstraint != null)
                {
                    if(fromEnumerator.MoveNext()) 
                    {
#>
        else if (new [] { <#+
                        for(;;)
                        { 
#>"<#=code.Escape(fromEnumerator.Current)#>"<#+
                            if (! fromEnumerator.MoveNext())
                                break;
#>, <#+
                        }
                        fromEnumerator.Reset();
#> }.Contains(propertyName))
        {
            var parentEntityInCache = <#=GetPlurial(code, container, navigationProperty.ToEndMember.GetEntityType())#>.FirstOrDefault(pe => <#+
                        int fkPropsCount = 0;
                        string fkProp;
                        fromEnumerator.MoveNext(); 
                        toEnumerator.MoveNext(); 
                        for(;;)
                        {
                            fkPropsCount ++;
                            fkProp = code.Escape(toEnumerator.Current);
            #>pe.<#=fkProp#> == entity.<#=code.Escape(fromEnumerator.Current)#><#+
                            if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                                break;
            #> && <#+
                        }
            #>);
            if (parentEntityInCache != null<#+
                if (fkPropsCount == 1)
                {
                    var toEntityType = navigationProperty.ToEndMember.GetEntityType();
                    EdmMember property;
                    while ((property = toEntityType.Members.FirstOrDefault(m => m.Name == fkProp)) == null)
                    {
                        toEntityType = (EntityType)toEntityType.BaseType;
                        if (toEntityType == null)
                            return;
                    }
                    if (TemporaryKeys(toEntityType).Contains(property))
                    {
#> && parentEntityInCache.<#=fkProp#> != 0<#+
                    }
                }
#>)
                entity.<#=code.Escape(navigationProperty)#> = parentEntityInCache;					
        }
<#+
                    }
                }
            }
        }
#>
    }
<#+
    }
#>
	private void DisposeCollection<#=entityTypeName#>()
	{
		<#=entitySetEntityTypeNamePlurial#>DataTransferDico.Clear();
		<#=entitySetEntityTypeNamePlurial#>Dico.Clear();
<#+
foreach (var navProp in navigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many))
    {
        var dicoNpFieldNameBegining = code.CamelCase(entityTypeNamePlurial);
        var npName = code.Escape(navProp);
        var npEntityType = navProp.ToEndMember.GetEntityType();
        var npEntityTypeName = GetEntitySetEntityTypeName(npEntityType, container, code);
#>
		if (_<#=dicoNpFieldNameBegining#><#=npName#>FKsDico != null) 
		{
			_<#=dicoNpFieldNameBegining#><#=npName#>FKsDico.Clear();
		}
<#+
	}
#>
	}

	private void DisposeEntity(<#=entityTypeFullName#> entity)
	{
<#+
		if (couldHaveTemporaryKey)
        {
#>
		entity.EntityKeyChanged -= ResetEntityKey;
<#+
		}
#>
		ClientEntitySetExtensions.RemoveEntityInDico(entity);
<#+
	bool disposeHasRelationshipCardinalityOne = false;
    foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np)))
    {
        string npName = code.Escape(navigationProperty);
        if(navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
        {
#>
		entity.<#=npName#>.CollectionChanged -= <#=code.Escape(navigationProperty.FromEndMember.GetEntityType())#>_<#=npName#>CollectionChanged;
<#+
        }
        else
        {
            disposeHasRelationshipCardinalityOne = true;
            if (navigationProperties.Contains(navigationProperty) && navigationProperty.GetDependentProperties().Where(p => ! entityType.KeyMembers.Contains(p)).Any())
            {
#>
		entity.<#=npName#>FKsChanged -= <#=entityTypeName#><#=npName#>FKsChanged;
<#+
            }
        }
    }
    if (disposeHasRelationshipCardinalityOne)
    {
#>
		entity.NavigationPropertyChanged -= <#=entityTypeName#>NavigationPropertyChanged;
<#+
    }
#>
	}

    private void EntityDetached(<#=entityTypeFullName#> entity)
    {
<#+
        foreach (var subType in subEntityTypes)
        {
            string subTypeName = code.Escape(subType);
#>
        <#=clientEntitiesNamespace#>.<#=subTypeName#> entityAs<#=subTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=subTypeName#>;
        if (entityAs<#=subTypeName#> != null)
        {
            EntityDetached(entityAs<#=subTypeName#>);
            return;
        }
<#+
        }
#>

        <#=entitySetEntityTypeNamePlurial#>DataTransferDico.Remove(entity.DataTransferEntityKey);		
<#+
        if (couldHaveTemporaryKey)
        {
#>
        if (entity.IsTemporaryKey)
            Remove<#=entitySetEntityTypeNamePlurial#>AddedDico(entity);
        else
        {
<#+
            PushIndent(CodeRegion.GetIndent(1));
        }
#>
        var entityKey = new <#=entitySetEntityTypeName#>Keys { <#=entitySetEntityType.KeyMembers.Select(km => string.Concat(code.Escape(km), " = entity.", code.Escape(km))).Aggregate((km1, km2) => string.Concat(km1, ", ", km2))#> };
        <#=entitySetEntityTypeNamePlurial#>Dico.Remove(entityKey);
<#+
        if (couldHaveTemporaryKey)
        {
            PopIndent();
#>
        }
<#+
        }
    foreach (var navProp in entityType.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many))
    {
        var npFromEntityType = navProp.FromEndMember.GetEntityType();
        var toEntityType = navProp.ToEndMember.GetEntityType();
        IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
        GetNavigationPropertyReferentialConstraintsEnumerables(navProp, out fromEnumerable, out toEnumerable);
        if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne)
        {
            var nullableNavProps = fromEnumerable.Where(p => p.Nullable).ToList();
            if (nullableNavProps.Count != 0)
            {
#>
        if (<#=nullableNavProps.Select(p => string.Concat("entity.", code.Escape(p), " != null")).Aggregate((p1, p2) => string.Concat(p1, " && ", p2))#>)
<#+
            }
        }
#>
        {
            List<<#=clientEntitiesNamespace#>.<#=code.Escape(npFromEntityType)#>> fkEntities;
            if (<#=GetPlurial(code, container, npFromEntityType)#><#=code.Escape(navProp)#>FKsDico.TryGetValue(new <#=code.Escape(GetEntitySet(container, toEntityType).ElementType)#>Keys { <#+
        var fromEnumerator = fromEnumerable.GetEnumerator();
        var toEnumerator = toEnumerable.GetEnumerator();
        fromEnumerator.MoveNext(); 
        toEnumerator.MoveNext();
        for (;;)
        {
#><#=code.Escape(toEnumerator.Current)#> = entity.<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && IsStruct(fromEnumerator.Current) ? ".Value" : ""#><#+
            if (fromEnumerator.MoveNext() && toEnumerator.MoveNext())
            {
#>, <#+
            }
            else
                break;
        }
#> }, out fkEntities))
                fkEntities.Remove(entity);
        }
<#+
    }
#>
    
<#+
        var navigationPropertiesEnumerator = entityType.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many).GetEnumerator();
        if (navigationPropertiesEnumerator.MoveNext())
        {
            for (;;)
            {
                var navigationProperty = navigationPropertiesEnumerator.Current;
                var npName = code.Escape(navigationProperty);
                var npEntityType = navigationProperty.ToEndMember.GetEntityType();
                var npEntitySetEntityTypeName = GetEntitySetEntityTypeName(npEntityType, container, code);
                IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
                GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out fromEnumerable, out toEnumerable);
                IEnumerator<EdmProperty> fromEnumerator = fromEnumerable.GetEnumerator();
                IEnumerator<EdmProperty> toEnumerator = toEnumerable.GetEnumerator();
                bool zeroOne = navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne;
                bool fromOne = navigationProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One;
                var zeroOneToMany = zeroOne && ! fromOne;
                string npEntityTypeEntitySetEntityTypeName = GetEntitySetEntityTypeName(npEntityType, container, code);
                var npFromEntityType = navigationProperty.FromEndMember.GetEntityType();
                string npFromEntityTypeNamePlurial = GetPlurial(code, container, npFromEntityType);
#>
        <#=npEntityTypeEntitySetEntityTypeName#>Keys<#=zeroOneToMany ? "?" : ""#> old<#=entityTypeNamePlurial#><#=npName#>Keys = <#=zeroOneToMany ? string.Concat(fromEnumerable.Where(f => f.Nullable).Select(f => string.Concat("entity.", code.Escape(f), " == null")).Aggregate((f1, f2) => string.Concat(f1, " || ", f2)), " ? (", npEntityTypeEntitySetEntityTypeName, "Keys?)null : ") : ""#>new <#=npEntitySetEntityTypeName#>Keys { <#+
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    var fkProp = code.Escape(toEnumerator.Current);
#><#=fkProp#> = entity.<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && code.Escape(fromEnumerator.Current.TypeUsage) != "string" ? ".Value" : ""#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> };
        {
            List<<#=clientEntitiesNamespace#>.<#=code.Escape(npFromEntityType)#>> oldCollection;
            if (<#=zeroOneToMany ? string.Concat("old", entityTypeNamePlurial, npName, "Keys.HasValue && ") : ""#><#=npFromEntityTypeNamePlurial#><#=npName#>FKsDico.TryGetValue(old<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOneToMany ? ".Value" : ""#>, out oldCollection))
            {
                oldCollection.Remove(entity);
                if (oldCollection.Count == 0)
                    <#=npFromEntityTypeNamePlurial#><#=npName#>FKsDico.Remove(old<#=entityTypeNamePlurial#><#=npName#>Keys<#=zeroOneToMany ? ".Value" : ""#>);
            }
        }

<#+
            if (! navigationPropertiesEnumerator.MoveNext())
                break;
        }
    }
    foreach (var navigationProperty in entityType.NavigationProperties.Where(np => (isEntitySet || np.DeclaringType == entityType) && IsPublic(np)))
    {
        if(navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
        {
#>
        entity.<#=code.Escape(navigationProperty)#>.CollectionChanged -= <#=entityTypeName#>_<#=code.Escape(navigationProperty)#>CollectionChanged;
<#+
        }
    }
    if (hasRelationshipCardinalityOne)
    {
#>
        entity.NavigationPropertyChanged -= <#=entityTypeName#>NavigationPropertyChanged;
<#+
    }
#>
        ClientEntitySetExtensions.RemoveEntityInDico(entity);
<#+
    RemovePropertyDescriptorToEntity("entity");
    foreach (var np in entityType.NavigationProperties)
    {
        var otherNavProp = GetOtherNavigationProperty(np);
        if (otherNavProp == null)
            throw new InvalidOperationException(string.Concat("There is no navigation property on ", code.Escape(np.ToEndMember.GetEntityType()), " associated to ", entityTypeName, ".", code.Escape(np), "."));
        var npName = code.Escape(otherNavProp);
        var npEntityTypeNamePlurial = GetPlurial(code, container, np.ToEndMember.GetEntityType());
#>
        for (int sei = 0 ; sei < <#=npEntityTypeNamePlurial#>Internal.Count ; sei++)
        {
			var subEntity = <#=npEntityTypeNamePlurial#>Internal[sei];
<#+
        if (np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
            ObjectList originalValues;
            if (subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("<#=npName#>", out originalValues) && originalValues.Contains(entity))
            {
                originalValues.Remove(entity);
                if (originalValues.Count == 0)
                    subEntity.ChangeTracker.ObjectsAddedToCollectionProperties.Remove("<#=npName#>");
            }
            if (subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("<#=npName#>", out originalValues) && originalValues.Contains(entity))
            {
                originalValues.Remove(entity);
                if (originalValues.Count == 0)
                    subEntity.ChangeTracker.ObjectsRemovedFromCollectionProperties.Remove("<#=npName#>");
            }
<#+
        }
        else
        {
#>
            object originalValue;
            if (subEntity.ChangeTracker.OriginalValues.TryGetValue("<#=npName#>", out originalValue) && originalValue == entity)
                subEntity.ChangeTracker.OriginalValues.Remove("<#=npName#>");
<#+
        }
#>
        }
<#+		
    }
#>
    }

<#+ 
    if (navigationPropertiesCascadeDelete.Any())
    {
#>
    private void EntityRemoving(<#=entityTypeFullName#> entity)
    {
<#+
bool useEntityremovings = navigationPropertiesCascadeDelete.Any(np => np.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.One);
if (useEntityremovings)
{
#>
        EntityRemovings.Add(entity);
<#+
}
foreach (var navigationProperty in navigationPropertiesCascadeDelete)
{
    var subEntityType = navigationProperty.ToEndMember.GetEntityType();
    var subEntityTypeName = code.Escape(subEntityType);
    var subEntityTypeNamePlurial = GetPlurial(code, container, subEntityType);
    var navigationPropertyName = code.Escape(navigationProperty);
    if (navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
    {
#>
		var entity<#=navigationPropertyName#>Array = entity.<#=navigationPropertyName#>.ToArray();
        for (sei = 0 ; sei < entity<#=navigationPropertyName#>Array.Length; sei++)
		{
			<#=clientEntitiesNamespace#>.<#=subEntityTypeName#> subEntity = entity<#=navigationPropertyName#>Array[sei];
            <#=subEntityTypeNamePlurial#>Internal.RemoveCascade(subEntity);
		}
<#+
    }
    else // 1-1 Table Splitting
    {
#>
        if (entity.<#=navigationPropertyName#> != null && ! EntityRemovings.Contains(entity.<#=navigationPropertyName#>))
            <#=subEntityTypeNamePlurial#>.Remove(entity.<#=navigationPropertyName#>);
<#+
    }
}
if (useEntityremovings)
{
#>
        EntityRemovings.Remove(entity);
<#+
}
#>
    }
<#+
}
#>
    
    private void EntityAttachWithoutChangingStateSubEntities(<#=entityTypeFullName#> entity)
    {
        var entityInCache = GetEntityInCache(entity);
        bool entityInCacheIsInitializingRelationships = false;
        if (entityInCache != null)
        {
            entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
            entityInCache.IsInitializingRelationships = true;
        }
        EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
        if (entityInCache != null)
            entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
    }
    
    private void EntityAttachWithoutChangingStateSubEntitiesBody(<#=entityTypeFullName#> entity, <#=entityTypeFullName#> entityInCache)
    {
        if (entity == entityInCache)
            return;
<#+
    if (entityType.BaseType != null)
    {
#>
        EntityAttachWithoutChangingStateSubEntitiesBody((<#=clientEntitiesNamespace#>.<#=code.Escape(entityType.BaseType)#>)entity, (<#=clientEntitiesNamespace#>.<#=code.Escape(entityType.BaseType)#>)entityInCache);
<#+
    }
    foreach (var navigationProperty in entityType.NavigationProperties.Where(np => (isEntitySet || np.DeclaringType == entityType) && IsPublic(np)))
    {
        bool cascadeDeleteFrom = navigationProperty.FromEndMember.DeleteBehavior == OperationAction.Cascade;
        bool cascadeDeleteTo = navigationProperty.ToEndMember.DeleteBehavior == OperationAction.Cascade;
        bool hasCascadeDelete = false;
        var toEntityType = navigationProperty.ToEndMember.GetEntityType();
        var toEntityTypePlurial = GetPlurial(code, container, toEntityType);
        var toEntityTypeEntitySetEntityType = GetEntitySet(container, toEntityType).ElementType;
        var toEntityTypeEntitySetEntityTypeName = code.Escape(toEntityTypeEntitySetEntityType);
        var toEntityTypeEntitySetEntityTypeNamePlurial = GetPlurial(code, container, toEntityTypeEntitySetEntityType);
        IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
        GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out fromEnumerable, out toEnumerable);
        IEnumerator<EdmProperty> fromEnumerator = fromEnumerable.GetEnumerator();
        IEnumerator<EdmProperty> toEnumerator = toEnumerable.GetEnumerator();
        
        if(navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
            var subEntityType = navigationProperty.ToEndMember.GetEntityType();
            var subEntityTypeName = code.Escape(subEntityType);
            var subEntityTypeNamePlurial = GetPlurial(code, container, subEntityType);
            var otherNP = GetOtherNavigationProperty(navigationProperty);
            string otherNPName;
            if (IsPublic(otherNP))
                otherNPName = code.Escape(otherNP);
            else
            {
                otherNP = null;
                otherNPName = null;
            }
#>
		var entity<#=code.Escape(navigationProperty)#>Array = entity.<#=code.Escape(navigationProperty)#>.ToArray();
        for (int sei = 0 ; sei < entity<#=code.Escape(navigationProperty)#>Array.Length ; sei++)
        {
			var subEntity = entity<#=code.Escape(navigationProperty)#>Array[sei];
            <#=clientEntitiesNamespace#>.<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#> subEntityInCache;
            if (<#=GetPlurial(code, container, navigationProperty.ToEndMember.GetEntityType())#>.Contains(subEntity))
                subEntityInCache = subEntity;
            else
                subEntityInCache = AttachWithoutChangingState(subEntity, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
<#+
            if (cascadeDeleteFrom)
            {
#>
            if ((entityInCache.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                <#=toEntityTypePlurial#>Internal.RemoveCascade(subEntityInCache);
            else
    <#+
            }
#>			if (!(<#=hasCascadeDelete ? "isDeleted || " : ""#>entityInCache == null || entityInCache == entity || entityInCache.<#=code.Escape(navigationProperty)#>.Contains(subEntityInCache)))
                entityInCache.<#=code.Escape(navigationProperty)#>.Add(subEntityInCache);
        }
<#+
            var association = (AssociationType)navigationProperty.RelationshipType;
            var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
            if (referentialConstraint != null)
            {
                string otherNpName = code.Escape(otherNP);
#>
        if (entityInCache != null)
        {
            List<<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>> subEntities;
            if (<#=subEntityTypeNamePlurial#><#=otherNpName#>FKsDico.TryGetValue(new <#=entitySetEntityTypeName#>Keys { <#+
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    string fk = code.Escape(fromEnumerator.Current);
#><#=fk#> = entity.<#=fk#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> }, out subEntities))
                for (int sei = 0 ; sei < subEntities.Count ; sei++)
                {
					var subEntity = subEntities[sei];
<#+
            if(!string.IsNullOrEmpty(otherNPName))
            {
#>
                    if (subEntity.<#=otherNPName#> == null)
    <#+
            }
#>
                    ((ITrackableCollection<<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#>>)entityInCache.<#=code.Escape(navigationProperty)#>).AttachWithoutCheckingIfAlreadyExist(subEntity);
                }
        }
<#+
            }
        }
        else
        {
            bool zeroOne = navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne;
            bool fromOne = navigationProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One;
            var npName = code.Escape(navigationProperty);
            if (!hasCascadeDelete && cascadeDeleteTo)
            {
                hasCascadeDelete = true;
#>
        bool isDeleted = false;
<#+
            }
#>
        if (entity.<#=npName#> != null)
        {
            <#=clientEntitiesNamespace#>.<#=code.Escape(toEntityType)#> parentEntityInCache;
            if (<#=toEntityTypePlurial#>Internal.Contains(entity.<#=npName#>))
                parentEntityInCache = entity.<#=npName#>;
            else
                parentEntityInCache = AttachWithoutChangingState(entity.<#=navigationProperty#>, entity.ChangeTracker.State == ObjectState.Unchanged ? ObjectState.Unchanged : ObjectState.Added);
            if (entityInCache != null<#=hasCascadeDelete ? " && ! isDeleted" : ""#>)
                entityInCache.<#=npName#> = parentEntityInCache;
        }
<#+
            var association = (AssociationType)navigationProperty.RelationshipType;
            var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
            if (referentialConstraint != null)
            {
                int fkPropsCount = 0;
                string fkProp;
#>
        else if (! (entityInCache == null<#=zeroOne && ! fromOne ? fromEnumerable.Where(f => f.Nullable).Select(f => string.Concat(" || entityInCache.", code.Escape(f), " == null")).Aggregate((f1, f2) => f1 + f2) : ""#>))
        {
            <#=clientEntitiesNamespace#>.<#=toEntityTypeEntitySetEntityTypeName#> parentEntityInCache;
            if (<#=toEntityTypeEntitySetEntityTypeNamePlurial#>Dico.TryGetValue(new <#=toEntityTypeEntitySetEntityTypeName#>Keys { <#+
                fromEnumerator.MoveNext(); 
                toEnumerator.MoveNext(); 
                for(;;)
                {
                    fkPropsCount ++;
                    fkProp = code.Escape(toEnumerator.Current);
#><#=fkProp#> = entityInCache.<#=code.Escape(fromEnumerator.Current)#><#=fromEnumerator.Current.Nullable && code.Escape(fromEnumerator.Current.TypeUsage) != "string" ? ".Value" : ""#><#+
                    if (! (fromEnumerator.MoveNext() | toEnumerator.MoveNext())) 
                        break;
#>, <#+
                }
#> }, out parentEntityInCache))
            {
<#+
if (cascadeDeleteTo)
{
#>
                if ((parentEntityInCache.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    <#=entityTypeNamePlurial#>Internal.RemoveCascade(entityInCache);
                    isDeleted = true;
                }
                else
    <#+
        
}
#>
                entityInCache.<#=navigationProperty#> = <#=toEntityTypeEntitySetEntityType == toEntityType ? "" : string.Concat("(", clientEntitiesNamespace, ".", code.Escape(toEntityType), ")")#>parentEntityInCache;
            }
        }
<#+
            }
        }
    }
#>
    }

    private <#=entityTypeFullName#> GetEntityInCache(<#=entityTypeFullName#> entity, bool includingDeleted = false, bool applyDataTransfer = false)
    {
        if (entity == null)
            return null;
        <#=clientEntitiesNamespace#>.<#=entitySetEntityTypeName#> value;
        if (! (applyDataTransfer && <#=entitySetEntityTypeNamePlurial#>DataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! <#=entitySetEntityTypeNamePlurial#>Dico.TryGetValue(new <#=entitySetEntityTypeName#>Keys { <#=entityType.KeyMembers.Select(km => string.Concat(code.Escape(km), " = entity.", code.Escape(km))).Aggregate((km1, km2) => string.Concat(km1, ", ", km2))#> }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted)<#=couldHaveTemporaryKey ? string.Concat(" && ! (entity.HasTemporaryKey && ", entitySetEntityTypeNamePlurial, "AddedDico.TryGetValue(entity.EntityKey, out value))") : ""#>)
            return null;
        return <#=entitySetEntityType == entityType ? "" : string.Concat("(", entityTypeFullName, ")")#>value;
    }

    protected override <#=entityTypeFullName#> GetEntity(<#=entityTypeFullName#> entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
    {
        return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
    }
    private <#=entityTypeFullName#> GetEntity(<#=entityTypeFullName#> entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
    {
        if (entity == null)
            return null;
        object entityGot;
        if (EntitiesGot.TryGetValue(entity, out entityGot))
            return (<#=entityTypeFullName#>)entityGot;
<#+
        if (subEntityTypes.Count != 0)
        {
#>
        entity.IsDeserializing = true;
        try
        {
<#+
            foreach (var subEntityType in subEntityTypes)
            {
                string subEntityTypeName = code.Escape(subEntityType);
#>
            var entityAs<#=subEntityTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=subEntityTypeName#>;
            if (entityAs<#=subEntityTypeName#> != null)
                return GetEntity(entityAs<#=subEntityTypeName#>, applyState, mergeOption, includingDeleted, defaultState, applyDataTransfer);
<#+
            }
#>
        }
        finally
        {
            entity.IsDeserializing = false;
        }
<#+
        }
        if (entityType.Abstract)
        {
#>
        throw new InvalidOperationException();
<#+
        }
        else
        {
#>

        if (mergeOption == null)
            mergeOption = MergeOption;
<#+
            if (utc)
                foreach (var edmProperty in entityType.Properties.Cast<EdmMember>().Except(entityType.KeyMembers).Where(p => p.TypeUsage.ToString() == "Edm.DateTime").OfType<EdmProperty>())
                {
                    if (edmProperty.Nullable)
                    {
#>
        if (entity.<#=code.Escape(edmProperty)#>.HasValue)
    <#+	
                    }
#>
            entity.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#><#+if (edmProperty.Nullable){#>.Value<#+}#>.ToLocalTime();
<#+
                }
#>

        if (mergeOption == MergeOption.NoTracking)
            return entity;

        if (<#=entityTypeNamePlurial#>Internal.Contains(entity))
            return entity;

        entity.IsDeserializing = true;

        includingDeleted |= applyState;

<#+
        foreach (var np in entityType.NavigationProperties)
        {
            if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#>
        var entity<#=code.Escape(np)#> = entity.<#=code.Escape(np)#>.ToList();
        entity.<#=code.Escape(np)#>.Clear();
<#+
            }
            else
            {
#>
        var entity<#=code.Escape(np)#> = entity.<#=code.Escape(np)#>;
        entity.<#=code.Escape(np)#> = null;
<#+
            }
        }
#>

        <#=entityTypeFullName#> value;
        var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
        ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
        if (entityInCache == null)
        {
            var originalState = entity.ChangeTracker.State;
            entity.ChangeTracker = null;
<#+
        if (couldHaveTemporaryKey)
        {
#>
            if (entity.ChangeTracker.State == ObjectState.Detached)
                entity.ResetEntityKey();
<#+
        }
#>
            entity.IsDeserializing = false;
            var state = originalState == ObjectState.Detached ? defaultState : originalState;
            switch(state)
            {
                case ObjectState.Added:
                    <#=entityTypeNamePlurial#>Internal.AddWithoutCheckingIfAlreadyExist(entity);
                    break;
                default:
                    entity.IsInitializingRelationships = true;
                    <#=entityTypeNamePlurial#>Internal.AttachWithoutCheckingIfAlreadyExist(entity);
                    entity.IsInitializingRelationships = false;
                    break;
            }
            if (applyState)
                entity.ChangeTracker.State = state;
            value = entity;
        }
        else
        {
            switch (mergeOption)
            {
                case MergeOption.AppendOnly:
                    RefreshNewLoadedProperties(entityInCache, entity);
                    value = entityInCache;
                    break;
                case MergeOption.OverwriteChanges:
                    RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                    value = entityInCache;
                    break;
                case MergeOption.PreserveChanges:
                    RefreshOriginalValues(entityInCache, entity);
                    value = entityInCache;
                    break;
                default: 
                    throw new NotImplementedException();
            }
            if (applyState)
            {
                switch(entity.ChangeTracker.State)
                {
                    case ObjectState.Detached:
                        <#=entityTypeNamePlurial#>.Detach(value);
                        break;
                    case ObjectState.Deleted:
                        <#=entityTypeNamePlurial#>.Remove(value);
                        break;
                    default:
                        value.ChangeTracker.State = entity.ChangeTracker.State;
                        break;
                }
            }
        }
        EntitiesGot.Add(entity, value);
        if (! entity.IsInitializingRelationships)
        {
            entity.IsInitializingRelationships = true;
            value.IsInitializingRelationships = true;

<#+
        if (entityType.NavigationProperties.Any())
        {
            foreach (var np in entityType.NavigationProperties)
            {
                if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
                {
#>
            for (int ei = 0 ; ei < entity<#=code.Escape(np)#>.Count ; ei++)
            {
				var e = entity<#=code.Escape(np)#>[ei];
                if (value.ChangeTracker.State == ObjectState.Detached)
                    GetEntity(e, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                else
                    value.<#=code.Escape(np)#>.Add(GetEntity(e, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer));
            }
<#+
                }
                else
                {
#>
            if (entity<#=code.Escape(np)#> != null)
            {
                if (value.ChangeTracker.State == ObjectState.Detached)
                    GetEntity(entity<#=code.Escape(np)#>, applyState, defaultState:defaultState, applyDataTransfer:applyDataTransfer);
                else
                    value.<#=code.Escape(np)#> = GetEntity(entity<#=code.Escape(np)#>, applyState, defaultState:defaultState, mergeOption: mergeOption, applyDataTransfer:applyDataTransfer);
            }
<#+
                }
            }
        }
#>

            if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
            {
				
                for (int mpi = 0 ; mpi < originalChangeTracker.ModifiedProperties.Count ; mpi ++)
				{
					var modifiedProperty = originalChangeTracker.ModifiedProperties[mpi];
                    if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
					{
                        value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
					}
				}
                foreach (var originalValue in originalChangeTracker.OriginalValues)
                {
                    var originalValueEntity = originalValue.Value as IEntity;
                    if (originalValueEntity != null) 
                    {
                        var originalState = originalValueEntity.ChangeTracker.State;
                        IEntity originalEntity = null;
                        var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                        if (value.ChangeTracker.State != ObjectState.Detached)
                            value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                        if (originalValueEntity != null && originalState == ObjectState.Detached)
                            Detach(originalEntity);
                    }
                }
                foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
				{
                    for (int orcpvi = 0 ; orcpvi < objectsRemovedToCollectionProperties.Value.Count ; orcpvi++)
					{
						var objectsRemovedToCollectionProperty = (IEntity)objectsRemovedToCollectionProperties.Value[orcpvi];
                        if (objectsRemovedToCollectionProperty != null)
                        {
                            var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                            IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
<#+
            var toManyNavigationProperties = entityType.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many).ToList();
            if (toManyNavigationProperties.Count != 0)
            {
#>
                            switch (objectsRemovedToCollectionProperties.Key)
                            {
<#+
                foreach (var toManyNavigationProperty in toManyNavigationProperties)
                {
#>
                                case "<#=code.Escape(toManyNavigationProperty)#>":
                                        value.<#=code.Escape(toManyNavigationProperty)#>.Remove((<#=clientEntitiesNamespace#>.<#=code.Escape(toManyNavigationProperty.ToEndMember.GetEntityType())#>)removedEntity);
                                        break;
<#+
                }
#>
                            }
<#+
            }
#>
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                            if (originalState == ObjectState.Detached)
                                Detach(removedEntity);
                        }
					}
				}
                foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
				{
                    for (int oacpvi = 0 ; oacpvi < objectsAddedToCollectionProperties.Value.Count ; oacpvi++)
					{
						var objectsAddedToCollectionProperty = objectsAddedToCollectionProperties.Value[oacpvi];
                        if (objectsAddedToCollectionProperty != null)
                        {
                            var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                        }
            }
				}
            }

            value.IsInitializingRelationships = false;
        }
        value.ChangeTracker.ChangeTrackingEnabled = true;
        return value;
<#+
        }
#>
    } 

    private <#=entityTypeFullName#> AttachWithoutChangingState(<#=entityTypeFullName#> entity, ObjectState? defaultState = null)
    {
        if (<#=entityTypeNamePlurial#>Internal.Contains(entity))
            return entity;
        var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
        if (<#=entityTypeNamePlurial#>Internal.AttachWithoutChangingState(entityIncludingCache, defaultState))
            EntityAttachWithoutChangingStateSubEntities(entity);
        return entityIncludingCache;
    }

    public void RefreshNewLoadedProperties(<#=entityTypeFullName#> entityInCache, <#=entityTypeFullName#> entity, bool applyState = false)
    {
        bool isDeserializing = entityInCache.IsDeserializing;
        entityInCache.IsDeserializing = true;
<#+
    List<MethodDeclarationSyntax> getMethods;
    if (specificationsElements.GetMethods.TryGetValue(code.Escape(entityType), out getMethods))
    {
#>
        if (entity.Specifications != null)
        {
            if (entityInCache.Specifications == null)
                entityInCache.Specifications = entity.Specifications;
            else
            {
<#+
        foreach (var getMethod in getMethods)
        {
            string getMethodPropertyName = GetPropertyNameFromMethod(getMethod);
#>
                if (! entityInCache.Specifications.Has<#=getMethodPropertyName#> && entity.Specifications.Has<#=getMethodPropertyName#>)
                {
                    entityInCache.Specifications.<#=getMethodPropertyName#> = entity.Specifications.<#=getMethodPropertyName#>;
                    entityInCache.Specifications.Has<#=getMethodPropertyName#> = entity.Specifications.Has<#=getMethodPropertyName#>;
                }
<#+
        }
#>
            }
        }
<#+
    }
#>
        entityInCache.IsDeserializing = isDeserializing;
    }

    public void RefreshCurrentValues(<#=entityTypeFullName#> entityInCache, <#=entityTypeFullName#> entity)
    {
        RefreshCurrentValues(entityInCache, entity, false);
    }
    public void RefreshCurrentValues(<#=entityTypeFullName#> entityInCache, <#=entityTypeFullName#> entity, bool applyState = false)
    {
        bool isDeserializing = entityInCache.IsDeserializing;
        entityInCache.IsDeserializing = true;
<#+
    entityTypeTmp = entityType.BaseType;
    while (entityTypeTmp != null)
    {
#>
        RefreshCurrentValues((<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entityInCache, (<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entity);
<#+
        entityTypeTmp = entityTypeTmp.BaseType;
    }
    foreach (EdmProperty edmProperty in entityType.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entityType && IsPublic(p)))
    {
#>
        if (entityInCache.<#=code.Escape(edmProperty)#> != entity.<#=code.Escape(edmProperty)#>)
            entityInCache.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#>;
<#+
    }
    foreach(EdmProperty complexProperty in entityType.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entityType && IsPublic(p)))
    {
#>
        if (entityInCache.<#=code.Escape(complexProperty)#> != null)
        {
<#+
        var complexType = edmxElements.ComplexTypes.First(ct => code.Escape(ct) == code.Escape(complexProperty.TypeUsage));
        foreach(EdmProperty edmProperty in complexType.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complexType))
        {
#>
            if (entityInCache.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> != entity.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#>)
            {
                entityInCache.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#>;
                if (entityInCache.ChangeTracker.ModifiedProperties.Contains("<#=code.Escape(complexProperty)#>"))
                    entityInCache.ChangeTracker.ModifiedProperties.Remove("<#=code.Escape(complexProperty)#>");
            }
<#+
        }
#>
        }
<#+
    }
    if (specificationsElements.GetMethods.TryGetValue(code.Escape(entityType), out getMethods))
    {
#>
        if (entity.Specifications != null)
        {
            if (entityInCache.Specifications == null)
                entityInCache.Specifications = entity.Specifications;
            else
            {
<#+
        foreach (var getMethod in getMethods)
        {
            string getMethodPropertyName = GetPropertyNameFromMethod(getMethod);
#>
                if (entity.Specifications.Has<#=getMethodPropertyName#>)
                {
                    entityInCache.Specifications.<#=getMethodPropertyName#> = entity.Specifications.<#=getMethodPropertyName#>;
                    entityInCache.Specifications.Has<#=getMethodPropertyName#> = entity.Specifications.Has<#=getMethodPropertyName#>;
                }
<#+
        }
#>
            }
        }
<#+
    }
#>
        entityInCache.IsDeserializing = isDeserializing;
        if (applyState)
        {
            entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
            entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
        }
        else
        {
            entityInCache.ChangeTracker.AcceptChanges();
            entityInCache.ChangeTracker.ModifiedProperties.Clear();
        }
    }

    private void RefreshOriginalValues(<#=entityTypeFullName#> entityInCache, <#=entityTypeFullName#> entity)
    {
<#+
    entityTypeTmp = entityType.BaseType;
    while (entityTypeTmp != null)
    {
#>
        RefreshOriginalValues((<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entityInCache, (<#=clientEntitiesNamespace#>.<#=code.Escape(entityTypeTmp)#>) entity);
<#+
        entityTypeTmp = entityTypeTmp.BaseType;
    }
    foreach (EdmProperty edmProperty in entityType.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entityType && IsPublic(p)).Except(entityType.KeyMembers))
    {
#>
        if (! (entityInCache.<#=code.Escape(edmProperty)#> == entity.<#=code.Escape(edmProperty)#> || entityInCache.ChangeTracker.ModifiedProperties.Contains("<#=code.Escape(edmProperty)#>")))
            entityInCache.ChangeTracker.ModifiedProperties.Add("<#=code.Escape(edmProperty)#>");
<#+
    }
    foreach(EdmProperty complexProperty in entityType.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entityType && IsPublic(p)))
    {
#>
        if (entityInCache.<#=code.Escape(complexProperty)#> != null)
        {
<#+
        var complexType = edmxElements.ComplexTypes.First(ct => code.Escape(ct) == code.Escape(complexProperty.TypeUsage));
        foreach(EdmProperty edmProperty in complexType.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complexType))
        {
#>
            if (! (entityInCache.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> == entity.<#=code.Escape(complexProperty)#>.<#=code.Escape(edmProperty)#> || entityInCache.ChangeTracker.ModifiedProperties.Contains("<#=code.Escape(complexProperty)#>")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("<#=code.Escape(complexProperty)#>");
<#+
        }
#>
        }
<#+
    }
#>
    }

    private <#=entityTypeFullName#> ReduceToKey(<#=entityTypeFullName#> entity)
    {
<#+
    foreach (var subEntityType in subEntityTypes)
    {
        var variableName = string.Concat("entityAs", code.Escape(subEntityType));
#>
        var <#=variableName#> = entity as <#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>;
        if (<#=variableName#> != null)
            return ReduceToKey(<#=variableName#>);
<#+
    }
    if (string.IsNullOrEmpty(code.AbstractOption(entityType))) 
    {#>
        <#=entityTypeFullName#> value = new <#=entityTypeFullName#> { <#+ InitKeys(code, entityType, "entity");#> };
        return value;
<#+
    }
    else
    {
#>
        throw new InvalidOperationException();
<#+
    }
#>
    }

    private <#=entityTypeFullName#> ReduceToModifications(<#=entityTypeFullName#> entity)
    {
<#+	
    foreach (var subEntityType in subEntityTypes)
    {
        var variableName = string.Concat("entityAs", code.Escape(subEntityType));
#>
        var <#=variableName#> = entity as <#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>;
        if (<#=variableName#> != null)
            return ReduceToModifications(<#=variableName#>);
<#+
    }
    if (string.IsNullOrEmpty(code.AbstractOption(entityType))) 
    {
		List<WAQSMetadata> metadata;
		if (!specificationsElements.Metadata.TryGetValue(code.Escape(entityType), out metadata))
			metadata = new List<WAQSMetadata>();

#>
        <#=entityTypeFullName#> value = new <#=entityTypeFullName#> { <#+
        InitKeys(code, entityType, "entity"); 
        foreach (var concurrencyModeFixedProperties in entityType.Members.Except(entityType.KeyMembers).Where(m => IsConcurrencyFixed(m)))
        {
			var concurrencyModeFixedPropertiesName = code.Escape(concurrencyModeFixedProperties);
#>, <#=concurrencyModeFixedPropertiesName#> = entity.<#=concurrencyModeFixedPropertiesName#><#+
        }
#> };
        value.ChangeTracker.Saving = true;
        value.ChangeTracker.ChangeTrackingEnabled = true;
        value.ChangeTracker.State = entity.ChangeTracker.State;
        switch (entity.ChangeTracker.State)
        {
            case ObjectState.Added:
<#+
            foreach (var edmProperty in entityType.Properties.Cast<EdmMember>().Where(p => IsPublic(p)).Except(entityType.KeyMembers).OfType<EdmProperty>())
            {
				SetValuePropertyFromEntityProperty(edmProperty, code.Escape(edmProperty), utc);
            }
#>				break;
            case ObjectState.Deleted:
                value.ChangeTracker.ChangeTrackingEnabled = false;
<#+
        foreach (var edmProperty in entityType.Properties.OfType<EdmProperty>().Where(p => IsPublic(p)).Except(entityType.KeyMembers.OfType<EdmProperty>()))
        {
			var propertyName = code.Escape(edmProperty);
            if (entityType.NavigationProperties.Where(np=>np.GetDependentProperties().Contains(edmProperty) && IsPublic(np)).Any())
            {
				SetValuePropertyFromEntityProperty(edmProperty, propertyName, utc);
                }
            else
            {
                if (IsHorizontalEntitySplittingCondition(edmxPath, entityType, edmProperty, edm_ns, msl_ns, runtime))
                {
#>
                object value<#=propertyName#>OriginalValue;
                if (value.ChangeTracker.TryGetValue("<#=propertyName#>", out value<#=propertyName#>OriginalValue))
                    value.<#=propertyName#> = (<#=code.Escape(edmProperty.TypeUsage)#>)value<#=propertyName#>OriginalValue;
                else
                    value.<#=propertyName#> = entity.<#=propertyName#>;
<#+
                }
                else
                {
#>
                value.<#=code.Escape(edmProperty)#> = <#+
                    if (IsConcurrencyFixed(edmProperty))
                    {
#>entity.<#=code.Escape(edmProperty)#>;
<#+
                    }
                    else if (edmProperty.TypeUsage.EdmType is ComplexType)
                    {
#>null;
<#+
                    }
                    else
                    {
#>default(<#=code.Escape(edmProperty.TypeUsage)#>); 
<#+
                    }
                }
            }
        }
#>				break;
            case ObjectState.Modified:
<#+
        foreach (var edmProperty in entityType.Members.Except(entityType.KeyMembers).OfType<EdmProperty>().Where(p => IsConcurrencyFixed(p)))
        {
			var propertyName = code.Escape(edmProperty);
#>
                value.<#=propertyName#> = entity.<#=propertyName#>;
<#+
        }
        foreach (var edmProperty in entityType.Members.Except(entityType.KeyMembers).OfType<EdmProperty>().Where(p => IsHorizontalEntitySplittingCondition(edmxPath, entityType, p, edm_ns, msl_ns, runtime)))
        {
#>
                value.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#>;
                object value<#=code.Escape(edmProperty)#>OriginalValue;
                if (value.ChangeTracker.TryGetValue("<#=code.Escape(edmProperty)#>", out value<#=code.Escape(edmProperty)#>OriginalValue))
                    value.ChangeTracer.OriginalValues.Add("<#=code.Escape(edmProperty)#>", value<#=code.Escape(edmProperty)#>OriginalValue);
<#+
        }
        var possibleModifiedProps = entityType.Members.Where(p => IsPublic(p)).Except(entityType.KeyMembers).OfType<EdmProperty>().ToList();
#>
                value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
<#+
        foreach (var edmProperty in possibleModifiedProps.ToList())
        {
			var propertyName = code.Escape(edmProperty);
                if (entityType.NavigationProperties.Where(np=>np.GetDependentProperties().Contains(edmProperty) && IsPublic(np)).Any())
                {
                    possibleModifiedProps.Remove(edmProperty);
                if (utc && edmProperty.TypeUsage.ToString() == "Edm.DateTime")
                {
                    if (edmProperty.Nullable)
                    {
#>
                if (entity.<#=code.Escape(edmProperty)#>.HasValue)
    <#+	
                    }
#>
                value.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#><#+if (edmProperty.Nullable){#>.Value<#+}#>.ToUniversalTime();
<#+
                }
                else
                {
#>
                value.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#>;
<#+
                }
            }
        }
                    if (possibleModifiedProps.Any())
                    {
#>
                foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
				{
                    switch (modifiedPropery)
                    {
<#+
                foreach (var edmProperty in possibleModifiedProps) 
                { 
					var propertyName = code.Escape(edmProperty);
#>
                        case "<#=propertyName#>":
<#+
				SetValuePropertyFromEntityProperty(edmProperty, propertyName, utc);

				foreach (var dp in metadata.Where(m => m.Property == propertyName || m.DependentProperties.Any(dps => dps.First().Name == propertyName)).SelectMany(m => m.DependentProperties.Select(dps => dps.First().Name).Union(new [] { m.Property }).Where(p => p != propertyName).Distinct()))
                {
					SetValuePropertyFromEntityProperty(entityType.Properties.First(p => code.Escape(p) == dp), dp, utc);
                    }
#>
                            break;
<#+
            }
#>
                    }
<#+
        }
#>
				}
                break;
            case ObjectState.Unchanged:
            case ObjectState.CascadeDeleted:
                break;
            default: //case ObjectState.Detached:
                throw new InvalidOperationException();
        }
        return value;
<#+
    }
    else
    {
#>
        throw new InvalidOperationException();
<#+
    }
#>
    }

    private void ReduceNavigationProperties(<#=entityTypeFullName#> originalValue, <#=entityTypeFullName#> newValue<#+foreach (var navPropEntitySet in (entityType.NavigationProperties.Where(np => IsPublic(np)).Union(subEntityTypes.SelectMany(et => et.NavigationProperties.Where(np => IsPublic(np))))).Select(np => GetEntitySet(container, np.ToEndMember.GetEntityType())).Distinct()){#>, Dictionary<<#=clientEntitiesNamespace#>.<#=code.Escape(navPropEntitySet.ElementType)#>, <#=clientEntitiesNamespace#>.<#=code.Escape(navPropEntitySet.ElementType)#>> reduced<#=code.Escape(navPropEntitySet)#>Dictionary<#+}#>)
    {
<#+
    foreach (var subEntityType in subEntityTypes)
    {
        string subEntityTypeName = code.Escape(subEntityType);
#>
        var entityAs<#=subEntityTypeName#> = originalValue as <#=clientEntitiesNamespace#>.<#=subEntityTypeName#>;
        if (entityAs<#=subEntityTypeName#> != null)
        {
            ReduceNavigationProperties(entityAs<#=subEntityTypeName#>, (<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>)newValue<#+foreach (var navPropEntitySet in (subEntityType.NavigationProperties.Where(np => IsPublic(np)).Union(GetSubEntityTypes(itemCollection, subEntityType).SelectMany(et => et.NavigationProperties.Where(np => IsPublic(np))))).Select(np => GetEntitySet(container, np.ToEndMember.GetEntityType())).Distinct()){#>, reduced<#=code.Escape(navPropEntitySet)#>Dictionary<#+}#>);
            return;
        }
<#+
    }
#>
        newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
        newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
        newValue.ChangeTracker.OriginalValues.Clear();
<#+
    if (! entityType.Abstract)
    {
    var reducableNavigationProperties = entityType.NavigationProperties.Where(np => IsPublic(np));
    var manyToManyRelationships = reducableNavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && IsPublic(np));
    if (manyToManyRelationships.Any())
    {
#>
        for (int reai = 0 ; reai < originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.Count ; reai++)
        {
			var relatedEntityAdded in originalValue.ChangeTracker.ObjectsAddedToCollectionProperties[reai];
            switch (relatedEntityAdded.Key)
            {
<#+ 
        foreach (var manyToManyRelationship in manyToManyRelationships)
        {
            string relationShipName = code.Escape(manyToManyRelationship);
            var subEntityType = manyToManyRelationship.ToEndMember.GetEntityType();
#>				case "<#=code.Escape(manyToManyRelationship)#>":
					var subEntities = originalValue.ChangeTracker.ObjectsAddedToCollectionProperties["<#=relationShipName#>"];
                    for (int sei = 0 ; sei < subEntities.Count ; sei++)
					{
						var subEntity = (<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)subEntities[sei]
<#+
            var subEntityTypeEntitySet = GetEntitySet(container, subEntityType);
#>
                        newValue.<#=relationShipName#>.Add(<#+if (subEntityTypeEntitySet.ElementType != subEntityType){#>(<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)<#+}#>reduced<#=code.Escape(subEntityTypeEntitySet)#>Dictionary[subEntity]);
					}
                break;
<#+
        }
#>			}
        }
        for (int reri = 0 ; reri < originalValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Count ; reri++)
        {
			var relatedEntityRemoved in originalValue.ChangeTracker.ObjectsRemovedFromCollectionProperties[reri];
            switch (relatedEntityRemoved.Key)
            {
<#+ 
        foreach (var manyToManyRelationship in manyToManyRelationships)
        {
            string relationShipName = code.Escape(manyToManyRelationship);
            var subEntityType = manyToManyRelationship.ToEndMember.GetEntityType();
            var subEntityTypeEntitySet = GetEntitySet(container, subEntityType);
#>				case "<#=code.Escape(manyToManyRelationship)#>":
				{
					var subEntities = originalValue.ChangeTracker.ObjectsRemovedFromCollectionProperties["<#=relationShipName#>"];
                    for (int sei = 0 ; sei < subEntities.Count ; sei++)
                    {
						var subEntity = (<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)subEntities[sei];
                        var relatedEntity = <#+if (subEntityTypeEntitySet.ElementType != subEntityType){#>(<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)<#+}#>reduced<#=code.Escape(subEntityTypeEntitySet)#>Dictionary[subEntity];
                        newValue.<#=relationShipName#>.Attach(relatedEntity, true);
                        newValue.<#=relationShipName#>.Remove(relatedEntity);
                    }
				}
                break;
<#+
            }
#>			}
        }
<#+
        }
        var manyToOneRelationships = reducableNavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && IsPublic(np));
        if (manyToOneRelationships.Any())
        {
#>
        foreach (var relatedEntity in originalValue.ChangeTracker.OriginalValues)
        {
            if (relatedEntity.Value == null)
                continue;
            switch (relatedEntity.Key)
            {
<#+
            foreach (var manyToOneRelationship in manyToOneRelationships)
            {
                string relationShipName = code.Escape(manyToOneRelationship);
                var parentEntityType = manyToOneRelationship.ToEndMember.GetEntityType();
                var parentEntityTypeEntitySet = GetEntitySet(container, parentEntityType);
                string parentEntityTypeName = code.Escape(parentEntityType);
                string variableName = string.Concat(code.CamelCase(relationShipName), parentEntityTypeName, "ParentEntity");
                string newVariableName = string.Concat("new", relationShipName, parentEntityTypeName, "ParentEntity");
                string objectListName = string.Concat(variableName, "ObjectList");
#>				case "<#=code.Escape(manyToOneRelationship)#>":
                    var <#=variableName#> = (<#=clientEntitiesNamespace#>.<#=parentEntityTypeName#>)relatedEntity.Value;
                    <#=clientEntitiesNamespace#>.<#=code.Escape(parentEntityTypeEntitySet.ElementType)#> <#=newVariableName#><#+if (parentEntityTypeEntitySet.ElementType != parentEntityType){#>Base<#+}#>;
                    if (reduced<#=code.Escape(parentEntityTypeEntitySet)#>Dictionary.TryGetValue(<#=variableName#>, out <#=newVariableName#><#+if (parentEntityTypeEntitySet.ElementType != parentEntityType){#>Base<#+}#>))
                    {
<#+
                if (parentEntityTypeEntitySet.ElementType != parentEntityType)
                {
#>						var <#=newVariableName#> = (<#=clientEntitiesNamespace#>.<#=code.Escape(parentEntityType)#>)<#=newVariableName#>Base;
<#+
                }
#>						
                        newValue.ChangeTracker.OriginalValues.Add("<#=code.Escape(manyToOneRelationship)#>", <#=newVariableName#>);
<#+
                var otherNavigationProperty = GetOtherNavigationProperty(manyToOneRelationship);
                if (otherNavigationProperty != null)
                {
#>
                        <#=clientFxEntitiesTrackingNamespace#>.ObjectList <#=objectListName#>;
                        if (!<#=newVariableName#>.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("<#=code.Escape(otherNavigationProperty)#>", out <#=objectListName#>))
                        {
                            <#=objectListName#> = new <#=clientFxEntitiesTrackingNamespace#>.ObjectList();
                            <#=newVariableName#>.ChangeTracker.ObjectsRemovedFromCollectionProperties.Add("<#=code.Escape(GetOtherNavigationProperty(manyToOneRelationship))#>", <#=objectListName#>);
                        }
                        <#=objectListName#>.Add(newValue);
<#+
                }
#>
                    }
<#+
                foreach (var prop in manyToOneRelationship.GetDependentProperties())
                {
                    var propName = code.Escape(prop);
#>
                    newValue.<#=propName#> = originalValue.<#=propName#>;
<#+
                }
#>
                break;
<#+
            }
            foreach (var prop in entityType.NavigationProperties.SelectMany(np => np.GetDependentProperties()).Distinct())
            {
#>
                case "<#=code.Escape(prop)#>":
<#+
            }
#>
                    if (! newValue.ChangeTracker.OriginalValues.ContainsKey(relatedEntity.Key))
                        newValue.ChangeTracker.OriginalValues.Add(relatedEntity.Key, relatedEntity.Value);
                break;
            }
        }
<#+
        }
#>
        if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
        {
<#+
        foreach (var np in reducableNavigationProperties)
        {
            string npName = code.Escape(np);
            var subEntityType = np.ToEndMember.GetEntityType();
            var subEntityTypeEntitySet = GetEntitySet(container, subEntityType);
            if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#>
            foreach (var subEntity in originalValue.<#=npName#>.Where(se => se.ChangeTracker.State != ObjectState.Unchanged))
            {
                var relatedEntity = <#+if (subEntityTypeEntitySet.ElementType != subEntityType){#>(<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)<#+}#>reduced<#=code.Escape(subEntityTypeEntitySet)#>Dictionary[subEntity]; 
                if (! newValue.<#=npName#>.Contains(relatedEntity))
                {
                    ObjectList objectsAddedToCollectionProperties;
                    if (newValue.ChangeTracker.State == ObjectState.Added || relatedEntity.ChangeTracker.State == ObjectState.Added || originalValue.ChangeTracker.ObjectsAddedToCollectionProperties.TryGetValue("<#=npName#>", out objectsAddedToCollectionProperties) && objectsAddedToCollectionProperties.Contains(subEntity))
                        newValue.<#=npName#>.Add(relatedEntity);
                    else
                        newValue.<#=npName#>.Attach(relatedEntity, true);
                }
            }
<#+
            }
            else
            {
#>
            if (originalValue.<#=npName#> != null)
            {
                <#=clientEntitiesNamespace#>.<#=code.Escape(subEntityTypeEntitySet.ElementType)#> relatedEntity;
                if (reduced<#=code.Escape(subEntityTypeEntitySet)#>Dictionary.TryGetValue(originalValue.<#=code.Escape(np)#>, out relatedEntity))
                {
                    if (newValue.<#=npName#> != relatedEntity)
                        newValue.<#=npName#> = <#+if (subEntityTypeEntitySet.ElementType != subEntityType){#>(<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)<#+}#>relatedEntity;
                }
<#+
                if (np.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.One)
                {
#>
                else
                {
<#+
if (((AssociationType)np.RelationshipType).ReferentialConstraints.Any())
    foreach (var referentialConstraintProp in ((AssociationType)np.RelationshipType).ReferentialConstraints[0].ToProperties)
    {
#>
                    newValue.<#=referentialConstraintProp#> = originalValue.<#=referentialConstraintProp#>;
<#+
    }
#>
                }
<#+
                }
#>
            }
<#+
            }
        }
#>			
        }
<#+
    }
#>
    }

    private void RefreshComputedValues(<#=entityTypeFullName#> entity, <#=entityTypeFullName#> dbEntity)
    {
<#+
        foreach (var subEntityType in subEntityTypes)
        {
            var variableName = string.Concat("entityAs", code.Escape(subEntityType));
#>
        var <#=variableName#> = entity as <#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>;
        if (<#=variableName#> != null)
        {
            RefreshComputedValues(<#=variableName#>, (<#=clientEntitiesNamespace#>.<#=code.Escape(subEntityType)#>)dbEntity);
            return;
        }
<#+
        }
#>
<#+
        if (couldHaveTemporaryKey)
        {
#>
        if (entity.HasTemporaryKey)
        {
            <#=entitySetEntityTypeNamePlurial#>Dico.Add(new <#=entitySetEntityTypeName#>Keys { <#=entityType.KeyMembers.Select(km => string.Concat(code.Escape(km), " = dbEntity.", code.Escape(km))).Aggregate((km1, km2) => string.Concat(km1, ", ", km2))#> }, entity);
            Remove<#=entitySetEntityTypeNamePlurial#>AddedDico(entity);
        }						
<#+
        }
        if (! entityType.Abstract) 
        {
            bool resetKey = false;
            if (couldHaveTemporaryKey && identityProperties.Any())
            {
#>
        if (dbEntity.HasTemporaryKey)
        {
<#+
        foreach (var identityProperty in identityProperties)
        {
            string identityPropertyName = code.Escape(identityProperty);
#>
            entity.<#=identityPropertyName#> = dbEntity.<#=identityPropertyName#>;
<#+
        }
        resetKey = true;
#>
        }
<#+
            }
            foreach (var computedProperty in computedProperties)
            {
                string computedPropertyName = code.Escape(computedProperty);
#>
        entity.<#=computedPropertyName#> = dbEntity.<#=computedPropertyName#>;
<#+
    }
    var navPropsPublicNotMany = entityType.NavigationProperties.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && IsPublic(np));
    if (navPropsPublicNotMany.Any())
    {
#>
        entity.IsDeserializing = true;
<#+
        foreach (var navigationProperty in navPropsPublicNotMany)
        {
            IEnumerator<EdmProperty> fromEnumerator, toEnumerator;
            ReferentialConstraint referentialConstraint;
            GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
            if (referentialConstraint != null)
            {
                var toIdentitiesProps = TemporaryKeys(navigationProperty.ToEndMember.GetEntityType());
                for (;;)
                {
                    if (! fromEnumerator.MoveNext())
                        break;
                    if (! toEnumerator.MoveNext())
                        break;
                    if (toIdentitiesProps.Contains(toEnumerator.Current))
                    {
                        var fromName = code.Escape(fromEnumerator.Current);
                        if (entityType.KeyMembers.Any(km => code.Escape(km) == fromName))
                            resetKey = true;
#>
        if (dbEntity.<#=navigationProperty#> != null && dbEntity.<#=navigationProperty#>.ChangeTracker.State == ObjectState.Added)
            entity.<#=fromName#> = dbEntity.<#=fromName#>;
<#+
                    }
                }
            }
        }
#>
        entity.IsDeserializing = false;
<#+
        }
        if (couldHaveTemporaryKey && resetKey)
        {
#>
        entity.ResetEntityKey();
<#+
        }
    }
    else
    {
#>
        throw new InvalidOperationException();
<#+
    }
#>
    }

    private void Dispose<#=entityTypeName#>()
    {
        if (<#=fieldClientEntitySetName#> != null)
        {
			DisposeCollection<#=entityTypeName#>();
			var allEntities = <#=fieldClientEntitySetName#>.AllEntities.ToArray();
            for (int ei = 0 ; ei < allEntities.Length ; ei++)
            {
				var entity = allEntities[ei];
                DisposeEntity(entity);
            }
            <#=fieldClientEntitySetName#>.EntityAdded -= EntityAddedOrAttached;
            <#=fieldClientEntitySetName#>.EntityAttached -= EntityAddedOrAttached;
            <#=fieldClientEntitySetName#>.EntityReplaced -= EntityReplaced;
<#+ 
    if (navigationPropertiesCascadeDelete.Any())
    {
#>
            <#=fieldClientEntitySetName#>.EntityRemoving -= EntityRemoving;
<#+
    }
#>
            <#=fieldClientEntitySetName#>.EntityDetached -= EntityDetached;
        }
    }

<#+
}
#>
    public <#=edmxName#>SerializableContext GetModifiedEntities()
    {
        return new <#=edmxName#>SerializableContext 
        { 
<#+
var entitySetsEnumerator = container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)).GetEnumerator();
bool hasMoreEntitySet = entitySetsEnumerator.MoveNext();
while (hasMoreEntitySet)
{
    var entitySet = entitySetsEnumerator.Current;
#>			<#=code.Escape(entitySetsEnumerator.Current)#> = 
                new List<<#=clientEntitiesNamespace#>.<#=code.Escape(entitySet.ElementType)#>>(from e in <#=GetPlurial(code, container, entitySet.ElementType)#>Internal.AllEntities
                 where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                 select e)<#+
    hasMoreEntitySet = entitySetsEnumerator.MoveNext();
    if (hasMoreEntitySet)
    {
#>, 
<#+
    }
}
#> 
        };
    }

    public void AcceptAllChanges()
    {
<#+
entitySetsEnumerator = container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)).GetEnumerator();
while((hasMoreEntitySet = entitySetsEnumerator.MoveNext()))
{
    var entitySet = entitySetsEnumerator.Current;
#>
        foreach (var entity in <#=GetPlurial(code, container, entitySet.ElementType)#>)
            entity.ChangeTracker.AcceptChanges();
<#+
}
#>
    }

    public IClientEntitySet<I<#=contextName#>, T> GetClientEntitySet<T>()
        where T : IObjectWithChangeTracker
    {
<#+
foreach (EntityType entityType in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name).Where(e => GetEntitySet(container, e) != null && IsPublic(e)))
{
    var entityTypeName = code.Escape(entityType);
    var entitySetName = GetPlurial(code, container, entityType);
    var entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
#>
        if (typeof(T) == typeof(<#=entityTypeFullName#>))
            return (IClientEntitySet<I<#=contextName#>, T>)<#=entitySetName#>Internal;
<#+
}
#>
        throw new NotImplementedException();
    }

    
    public DateTime DbDateTime
    {
        get { throw new InvalidOperationException(); }
    }
    public async Task<DateTime> GetDbDateTime<#=asyncSuffix#>()
    {
        try
        {
            return await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginGetDbDateTime(null, null), r => service.EndGetDbDateTime(r)), <#=nbRetryOnTimeout#>);
        }
        catch (FaultException<FaultDetail> e)
        {
            throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
        }
        catch(Exception e)
        {
            if (IsDisposed)
                return default(DateTime);
            bool catched = false;
            CatchException(e, ref catched);
            if (catched)
                return default(DateTime);
            throw e;
        }
    }

    public override async Task<IEnumerable<T>> ExecuteQuery<#=asyncSuffix#><T>(IAsyncQueryable<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    { 
        if (mergeOption == null)
            mergeOption = MergeOption;
        if (mergeOption == MergeOption.NoTracking)
            return await new <#=contextName#>NoTracking(ServiceFactory).ExecuteQuery<#=asyncSuffix#>(query, getEntityOption: getEntityOption);
        else
            return await base.ExecuteQuery<#=asyncSuffix#>(query, mergeOption, getEntityOption: getEntityOption);
    }
    
    public override async Task<T> ExecuteQuery<#=asyncSuffix#><T>(IAsyncQueryableValue<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        if (mergeOption == null)
            mergeOption = MergeOption;
        if (mergeOption == MergeOption.NoTracking)
            return await new <#=contextName#>NoTracking(ServiceFactory).ExecuteQuery<#=asyncSuffix#>(query, getEntityOption: getEntityOption);
        else
            return await base.ExecuteQuery<#=asyncSuffix#>(query, mergeOption, getEntityOption: getEntityOption);
    }

    public override async Task<QueryPage<T>> LoadPage<#=asyncSuffix#><T>(int pageSize, IAsyncQueryable<T> query, LoadPageParameter[] identifiers, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        if (mergeOption == null)
            mergeOption = MergeOption;
        if (mergeOption == MergeOption.NoTracking)
            return await new <#=contextName#>NoTracking(ServiceFactory).LoadPage<#=asyncSuffix#><T>(pageSize, query, identifiers, mergeOption, getEntityOption: getEntityOption);
        return await base.LoadPage<#=asyncSuffix#><T>(pageSize, query, identifiers, mergeOption, getEntityOption: getEntityOption);
    }

    public override async Task<object[]> ExecuteQueries<#=asyncSuffix#>(IEnumerable<IAsyncQueryableBase> queries, MergeOption? mergeOption = null, Func<bool> cancel = null, GetEntityAsyncOption getEntityOption = GetEntityAsyncOption.NoTrackingOnly)
    {
        if (mergeOption == null)
            mergeOption = MergeOption;
        if (mergeOption == MergeOption.NoTracking)
            return await new <#=contextName#>NoTracking(ServiceFactory).ExecuteQueries<#=asyncSuffix#>(queries, mergeOption, cancel, getEntityOption: getEntityOption);
        return await base.ExecuteQueries<#=asyncSuffix#>(queries, mergeOption, cancel, getEntityOption: getEntityOption);
    }

    protected override object InstanciateAndAttach(Func<object> getValue, MergeOption? mergeOption)
    {
        var oldMergeOption = MergeOption;
        if (mergeOption.HasValue)
            MergeOption = mergeOption.Value;
        var value = base.InstanciateAndAttach(getValue, mergeOption);
        MergeOption = oldMergeOption;
        return value;
    }

    public IEnumerable<Error> ValidateOnClient()
    {
<#+
foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
{
#>
        foreach (var error in <#=code.Escape(entitySet)#>.SelectMany(e => e.ValidateOnClient()))
            yield return error;
<#+
}
#>
    }

<#+
foreach (var dtoType in dtoTypes)
{
#>
    protected override <#=dtoNamespace#>.<#=dtoType.Name#> GetDTO(<#=dtoNamespace#>.<#=dtoType.Name#> dto<#=attachedParametersWithTypeString#>, MergeOption? mergeOption = null, bool applyDataTransfer = false)
    {
        return GetDTO(dto<#=attachedParametersString#>, false, mergeOption, ObjectState.Unchanged, applyDataTransfer);
    }
    private <#=dtoNamespace#>.<#=dtoType.Name#> GetDTO(<#=dtoNamespace#>.<#=dtoType.Name#> dto, bool applyState, MergeOption? mergeOption = null, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
    {
        return GetDTO(dto<#=attachedParametersInstanciationString#>, applyState, mergeOption, defaultState, applyDataTransfer);
    }
    private <#=dtoNamespace#>.<#=dtoType.Name#> GetDTO(<#=dtoNamespace#>.<#=dtoType.Name#> dto<#=attachedParametersWithTypeString#>, bool applyState, MergeOption? mergeOption = null, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
    {
        if (dto == null)
            return null;
        if (attachedDtos<#=dtoType.Name#>.Contains(dto))
            return dto;
        attachedDtos<#=dtoType.Name#>.Add(dto);
<#+
var dtoTypeLoop = dtoType;
while (dtoTypeLoop != null)
{
    foreach (var property in dtoTypeLoop.GetMembers().OfType<PropertySymbol>())
    {
        if (property.Type.TypeKind != TypeKindArrayType)
        {
            if (property.Type.ContainingNamespace.ToString() == serverEntitiesNamespace && entityTypesName.Contains(property.Type.Name))
            {
#>
        dto.<#=property.Name#> = GetEntity(dto.<#=property.Name#>, applyState, mergeOption, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
<#+
                continue;
            }
            if (dtoTypes.Contains(property.Type))
            {
#>
        GetDTO(dto.<#=property.Name#><#=attachedParametersString#>, applyState, mergeOption, defaultState, applyDataTransfer);
<#+
                continue;
            }
        }
        var dtoEnumerableStringBuilder = new StringBuilder();
        dtoEnumerableStringBuilder.Append("dto.");
        dtoEnumerableStringBuilder.Append(property.Name);
        dtoEnumerableStringBuilder.Append(" = ");
        dtoEnumerableStringBuilder.Append("dto.");
        dtoEnumerableStringBuilder.Append(property.Name);
        if (GetDTOEnumerable(property.Type, dtoTypes, dtoNamespace, entityTypesName, clientEntitiesNamespace, serverEntitiesNamespace, attachedParametersString, dtoEnumerableStringBuilder))
        {
#>
        <#=dtoEnumerableStringBuilder.ToString()#>;
<#+
        }
    }
    dtoTypeLoop = dtoTypeLoop.BaseType;
}
#>
        return dto;
    }

<#+
}
#>
    public void SavingChanges(bool validate)
    {
        SavingChanges();
        if (validate)
        {
            var errors = ValidateOnClient().Where(er => (er.Criticity & Criticity.Error) != 0).ToList();
            if (errors.Count != 0)
                ErrorException.Throw(errors);
        }
    }

    ISerializableContext IClientContext.GetModifiedEntities()
    {
        return GetModifiedEntities();
    }
    
    ISerializableContext IClientContext.GetSerializableContext(ISerializableContext modifiedEntities)
    {
        return GetSerializableContext((<#=edmxName#>SerializableContext)modifiedEntities);
    }

    public <#=edmxName#>SerializableContext GetSerializableContext(<#=edmxName#>SerializableContext modifiedEntities)
    {
        <#=edmxName#>SerializableContext sentContext;
        sentContext = new <#=edmxName#>SerializableContext();
<#+
foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
{
    var entitySetName = code.Escape(entitySet);
    var entityTypeFullName = clientEntitiesNamespace + "." + code.Escape(entitySet.ElementType);
#>		var reduced<#=entitySetName#>Dictionary = new Dictionary<<#=entityTypeFullName#>, <#=entityTypeFullName#>>();
        sentContext.<#=GetPlurial(code, container, entitySet.ElementType)#> = modifiedEntities.<#=entitySet#>.Select(e => 
            {
                var value = ReduceToModifications(e);
                reduced<#=entitySetName#>Dictionary.Add(e, value);
                value.ChangeTracker.ChangeTrackingEnabled = true;
                return value;
            }).ToList();
<#+
}
#> 
<#+
foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
{
    var entitySetName = code.Escape(entitySet);
    var entityType = entitySet.ElementType;
#>		int nb<#=entitySetName#> = sentContext.<#=entitySetName#>.Count;
        for (int index = 0 ; index < nb<#=entitySetName#> ; index ++)
            ReduceNavigationProperties(modifiedEntities.<#=entitySetName#>[index], sentContext.<#=entitySetName#>[index]<#+foreach (var navPropEntitySet in (entityType.NavigationProperties.Where(np => IsPublic(np)).Union(GetSubEntityTypes(itemCollection, entityType).SelectMany(et => et.NavigationProperties.Where(np => IsPublic(np))))).Select(np => GetEntitySet(container, np.ToEndMember.GetEntityType())).Distinct()){#>, reduced<#=code.Escape(navPropEntitySet)#>Dictionary<#+}#>);
<#+
}
#>

        CompleteSavingSentContext(sentContext);
        return sentContext;
    }

    void IClientContext.SavedChanges()
    {
        SavedChanges();
    }

    Task<ISerializableContext> IClientContext.TrySaving<#=asyncSuffix#>(Func<Task<ISerializableContext>> saveChanges<#=asyncSuffix#>)
    {
        return GetSerializableContextTask(TrySaving<#=asyncSuffix#>(() => GetSavingChangesTask(saveChanges<#=asyncSuffix#>)));
    }
    private async Task<<#=edmxName#>SerializableContext> GetSavingChangesTask(Func<Task<ISerializableContext>> saveChanges<#=asyncSuffix#>)
    {
        return (<#=edmxName#>SerializableContext)await saveChanges<#=asyncSuffix#>();
    }
    private async Task<ISerializableContext> GetSerializableContextTask(Task<<#=edmxName#>SerializableContext> task)
    {
        return await task;
    }

    public async Task<<#=edmxName#>SerializableContext> TrySaving<#=asyncSuffix#>(Func<Task<<#=edmxName#>SerializableContext>> saveChanges<#=asyncSuffix#>)
    {
        try
        {
            return await saveChanges<#=asyncSuffix#>();
        }
        catch (FaultException<ErrorCollection> e)
        {
            if (IsDisposed)
                return null;
            ErrorException.Throw(e.Detail.Errors, ErrorSource.FromServer); 
        }
        catch (FaultException<<#=edmxName#>FaultDetailEntities> e)
        {
            if (IsDisposed)
                return null;
            EntitiesGot.Clear();
            SavingException.Throw(e.Detail.Entities.Select(entity => GetEntity(entity, false)), e.Detail.ErrorType, e.Detail.ErrorMessage);
        }
        catch (FaultException<FaultDetail> e)
        {
            if (IsDisposed)
                return null;
            ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage);
        }
        catch(Exception e)
        {
            if (IsDisposed)
                return null;
            bool catched = false;
            CatchException(e, ref catched);
            if (! catched)
                throw e;
        }
        return null;
    }

    public async Task SaveChanges<#=asyncSuffix#>(bool validate = false)
    {
        SavingChanges(validate);
        if (HasChanges)
        {
            var clientContext = GetModifiedEntities();
            var sentContext = GetSerializableContext(clientContext);
            var saveResult = await TrySaving<#=asyncSuffix#>(() => ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginSaveChanges(sentContext, null, null), ar => service.EndSaveChanges(ar)), <#=nbRetryOnTimeout#>));
            Refresh(clientContext, saveResult);
        }
        SavedChanges();
    }

    partial void SavingChanges();
    partial void CompleteSavingSentContext(<#=edmxName#>SerializableContext sentContext);
    partial void SavedChanges();

    void IClientContext.Refresh(ISerializableContext clientContext, ISerializableContext dbContext)
    {
        Refresh((<#=edmxName#>SerializableContext)clientContext, (<#=edmxName#>SerializableContext)dbContext);
    }
    public void Refresh(<#=edmxName#>SerializableContext clientContext, <#=edmxName#>SerializableContext dbContext)
    {
<#+
foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
{
    var countName = string.Concat(code.CamelCase(code.Escape(entitySet)), "Count");
#>
        int <#=countName#> = clientContext.<#=code.Escape(entitySet)#>.Count;
        for (int i = 0 ; i < <#=countName#> ; i ++)
        {
            var clientEntity = clientContext.<#=code.Escape(entitySet)#>[i];
            if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
            {
                <#=GetPlurial(code, container, entitySet.ElementType)#>.Detach(clientEntity);
                continue;
            }
            var dbEntity = dbContext.<#=code.Escape(entitySet)#>[i];
<#+ 
    var inheritedTypes = GetSubEntityTypes(itemCollection, entitySet.ElementType).ToList();
    if (inheritedTypes.Count == 0)
    {
#>
            RefreshComputedValues(clientEntity, dbEntity);
<#+
    }
    else
    {
        bool inheritedTypeFirst = true;
        foreach (EntityType entityType in inheritedTypes)
        {
            if (inheritedTypeFirst)
                inheritedTypeFirst = false;
            else
            {
#>
            {
<#+
                PushIndent(CodeRegion.GetIndent(1));
            }
#>
            var clientEntityAs<#=code.Escape(entityType)#> = clientEntity as <#=clientEntitiesNamespace#>.<#=code.Escape(entityType)#>;
            if (clientEntityAs<#=code.Escape(entityType)#> != null)
            {
                RefreshComputedValues(clientEntityAs<#=code.Escape(entityType)#>, (<#=clientEntitiesNamespace#>.<#=code.Escape(entityType)#>)dbEntity);
            }
            else
<#+
        }
        if (entitySet.ElementType.Abstract)
        {
#>
                throw new NotImplementedException();
<#+
        }
        else
        {
#>
                RefreshComputedValues(clientEntity, dbEntity);
<#+
        }
        for (int bracesIndex = 1 ; bracesIndex < inheritedTypes.Count ; bracesIndex ++)
        {
            PopIndent();
#>
            }
<#+
        }
    }
#>
            clientEntity.ChangeTracker.AcceptChanges();
        }
<#+
}
#>	
    }

    private object GetEntity(object entity, bool applyState, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
    {
        if (entity == null)
            return null;
        object entityGot;
        if (EntitiesGot.TryGetValue(entity, out entityGot))
            return entityGot;
<#+
foreach (var entitySet in edmxElements.EntitySets)
{
    var entityType = entitySet.ElementType;
    if (IsPublic(entityType))
    {
        foreach (var entityTypeLoop in GetSubEntityTypes(edmxElements.ItemCollection, entityType).Where(e => IsPublic(e)))
        {
            string entityTypeLoopName = code.Escape(entityTypeLoop);
#>
        var entityAs<#=entityTypeLoopName#> = entity as <#=clientEntitiesNamespace#>.<#=entityTypeLoopName#>;
        if (entityAs<#=entityTypeLoopName#> != null)
            return GetEntity(entityAs<#=entityTypeLoopName#>, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
<#+
        }
        string entityTypeName = code.Escape(entityType);
#>
        var entityAs<#=entityTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=entityTypeName#>;
        if (entityAs<#=entityTypeName#> != null)
            return GetEntity(entityAs<#=entityTypeName#>, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
<#+
    }
}
#>
        return entity;
    }

    private object GetEntityInCache(object entity, bool applyDataTransfer = false)
    {
<#+
foreach (var entitySet in edmxElements.EntitySets)
{
    var entityType = entitySet.ElementType;
    if (IsPublic(entityType))
    {
        foreach (var entityTypeLoop in GetSubEntityTypes(edmxElements.ItemCollection, entityType).Where(e => IsPublic(e)))
        {
            string entityTypeLoopName = code.Escape(entityTypeLoop);
#>
        var entityAs<#=entityTypeLoopName#> = entity as <#=clientEntitiesNamespace#>.<#=entityTypeLoopName#>;
        if (entityAs<#=entityTypeLoopName#> != null)
            return GetEntityInCache(entityAs<#=entityTypeLoopName#>, applyDataTransfer);
<#+
        }
        string entityTypeName = code.Escape(entityType);
#>
        var entityAs<#=entityTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=entityTypeName#>;
        if (entityAs<#=entityTypeName#> != null)
            return GetEntityInCache(entityAs<#=entityTypeName#>, applyDataTransfer);
<#+
    }
}
#>
        return null;
    }

    private void Detach(object entity)
    {
<#+
foreach (var entitySet in edmxElements.EntitySets)
{
    var entityType = entitySet.ElementType;
    if (IsPublic(entityType))
    {
        string entityTypeName = code.Escape(entityType);
        string entitySetName = code.Escape(entitySet);
#>
        var entityAs<#=entityTypeName#> = entity as <#=clientEntitiesNamespace#>.<#=entityTypeName#>;
        if (entityAs<#=entityTypeName#> != null)
            <#=entitySetName#>.Detach(entityAs<#=entityTypeName#>);
<#+
    }
}
#>
        throw new InvalidOperationException();
    }

    IAsyncQueryable<T> IClientContext.GetClientEntitySetAsyncQueryable<T>(ParameterMode? parameterMode)
    {
        var entitySet = GetClientEntitySet<T>();
        if (parameterMode == null)
            return entitySet.AsAsyncQueryable();
        return entitySet.AsAsyncQueryable(parameterMode.Value);
    }

    public void AcceptChanges()
    {
<#+
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
    {
#>
        foreach (var entity in <#=GetPlurial(code, container, entitySet.ElementType)#>)
            entity.ChangeTracker.AcceptChanges();

<#+
    }
#>
    }

    public bool HasChanges
    {
        get 
        {
<#+
            foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
            {
#>
            if (<#=GetPlurial(code, container, entitySet.ElementType)#>Internal.AllEntities.Any(e => e.HasChanges))
                return true;
<#+
            }
#>
            return false;
        }
    }

<#+
    foreach (var edmType in edmxElements.EdmTypes.Where(e => IsPublic(e)))
    {
        string typeName = edmxElements.Code.Escape(edmType);
#>
    public async Task<Error[]> ValidateOnServer<#=asyncSuffix#>(<#=typeName#> entity)
    {
        try
        {
            return await ProxyHelper.ExecuteFunc<#=asyncSuffix#>(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidate<#=typeName#>(entity, null, null), ar => service.EndValidate<#=typeName#>(ar)), <#=nbRetryOnTimeout#>);
        }
        catch (FaultException<FaultDetail> e)
        {
            throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
        }
        catch(Exception e)
        {
            if (IsDisposed)
                return null;
            bool catched = false;
            CatchException(e, ref catched);
            if (catched)
                return null;
            throw e;
        }
    }

<#+
    }
    PushIndent(CodeRegion.GetIndent(1));
    foreach (var specificationServiceMethod in specificationsElements.AllServiceMethods)
    {
        ISemanticModel semanticModel;
        bool executeOnServer;
        IEnumerable<ParameterSyntax> parameters;
        bool returnEntity, returnEntities, returnDTO, returnDTOs;
        MethodSymbol specificationServiceMethodSymbol;
        foreach (var specificationServiceMethodLoop in GetServiceMethod(specificationsElements, edmxElements, serverFxDALInterfacesNamespace, serverFxServiceInterfacesNamespace, serverEntitiesNamespace, specificationServiceMethod, clientEntitiesNamespace, dtoTypes, dtoNamespace, out semanticModel, out executeOnServer, out parameters, out returnEntity, out returnEntities, out returnDTO, out returnDTOs, out specificationServiceMethodSymbol))
        {
            if (specificationServiceMethodLoop == null)
                continue;
            var specificationServiceMethodValue = specificationServiceMethodLoop;

            if (executeOnServer)
                specificationServiceMethodValue = specificationServiceMethodValue.WithIdentifier(SyntaxFactory.Identifier(specificationServiceMethodValue.Identifier.ValueText + asyncSuffix));
            else
            {
                var methodSB = new StringBuilder();
                if (! specificationServiceMethodSymbol.ReturnsVoid)
                    methodSB.Append("return ");
                if (specificationServiceMethodSymbol.IsExtensionMethod && ! specificationsElements.NonEntitiesExtensionMethods.Contains(specificationServiceMethod))
                {
                    string methodName = specificationServiceMethod.ParameterList.Parameters[0].Identifier.ValueText;
                    methodSB.Append(methodName);
                    methodSB.Append(".");
                    List<MethodDeclarationSyntax> getMethods;
                    if (specificationsElements.GetMethods.TryGetValue(specificationServiceMethodSymbol.Parameters[0].Type.Name, out getMethods) && getMethods.Contains(specificationServiceMethod))
                        methodSB.Append(GetPropertyNameFromMethodName(methodName));
                    else
                    {
                        methodSB.Append(specificationServiceMethodSymbol.Name);
                        methodSB.Append("(");
                        var parametersEnumerator = specificationServiceMethod.ParameterList.Parameters.GetEnumerator();
                        parametersEnumerator.MoveNext();
                        if (parametersEnumerator.MoveNext())
                            for(;;)
                            {
                                methodSB.Append(parametersEnumerator.Current.Identifier.ValueText);
                                if (parametersEnumerator.MoveNext())
                                    methodSB.Append(", ");
                                else
                                    break;
                            }
                        methodSB.Append(")");
                    }
                }
                else
                {
                    methodSB.Append("EntitiesOtherSpecifications.");
                    methodSB.Append(specificationServiceMethodSymbol.Name);
                    methodSB.Append("(");
                    var parametersEnumerator = specificationServiceMethod.ParameterList.Parameters.GetEnumerator();
                    if (parametersEnumerator.MoveNext())
                        for(;;)
                        {
                            methodSB.Append(parametersEnumerator.Current.Identifier.ValueText);
                            if (parametersEnumerator.MoveNext())
                                methodSB.Append(", ");
                            else
                                break;
                        }
                    methodSB.Append(")");
                }
                methodSB.Append(";");
                specificationServiceMethodValue = specificationServiceMethodValue.WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement(methodSB.ToString())));
            }
#>

public <#=executeOnServer ? "async " : ""#><#=specificationServiceMethodValue.NormalizeWhitespace().ToString()#>
<#+
            if (executeOnServer)
            {
#>
{
    try
    {
<#+
                var valueSB = new StringBuilder();
                valueSB.Append("await ProxyHelper.Execute");
                valueSB.Append(specificationServiceMethodSymbol.ReturnsVoid ? "Action" : "Func");
                valueSB.Append(asyncSuffix);
                valueSB.Append("(ServiceFactory, service => Task.Factory.FromAsync(service.Begin");
                valueSB.Append(specificationServiceMethod.Identifier.ValueText);
                valueSB.Append("(");
                foreach (var p in parameters)
                {
                    var pSymbol = specificationServiceMethodSymbol.Parameters.First(ps => ps.Name == p.Identifier.ValueText);
                    valueSB.Append(pSymbol.Name);
                    if (pSymbol.Type.ToString() != "string" && pSymbol.Type.ToString() != "System.String" && pSymbol.Type.AllInterfaces.Any(i => i.ToString() == "System.Collections.IEnumerable"))
                        valueSB.Append(".ToArray()");
                    valueSB.Append(", ");
                }
                valueSB.Append("null, null), ar => service.End");
                valueSB.Append(specificationServiceMethod.Identifier.ValueText);
                valueSB.Append("(ar)), ");
                valueSB.Append(nbRetryOnTimeout);
                valueSB.Append(");");
                if (returnEntity || returnDTO)
                {
#>
        var value = <#=valueSB.ToString()#>
        if (IsDisposed)
            return value;
        if (cancel != null && cancel())
            return null;
        EntitiesGot.Clear();
        Init = true;
        try
        {
            return Get<#=returnEntity ? "Entity" : "DTO"#>(value, true, mergeOption, defaultState: defaultState, applyDataTransfer: true);
        }
        finally
        {
            Init = false;
        }
    }
    catch (FaultException<FaultDetail> e)
    {
        if (IsDisposed)
            return default(<#=((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString()#>);
        throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
    }
<#+
                }
                else if (returnEntities || returnDTOs)
                {
#>
        var values = <#=valueSB.ToString()#>
        if (IsDisposed)
            return values.ToList();
        if (cancel != null && cancel())
            return null;
        EntitiesGot.Clear();
        Init = true;
        try
        {
            return values.Select(value => Get<#=returnEntities ? "Entity" : "DTO"#>(value, true, mergeOption, defaultState: defaultState, applyDataTransfer: true)).ToList();
        }
        finally
        {
            Init = false;
        }
    }
    catch (FaultException<FaultDetail> e)
    {
        if (IsDisposed)
            return default(<#=((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString()#>); 
        throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
    }
<#+
                }
                else
                {
#>
        <#=specificationServiceMethodSymbol.ReturnsVoid ? "" : "return "#><#=valueSB.ToString()#>
    }
    catch (FaultException<FaultDetail> e)
    {
        if (IsDisposed)
            return<#=specificationServiceMethodSymbol.ReturnsVoid ? "" : string.Concat(" default(", ((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString(), ")") #>;
        throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
    }
<#+
                }
#>
    catch(Exception e)
    {
        if (IsDisposed)
            return<#=specificationServiceMethodSymbol.ReturnsVoid ? "" : string.Concat(" default(", ((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString(), ")") #>;
        bool catched = false;
<#+
                if (! specificationServiceMethodSymbol.ReturnsVoid)
                {
#>
        <#=((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString()#> result = default(<#=((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString()#>);
<#+
                }
#>
        <#=specificationServiceMethodValue.Identifier.ValueText#>CatchException(e, ref catched<#=specificationServiceMethodSymbol.ReturnsVoid ? "" : ", ref result"#>);
        if (catched)
            return<#=specificationServiceMethodSymbol.ReturnsVoid? "" : " result"#>;
        CatchException(e, ref catched);
        if (catched)
            return<#=specificationServiceMethodSymbol.ReturnsVoid ? "" : string.Concat(" default(", ((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString(), ")") #>;
        throw e;
    }
}
partial void <#=specificationServiceMethodValue.Identifier.ValueText#>CatchException(Exception e, ref bool catched<#=specificationServiceMethodSymbol.ReturnsVoid ? "" : string.Concat(", ref ", ((GenericNameSyntax)specificationServiceMethodValue.ReturnType).TypeArgumentList.Arguments[0].NormalizeWhitespace().ToString(), " result")#>);
<#+
            }
        }
    }
    PopIndent();
#>

    protected override void Dispose(bool disposing)
    {
        if (IsDisposed)
            return ;
        IsDisposed = true;
        if (disposing)
        {
			EntitiesGot.Clear();
			CustomPropertyDescriptors.Clear();
            ClientEntitySetExtensions.ClearDico(this);
<#+
    foreach (EntityType entityType in entityTypes)
    {
#>
            Dispose<#=code.Escape(entityType)#>();
<#+
    }
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
    {
        string entityTypeName = code.Escape(entitySet.ElementType);
        foreach (var subEntity in GetSubEntityTypes(itemCollection, entityTypeName))
        {
            var subEntitySetName = "_" + code.CamelCase(GetPlurial(code, container, subEntity));
#>
            if (<#=subEntitySetName#> != null) 
                <#=subEntitySetName#>.Dispose();
<#+
        }
            var entitySetName = "_" + code.CamelCase(GetPlurial(code, container, entitySet.ElementType));
#>
            if (<#=entitySetName#> != null) 
                <#=entitySetName#>.Dispose();
<#+
    }
#>
        }
    }

    private class <#=contextName#>NoTracking : <#=contextBaseName#>
    {
        public <#=contextName#>NoTracking(Func<I<#=edmxName#>Service> serviceFactory)
            : base(serviceFactory)
        {
        }
<#+
    foreach (EntityType entityType in entityTypes)
    {
        var entitySet = GetEntitySet(container, entityType);
        if (entitySet == null)
            continue;
        var entityTypeName = code.Escape(entityType);
        var entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
        string entitySetName = code.Escape(entitySet);
        string entitySetEntityTypeName = code.Escape(entitySet.ElementType);
        var fieldClientEntitySetName = string.Concat("_", code.CamelCase(entitySetName));
#>
 
<#+
        if (entitySet.ElementType == entityType)
        {
#>
        private Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>> <#=entitySetName#>
        {
            get { return <#=fieldClientEntitySetName#> ?? (<#=fieldClientEntitySetName#> = new Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>>()); }
        }
        private Dictionary<<#=entityTypeName#>Keys, <#=entityTypeFullName#>> <#=fieldClientEntitySetName#>;
<#+
        }
#>

        protected override <#=entityTypeFullName#> GetEntity(<#=entityTypeFullName#> entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
<#+
            if (utc)
                foreach (var edmProperty in entityType.Properties.Cast<EdmMember>().Except(entityType.KeyMembers).Where(p => p.TypeUsage.ToString() == "Edm.DateTime").OfType<EdmProperty>())
                {
                    if (edmProperty.Nullable)
                    {
#>
            if (entity.<#=code.Escape(edmProperty)#>.HasValue)
<#+	
                    }
#>
                entity.<#=code.Escape(edmProperty)#> = entity.<#=code.Escape(edmProperty)#><#+if (edmProperty.Nullable){#>.Value<#+}#>.ToLocalTime();
<#+
                }
#>

            var key = new <#=entitySetEntityTypeName#>Keys { <#+ InitKeys(code, entityType, "entity"); #> };
            <#=clientEntitiesNamespace#>.<#=entitySetEntityTypeName#> entityInCache;
            if (<#=entitySetName#>.TryGetValue(key, out entityInCache))
                return <#+
                if(entitySet.ElementType != entityType)
                {
#>(<#=entityTypeFullName#>)<#+
                }#>entityInCache;

            <#=entitySetName#>.Add(key, entity);
            entity.ChangeTracker.State = ObjectState.Detached; 
            entity.ChangeTracker.ChangeTrackingEnabled = false;
            return entity;
        } 
<#+
    }
#>

<#+
foreach (var dtoType in dtoTypes)
{
#>
    protected override <#=dtoNamespace#>.<#=dtoType.Name#> GetDTO(<#=dtoNamespace#>.<#=dtoType.Name#> dto<#=attachedParametersWithTypeString#>, MergeOption? mergeOption = null, bool applyDataTransfer = false)
    {
        return dto;
    }

<#+
}
#>
        protected override void Dispose(bool disposing)
        {
            IsDisposed = true;
        }
    }
}
<#+
    WriteFooter(edmxElements.NamespaceName);

    fileManager.StartNewFile(edmxName + "ClientEntitySetExtensions.cs");
    WriteHeader(edmxElements.NamespaceName, code, "System", "System.Collections.Generic", "System.Linq", clientFxClientContextNamespace, clientFxClientContextInterfacesNamespace, clientFxEntitiesTrackingNamespace, clientContextInterfacesNamespace);
#>
public static partial class <#=edmxName#>ClientEntitySetExtensions
{
<#+
    foreach (EntityType entityType in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name).Where(e => IsPublic(e)))
    {
        var entitySet = GetEntitySet(container, entityType);
        if (entitySet == null)
            continue;
        var entityTypeName = code.Escape(entityType);
        var entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
        var entityTypeNamePlurial = GetPlurial(code, container, entityType);
        if (entitySet.ElementType == entityType)
        {
            List<EntityType> subEntityTypes = GetSubEntityTypes(itemCollection, entityType).ToList();
            if (subEntityTypes.Count != 0)
            {
#>
    public static IClientEntitySet<<#=contextName#>, T> OfType<T>(this ClientEntitySet<<#=contextName#>, <#=clientEntitiesNamespace#>.<#=code.Escape(entityType)#>> entitySet)
        where T : <#=clientEntitiesNamespace#>.<#=code.Escape(entityType)#>
    {
        if (typeof(T) == typeof(<#=clientEntitiesNamespace#>.<#=code.Escape(entityType)#>))
            return (IClientEntitySet<<#=contextName#>, T>)entitySet;
<#+
                foreach (EntityType subEntityType in subEntityTypes)
                {
                    string subEntityTypeName = code.Escape(subEntityType);
#>
        if (typeof(T) == typeof(<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>))
            return (IClientEntitySet<<#=contextName#>, T>)entitySet.Context.<#=GetPlurial(code, container, subEntityType)#>;
<#+
                }	
#>		
        throw new NotImplementedException();
    }

<#+
            }
        }
    }
#>
}
<#+
    WriteFooter(edmxElements.NamespaceName);

    fileManager.StartNewFile(edmxName + "ExpressionTransformer.cs");
    WriteHeader(edmxElements.NamespaceName, code, "System", "System.Collections", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", clientFxClientContextInterfacesNamespace + ".ExpressionSerialization");
#>
public class <#=edmxName#>ExpressionTransformer : IExpressionTransformer
{
    public Expression TransformExpression(Expression expression)
    {
        var methodCallExpression = expression as MethodCallExpression;
        MethodInfo method;
        if (methodCallExpression != null && (method = methodCallExpression.Method).Name == "Contains" && (method.DeclaringType == typeof(Enumerable) || typeof(IEnumerable).IsAssignableFrom(method.DeclaringType)))
        {
            int argIndex = 0;
            MemberExpression memberExpression;
            if (methodCallExpression.Object == null)
                memberExpression = methodCallExpression.Arguments[argIndex++] as MemberExpression;
            else
                memberExpression = methodCallExpression.Object as MemberExpression;
            if (memberExpression != null && memberExpression.Expression is ConstantExpression)
            {
<#+
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>().Where(es => IsPublic(es.ElementType)))
    {
        var entityType = (EntityType)entitySet.ElementType;
        foreach (EntityType subEntityType in GetSubEntityTypes(itemCollection, entityType))
        {
            TransformContains(clientEntitiesNamespace, code, subEntityType);
        }
        TransformContains(clientEntitiesNamespace, code, entityType);
    }
#>
            }
            else
            {
                var methodArg = methodCallExpression.Arguments[argIndex] as MemberExpression;
                if (methodArg != null && methodArg.Expression is ConstantExpression)
                {
<#+
                    foreach (var entityType in entityTypes)
                    {
                        string entityTypeName = code.Escape(entityType);
#>
                    if (methodArg.Type == typeof(<#=entityTypeName#>))
                    {
                        var entity = Expression.Lambda<Func<<#=entityTypeName#>>>(methodArg).Compile()();
                        var exp = (Expression<Func<<#=entityTypeName#>, bool>>)(e => <#+TestKeys(code, entityType, "e", "entity");#>);
                        return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(<#=entityTypeName#>)), memberExpression, exp);
                    }
<#+
                    }
#>
                }
            }
        }
        else
        {
            var binaryExpression = expression as BinaryExpression;
            MemberExpression leftMemberExpression, rightMemberExpression;
<#+
                    foreach (var entityType in entityTypes)
                    {
                        string entityTypeName = code.Escape(entityType);
#>
            if (binaryExpression != null && (binaryExpression.NodeType == ExpressionType.Equal || binaryExpression.NodeType == ExpressionType.NotEqual) && binaryExpression.Left.Type == typeof(<#=entityTypeName#>) && ((leftMemberExpression = binaryExpression.Left as MemberExpression) != null && leftMemberExpression.Expression is ConstantExpression || (rightMemberExpression = binaryExpression.Right as MemberExpression) != null && rightMemberExpression.Expression is ConstantExpression))
            {
                PropertyInfo propertyInfo;
<#+
                        string value = null;
                        foreach (var km in entityType.KeyMembers)
                        {
                            var subValue = string.Format("Expression.MakeBinary(binaryExpression.NodeType, Expression.MakeMemberAccess(binaryExpression.Left, propertyInfo = typeof({0}).GetProperty(\"{1}\")), Expression.MakeMemberAccess(binaryExpression.Right, propertyInfo))", entityTypeName, code.Escape(km));
                            if (value == null)
                                value = subValue;
                            else
                                value = string.Concat("Expression.MakeBinary(ExpressionType.OrElse, ", subValue, ", " , value, ")");
                        }
#>
                return <#=value#>;
            }
<#+
                }
#>
        }
        return expression;
    }
}
<#+
    WriteFooter(edmxElements.NamespaceName + ".Fault");

    fileManager.StartNewFile(edmxName + "AsyncQueryableExtension.cs");
    var asyncQueryableExtensionUsings = new List<string>() {"System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", clientFxClientContextNamespace, clientFxClientContextInterfacesNamespace, clientEntitiesNamespace, dtoTypes.Any() ? clientEntitiesNamespace + ".DTO" : null, clientContextInterfacesNamespace, keysTypes.Count == 0 ? null : edmxElements.NamespaceName + ".Query.Include"};
    foreach (var getMethod in specificationsElements.GetMethods.Values.SelectMany(m => m))
    {
        var semanticModel = specificationsElements.SemanticModelPerMethods[getMethod];
        asyncQueryableExtensionUsings.AddRange(new GetQueryableExtensionUsings(specificationsElements, semanticModel, dtoTypes, namespacesReplacement).Visit(getMethod.ReturnType));
    }
    WriteHeader(edmxElements.NamespaceName, code, asyncQueryableExtensionUsings.ToArray());
#>
public static partial class <#=edmxName#>AsyncQueryableExtension
{
<#+
foreach (EntityType entityType in entityTypes)
{
    string entityTypeName = code.Escape(entityType);
    string entityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, entityTypeName);
    List<MethodDeclarationSyntax> methods;
    var subEntityTypes = GetSubEntityTypes(itemCollection, entityType).ToList();
    if (specificationsElements.GetMethods.TryGetValue(entityTypeName, out methods))
    {
        foreach (var method in methods.Where(m => ! specificationsElements.OverrideMethods.Contains(m)))
        {
            string propertyName = GetPropertyNameFromMethodName(method.Identifier.ValueText.Trim());

            var semanticModel = specificationsElements.SemanticModelPerMethods[method];
            var returnType = (TypeSyntax)new DTOAndInterfacesTypesRewriter(semanticModel, specificationsElements, dtoTypes, namespacesReplacement).Visit(method.ReturnType);

            foreach (var subEntityType in subEntityTypes)
            {
                string subEntityTypeName = code.Escape(subEntityType);
                string subEntityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, subEntityTypeName);
#>
    public static IAsyncQueryable<<#=subEntityTypeFullName#>> With<#=propertyName#>(this IAsyncQueryable<<#=subEntityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryable<<#=subEntityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=propertyName#>"}), source.SelectedProperties);
    }	

    public static IAsyncQueryableValue<<#=subEntityTypeFullName#>> With<#=propertyName#>(this IAsyncQueryableValue<<#=subEntityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryableValue<<#=subEntityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=propertyName#>"}), source.SelectedProperties);
    }	

    [IncludeMethod]
    public static IEnumerable<<#=subEntityTypeFullName#>> With<#=propertyName#>(this IEnumerable<<#=subEntityTypeFullName#>> source)
    {
        throw new NotImplementedException();
    }	

    [IncludeMethod]
    public static <#=subEntityTypeFullName#> With<#=propertyName#>(this <#=subEntityTypeFullName#> source)
    {
        throw new NotImplementedException();
    }	

    public static async Task<<#=returnType#>> Load<#=propertyName#><#=asyncSuffix#>(this <#=subEntityTypeFullName#> entity, MergeOption? mergeOption = null)
    {
<#+
                List<MethodDeclarationSyntax> subEntitySpecificationGetMethods;
                string specificationsClassName = subEntityTypeName;
                var subTypeLoopEntity = subEntityType;
                while (! (specificationsElements.GetMethods.TryGetValue(specificationsClassName, out subEntitySpecificationGetMethods) && subEntitySpecificationGetMethods.Any(m =>  ! specificationsElements.OverrideMethods.Contains(m))))
                {
                    subTypeLoopEntity = (EntityType)subTypeLoopEntity.BaseType;
                    specificationsClassName = code.Escape(subTypeLoopEntity);
                }

                foreach (var subSubEntityType in GetSubEntityTypes(itemCollection, subEntityType))
                {
                string subSubEntityName = code.Escape(subSubEntityType);
#>
        var entityAs<#=subSubEntityName#> = entity as <#=clientEntitiesNamespace#>.<#=subSubEntityName#>;
        if (entityAs<#=subSubEntityName#> != null)
            return await Load<#=propertyName#><#=asyncSuffix#>(entityAs<#=subSubEntityName#>);
<#+
                }
#>
        var entitySet = (IClientEntitySet<I<#=edmxName#>ClientContext, <#=subEntityTypeFullName#>>)ClientEntitySetExtensions.GetClientEntitySet(entity);
        if (entitySet == null)
            throw new InvalidOperationException("Load method only works with tracking entities");
        var value = await entitySet.AsAsyncQueryable().Where(e => <#+TestKeys(code, entityType, "e", "entity");#>).Select(e => e.<#=propertyName#>).First().Execute<#=asyncSuffix#>(mergeOption);
        if (entity.Specifications == null)
            entity.Specifications = new <#=clientEntitiesNamespace#>.<#=specificationsClassName#>.<#=specificationsClassName#>Specifications();
        entity.Specifications.Has<#=propertyName#> = true;
        entity.Specifications.<#=propertyName#> = value;
        return value;
    }	
<#+
            }
#>
    public static IAsyncQueryable<<#=entityTypeFullName#>> With<#=propertyName#>(this IAsyncQueryable<<#=entityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryable<<#=entityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=propertyName#>"}), source.SelectedProperties);
    }	

    public static IAsyncQueryableValue<<#=entityTypeFullName#>> With<#=propertyName#>(this IAsyncQueryableValue<<#=entityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryableValue<<#=entityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=propertyName#>"}), source.SelectedProperties);
    }	

    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> With<#=propertyName#>(this IEnumerable<<#=entityTypeFullName#>> source)
    {
        throw new NotImplementedException();
    }	

    [IncludeMethod]
    public static <#=entityTypeFullName#> With<#=propertyName#>(this <#=entityTypeFullName#> source)
    {
        throw new NotImplementedException();
    }	

    public static async Task<<#=returnType#>> Load<#=propertyName#><#=asyncSuffix#>(this <#=entityTypeFullName#> entity, MergeOption? mergeOption = null)
    {
<#+
            foreach (var subEntityType in subEntityTypes)
            {
                string subEntityName = code.Escape(subEntityType);
#>
        var entityAs<#=subEntityName#> = entity as <#=clientEntitiesNamespace#>.<#=subEntityName#>;
        if (entityAs<#=subEntityName#> != null)
            return await Load<#=propertyName#><#=asyncSuffix#>(entityAs<#=subEntityName#>);
<#+
            }
#>
        var entitySet = (IClientEntitySet<I<#=edmxName#>ClientContext, <#=entityTypeFullName#>>)ClientEntitySetExtensions.GetClientEntitySet(entity);
        if (entitySet == null)
            throw new InvalidOperationException("Load method only works with tracking entities");
        var value = await entitySet.AsAsyncQueryable().Where(e => <#+TestKeys(code, entityType, "e", "entity");#>).Select(e => e.<#=propertyName#>).First().Execute<#=asyncSuffix#>(mergeOption);
        if (entity.Specifications == null)
            entity.Specifications = new <#=entityTypeFullName#>.<#=entityTypeName#>Specifications();
        entity.Specifications.Has<#=propertyName#> = true;
        entity.Specifications.<#=propertyName#> = value;
        return value;
    }	

<#+
        }
    }

    foreach (var subEntityType in subEntityTypes)
    {
        string subEntityTypeName = code.Escape(subEntityType);
        List<MethodDeclarationSyntax> subEntityTypeGetMethods;
        if (specificationsElements.GetMethods.TryGetValue(subEntityTypeName, out subEntityTypeGetMethods))
        {
            foreach (var method in subEntityTypeGetMethods)
            {
                string propertyName = GetPropertyNameFromMethodName(method.Identifier.ValueText.Trim());
#>
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName #>With<#=propertyName#>(this IAsyncQueryable<<#=entityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryable<<#=entityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=subEntityTypeName #>_<#=propertyName#>"}), source.SelectedProperties);
    }	

    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName #>With<#=propertyName#>(this IAsyncQueryableValue<<#=entityTypeFullName#>> source)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.CreateAsyncQueryableValue<<#=entityTypeFullName#>>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"<#=subEntityTypeName #>_<#=propertyName#>"}), source.SelectedProperties);
    }	

    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName #>With<#=propertyName#>(this IEnumerable<<#=entityTypeFullName#>> source)
    {
        throw new NotImplementedException();
    }	

    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName #>With<#=propertyName#>(this <#=entityTypeFullName#> source)
    {
        throw new NotImplementedException();
    }	

<#+
            }
        }
    }

    foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np)))
        GenerateIncludeNavigationProperty(code, container, clientFxClientContextNamespace, clientEntitiesNamespace, contextName, entityType, entityTypeFullName, entityTypeName, navigationProperty);

    foreach (var subEntityType in subEntityTypes)
    {
        string subEntityTypeName = code.Escape(subEntityType);
        foreach (var navigationProperty in subEntityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np) && np.DeclaringType == subEntityType))
            GenerateIncludeNavigationProperty(code, container, clientFxClientContextNamespace, clientEntitiesNamespace, contextName, entityType, entityTypeFullName, entityTypeName, navigationProperty, subEntityType, subEntityTypeName, string.Concat(clientEntitiesNamespace, ".", subEntityTypeName));
    }
}
foreach (var getMethodsPerClass in specificationsElements.GetMethods)
{
    var entityType = edmxElements.EntityTypes.FirstOrDefault(et => code.Escape(et.Name) == getMethodsPerClass.Key);
    List<EntityType> subEntityTypes;
    if (entityType != null)
        subEntityTypes = GetSubEntityTypes(edmxElements.ItemCollection, entityType).Reverse().ToList();
    else
        subEntityTypes = new List<EntityType>();
    foreach (var getMethod in getMethodsPerClass.Value)
    {
        var propertyName = GetPropertyNameFromMethod(getMethod);
        GenerateIncludeFor(getMethodsPerClass.Key, propertyName, getMethod, specificationsElements, entityTypes, code, serverEntitiesNamespace, clientEntitiesNamespace);
        var excludedSubEntityTypes = new List<EntityType>();
        foreach (var subEntityType in subEntityTypes)
        {
            string subEntityTypeName = code.Escape(subEntityType.Name);
            if (excludedSubEntityTypes.Contains(subEntityType) || excludedSubEntityTypes.Contains(subEntityType.BaseType))
            {
                excludedSubEntityTypes.Add(subEntityType);
                continue;
            }
            List<MethodDeclarationSyntax> subMethods;
            if (specificationsElements.GetMethods.TryGetValue(subEntityTypeName, out subMethods) &&
                subMethods.Any(m => m.Identifier.ValueText == getMethod.Identifier.ValueText))
            {
                excludedSubEntityTypes.Add(subEntityType);
                continue;
            }
            GenerateIncludeFor(subEntityTypeName, propertyName, getMethod, specificationsElements, entityTypes, code, serverEntitiesNamespace, clientEntitiesNamespace);
        }
    }
}
string className = null;
foreach (var method in specificationsElements.ServiceMethods.Union(specificationsElements.SubMethods).Where(m =>
    {
        var methodSymbol = specificationsElements.MethodSymbolPerMethods[m];
        if (methodSymbol.Parameters.OfType<ParameterSymbol>().Count() == 1 && methodSymbol.IsExtensionMethod && (entityTypes.Any(et => et.Name == methodSymbol.Parameters[0].Type.Name) || edmxElements.ComplexTypes.Any(ct => ct.Name == methodSymbol.Parameters[0].Type.Name)) && specificationsElements.IsApplicableOnClient(m))
        {
            className = methodSymbol.Parameters[0].Type.Name;
            return true;
        }
        return false;
    }))
{
        GenerateIncludeFor(className, method.Identifier.ValueText, method, specificationsElements, entityTypes, code, serverEntitiesNamespace, clientEntitiesNamespace);
        var entityType = edmxElements.EntityTypes.FirstOrDefault(et => code.Escape(et) == className);
        if (entityType != null)
        {
            var excludedSubEntityTypes = new List<EntityType>();
            foreach (var subEntityType in GetSubEntityTypes(edmxElements.ItemCollection, entityType).Reverse())
            {
                string subEntityTypeName = code.Escape(subEntityType);
                if (excludedSubEntityTypes.Contains(subEntityType) || excludedSubEntityTypes.Contains(subEntityType.BaseType))
                {
                    excludedSubEntityTypes.Add(subEntityType);
                    continue;
                }
                if (specificationsElements.ServiceMethods.Union(specificationsElements.SubMethods).Any(m =>
                    {
                        var methodSymbol = specificationsElements.MethodSymbolPerMethods[m];
                        return methodSymbol.Parameters.OfType<ParameterSymbol>().Count() == 1 && methodSymbol.IsExtensionMethod &&
                                (edmxElements.EntityTypes.Any(et => et.Name == methodSymbol.Parameters[0].Type.Name) ||
                                edmxElements.ComplexTypes.Any(ct => ct.Name == methodSymbol.Parameters[0].Type.Name)) &&
                                specificationsElements.IsApplicableOnClient(m) &&
                                methodSymbol.Parameters[0].Type.Name == subEntityTypeName;
                    }))
                {
                    excludedSubEntityTypes.Add(subEntityType);
                    continue;
                }
                GenerateIncludeFor(subEntityTypeName, method.Identifier.ValueText, method, specificationsElements, entityTypes, code, serverEntitiesNamespace, clientEntitiesNamespace);
            }
        }
}

foreach (var entityType in entityTypes)
{
    var entityTypeName = code.Escape(entityType);
    var entitySet = GetEntitySet(container, entityType);
    var entitySetName = code.Escape(entitySet);
    foreach (var np in entityType.NavigationProperties.Where(np => np.DeclaringType == entityType))
    {
        string npName = code.Escape(np);
        var npToTypeFullName = string.Concat(clientEntitiesNamespace, ".", code.Escape(np.ToEndMember.GetEntityType()));
        if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            npToTypeFullName = string.Concat("IEnumerable<", npToTypeFullName, ">");
        var toEntityType = np.ToEndMember.GetEntityType();
        var toEntityTypeName = code.Escape(toEntityType);
        var toEntitySet = GetEntitySet(container, toEntityType);
        var toEntitySetName = code.Escape(toEntitySet);
#>
    public static async Task<<#=npToTypeFullName#>> Load<#=npName#><#=asyncSuffix#>(this <#=entityTypeName#> entity, MergeOption? mergeOption = null)
    {
        var entitySet = ClientEntitySetExtensions.GetClientEntitySet(entity);
        if (mergeOption == MergeOption.NoTracking || entitySet == null)
            throw new InvalidOperationException("Load method only works with tracking entities");
        var value = await ((I<#=contextName#>)entitySet.Context).<#=toEntitySetName#>.AsAsyncQueryable()<#=toEntityType == toEntitySet.ElementType ? "" : string.Concat(".OfType<", clientEntitiesNamespace, ".", toEntityTypeName, ">()")#>.Where(e => <#+
        if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>e.<#=code.Escape(GetOtherNavigationProperty(np))#>.Any(e2 => <#+TestKeys(code, entityType, "entity", "e2");#>)<#+
        }
        else
            TestNavigationKeys(code, np, "entity", "e");
#>)<#=np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? "" : ".FirstOrDefault()"#>.Execute<#=asyncSuffix#>(mergeOption);
<#+
        if (np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        foreach (var subEntity in value)
            entity.<#=npName#>.Attach(subEntity);
<#+
        }
#>
        return value;
    }
<#+
    }
}
#>
}
<#+
    WriteFooter(edmxElements.NamespaceName);

    string queryResultNamespace = edmxElements.NamespaceName + ".QueryResult";
    
    fileManager.StartNewFile(edmxName + "QueryResult.cs");
    WriteHeader(queryResultNamespace, code, "System", "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryResult")]
[KnownType(typeof(int))]
[KnownType(typeof(uint))]
[KnownType(typeof(short))]
[KnownType(typeof(ushort))]
[KnownType(typeof(byte))]
[KnownType(typeof(long))]
[KnownType(typeof(ulong))]
[KnownType(typeof(decimal))]
[KnownType(typeof(double))]
[KnownType(typeof(char))]
[KnownType(typeof(DateTime))]
[KnownType(typeof(DateTimeOffset))]
[KnownType(typeof(TimeSpan))]
[KnownType(typeof(int?))]
[KnownType(typeof(uint?))]
[KnownType(typeof(short?))]
[KnownType(typeof(ushort?))]
[KnownType(typeof(byte?))]
[KnownType(typeof(long?))]
[KnownType(typeof(ulong?))]
[KnownType(typeof(decimal?))]
[KnownType(typeof(double?))]
[KnownType(typeof(char?))]
[KnownType(typeof(DateTime?))]
[KnownType(typeof(DateTimeOffset?))]
[KnownType(typeof(TimeSpan?))]
[KnownType(typeof(string))]
[KnownType(typeof(int[]))]
[KnownType(typeof(uint[]))]
[KnownType(typeof(short[]))]
[KnownType(typeof(ushort[]))]
[KnownType(typeof(byte[]))]
[KnownType(typeof(long[]))]
[KnownType(typeof(ulong[]))]
[KnownType(typeof(decimal[]))]
[KnownType(typeof(double[]))]
[KnownType(typeof(char[]))]
[KnownType(typeof(DateTime[]))]
[KnownType(typeof(DateTimeOffset[]))]
[KnownType(typeof(TimeSpan[]))]
[KnownType(typeof(int?[]))]
[KnownType(typeof(uint?[]))]
[KnownType(typeof(short?[]))]
[KnownType(typeof(ushort?[]))]
[KnownType(typeof(byte?[]))]
[KnownType(typeof(long?[]))]
[KnownType(typeof(ulong?[]))]
[KnownType(typeof(decimal?[]))]
[KnownType(typeof(double?[]))]
[KnownType(typeof(char?[]))]
[KnownType(typeof(DateTime?[]))]
[KnownType(typeof(DateTimeOffset?[]))]
[KnownType(typeof(TimeSpan?[]))]
[KnownType(typeof(string[]))]
<#+
    foreach (var type in GetAllTypes(itemCollection).OrderBy(e => e.Name).Where(e => IsPublic(e)))
    {
#>
[KnownType(typeof(<#=clientEntitiesNamespace#>.<#=code.Escape(type)#>))]
[KnownType(typeof(<#=clientEntitiesNamespace#>.<#=code.Escape(type)#>[]))]
<#+
    }
    foreach (var type in dtoTypes)
    {
#>
[KnownType(typeof(<#=dtoNamespace#>.<#=type.Name#>))]
[KnownType(typeof(<#=dtoNamespace#>.<#=type.Name#>[]))]
<#+
    }
    foreach (var includeKeysType in keysTypes)
    {
#>
[KnownType(typeof(<#=edmxElements.NamespaceName#>.Query.Include.<#=includeKeysType#>))]
[KnownType(typeof(<#=edmxElements.NamespaceName#>.Query.Include.<#=includeKeysType#>[]))]
<#+
    }
#>
public partial class <#=edmxName#>QueryResult : <#=clientFxClientContextNamespace#>.QueryResult.QueryResult
{
    [DataMember]
    public object Values { get; set; }

    [DataMember]
    public object Value { get; set; }
}
<#+
    WriteFooter(queryResultNamespace);
    
    fileManager.StartNewFile(edmxName + "QueriesResult.cs");
    WriteHeader(queryResultNamespace, code, "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryResult")]
public class <#=edmxName#>QueriesResult
{
    [DataMember]
    public <#=edmxName#>QueryResult[] QueryResults { get; set; }
}
<#+
    WriteFooter(queryResultNamespace);
    
    fileManager.StartNewFile(edmxName + "QueryResultPage.cs");
    WriteHeader(queryResultNamespace, code, "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryResult")]
public partial class <#=edmxName#>QueryResultPage
{
    [DataMember]
    public int PageIndex { get; set; }

    [DataMember]
    public <#=edmxName#>QueryResult Result { get; set; }
}
<#+
    WriteFooter(queryResultNamespace);

    fileManager.StartNewFile(edmxName + "FaultDetailEntities.cs");
    WriteHeader(edmxElements.NamespaceName + ".Fault", code, "System", "System.Collections.Generic", "System.Runtime.Serialization", "System.ServiceModel", clientFxClientContextNamespace + ".Fault");
#>
[DataContract(Namespace = "http://<#=edmxName#>/Fault")]
[KnownType("GetKnownTypes")]
public partial class <#=edmxName#>FaultDetailEntities : FaultDetail
{
    [DataMember]
    public object[] Entities { get; set; }

    public static IEnumerable<Type> GetKnownTypes()
    {
        var value = new List<Type>();
<#+
    foreach (EntityType entity in edmxElements.EntityTypes.OrderBy(e => e.Name).Where(e => GetEntitySet(container, e) != null && IsPublic(e)))
    {
#>
        value.Add(typeof(<#=clientEntitiesNamespace#>.<#=code.Escape(entity)#>));
<#+
    }
#>
        AddKnownTypes(value);
        return value;
    }
    static partial void AddKnownTypes(List<Type> types);
}
<#+
    WriteFooter(edmxElements.NamespaceName + ".Fault");

    fileManager.StartNewFile("Keys.tt");
    string beginTag = "<" + "#";
    string endTag = "#" + ">";
    var edmxUtilityTTIncludeNameValue = edmxUtilityTTIncludeName;
    if (! string.IsNullOrEmpty(relativePath))
        edmxUtilityTTIncludeNameValue = Regex.Replace(edmxUtilityTTIncludeName, @"^((.?)*)\.ttinclude$", m => string.Concat(relativePath, m.Groups[1].Value, ".merge.ttinclude"));
#>
<#="<" + "#@"#> template language="C#" hostspecific="true"<#=endTag#>
<#="<" + "#@"#> include file="<#=edmxUtilityTTIncludeNameValue#>"<#=endTag#>
<#="<" + "#@"#> output extension=".txt"<#=endTag#>
<#=beginTag#>var fileManager = EntityFrameworkTemplateFileManager.Create(this);<#=endTag#>
<#+
    foreach (var entitySet in edmxElements.EntitySets)
    {
        var entityType = entitySet.ElementType;
        string entityTypeName = code.Escape(entityType);
#>
<#=beginTag#>fileManager.StartNewFile("<#=entityTypeName#>Keys.cs");<#=endTag#>
<#+
        WriteHeader(edmxElements.NamespaceName, code, "System");
#>
internal struct <#=entityTypeName#>Keys
{
<#+
        foreach (var km in entityType.KeyMembers)
        {
#>
    public <#=code.Escape(km.TypeUsage)#> <#=code.Escape(km)#> { get; set; }
<#+
        }
#>
}
<#+
        WriteFooter(edmxElements.NamespaceName);
    }
#>
<#=beginTag#>fileManager.Process();<#=endTag#>
<#+

    fileManager.Process();
}
#>








<#+
void WriteAttachGraph(CodeGenerationTools code, EntityType entityType, string entityTypeFullName, string entityVarName, string entitySetName, string collectionName)
{
#>
            <#=entityTypeFullName#> entityInContext;
            if (GetEntityInCache(<#=entityVarName#>) == null)
            {
<#+
var keyMembersLoopEnumerator = entityType.KeyMembers.GetEnumerator(); 
bool hasMoreKeyMemberLoop = keyMembersLoopEnumerator.MoveNext();
#>
                entityInContext = new <#=entityTypeFullName#> { <#+
while (hasMoreKeyMemberLoop)
{
#><#=code.Escape(keyMembersLoopEnumerator.Current)#> = entityLoop.<#=code.Escape(keyMembersLoopEnumerator.Current)#><#+
if (hasMoreKeyMemberLoop = keyMembersLoopEnumerator.MoveNext())
{
#>, <#+
}
}
#> };
                RefreshCurrentValues(entityInContext, <#=entityVarName#>);
                <#=entitySetName#>.Attach(entityInContext);
                entityInContext.ChangeTracker.ChangeTrackingEnabled = true;
<#+
EnableComplexPropertyChangeTracking(code, entityType, "				entityInContext");
#>
            }
            else
                entityInContext = GetEntity(<#=entityVarName#>);
            if (entityInContext != null)
                <#=collectionName#>.Add(<#=entityVarName#>, entityInContext);
<#+
}

void EnableComplexPropertyChangeTracking(CodeGenerationTools code, EdmType edmType, string prefix)
{
    IEnumerable<EdmProperty> properties;
    EntityType entityType = edmType as EntityType;
    if (entityType != null)
        properties = entityType.Properties;
    else
    {
        ComplexType complexType = edmType as ComplexType;
        if (complexType != null)
            properties = complexType.Properties;
        else
            throw new NotImplementedException();
    }
    foreach(EdmProperty complexProperty in properties.Where(p => p.TypeUsage.EdmType is ComplexType))
    {
        string propertyName = code.Escape(complexProperty);
#>
<#=prefix#>.<#=propertyName#>.ChangeTracker.ChangeTrackingEnabled = true;
<#+
        EnableComplexPropertyChangeTracking(code, complexProperty.TypeUsage.EdmType, prefix + "." + propertyName);
    }
}





void WriteAttachGraphRelationships(CodeGenerationTools code, EntityContainer container, EdmItemCollection itemCollection, EntityType entityType, string clientEntitiesNamespace, string entityTypeFullName, string collectionName, string clientFxEntitiesNamespace)
{
#>
            foreach (var entityLoop in <#=collectionName#>)
            {
                <#=entityTypeFullName#> entity = entityLoop.Value;
                entity.IsInitializingRelationships = true;
<#+
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np)))
        {
            var navigationPropertyName = code.Escape(navigationProperty);
            var subEntityType = navigationProperty.ToEndMember.GetEntityType();
            var subEntityTypeName = code.Escape(subEntityType);
            var subEntityTypeInheritedTypes = GetSubEntityTypes(itemCollection, subEntityType).ToList();
            if(navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
            {
#>
                foreach (var subEntity in entityLoop.Key.<#=navigationPropertyName#>.Select(value => 
                    {
<#+
                foreach (var subEntityTypeInheritedType in subEntityTypeInheritedTypes)
                {
                    var subEntityTypeInheritedTypeName = code.Escape(subEntityTypeInheritedType);
                    var valueAs = "valueAs" + subEntityTypeInheritedTypeName;
                    var resultAs = "resultAs" + subEntityTypeInheritedTypeName;
                    var subCollectionName = code.CamelCase(GetPlurial(code, container, subEntityTypeInheritedType));
#>
                        <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#> <#=valueAs#> = value as <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#>;
                        if (<#=valueAs#> != null)
                        {
                            <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#> <#=resultAs#>;
                            if (<#=subCollectionName#>.TryGetValue(<#=valueAs#>, out <#=resultAs#>))
                                return (<#=clientEntitiesNamespace#>.<#=subEntityTypeName#>)<#=resultAs#>;
                        }
                        else
                        {
<#+					
                    PushIndent(CodeRegion.GetIndent(1));
                }
                if (subEntityType.Abstract)
                {
#>
                        throw new NotImplementedException();
<#+
                }
                else
                {
#>
                        <#=clientEntitiesNamespace#>.<#=subEntityTypeName#> result;
                        if (<#=code.CamelCase(GetPlurial(code, container, subEntityType))#>.TryGetValue(value, out result))
                            return result;
<#+
                }
                foreach (var subEntityTypeInheritedType in subEntityTypeInheritedTypes)
                {
                    PopIndent();
#>
                        }
<#+
                }
#>
                        return null;
                    }).Where(e => 
                    {
                        ObjectList subEntities;
                        object entityTmp;
                        return !(e == null || entity.<#=navigationPropertyName#>.Contains(e) || entity.ChangeTracker.ObjectsRemovedFromCollectionProperties.TryGetValue("<#=navigationPropertyName#>", out subEntities) && subEntities.Contains(e)<#+
                NavigationProperty otherNavigationProperty = GetOtherNavigationProperty(navigationProperty);
                if (otherNavigationProperty != null)
                {
#> || e.ChangeTracker.OriginalValues.TryGetValue("<#=code.Escape(otherNavigationProperty)#>", out entityTmp) && entityTmp == entity<#+
                }
#>);
                    }))
                entity.<#=navigationPropertyName#>.Attach(subEntity, true);
<#+
            }
            else
            {
#>
                if (entityLoop.Key.<#=navigationPropertyName#> != null)
                {
                    <#=clientEntitiesNamespace#>.<#=subEntityTypeName#> parentEntity = null;
<#+
                foreach (var subEntityTypeInheritedType in subEntityTypeInheritedTypes)
                {
                    var subEntityTypeInheritedTypeName = code.Escape(subEntityTypeInheritedType);
                    var valueAs = "valueAs" + subEntityTypeInheritedTypeName;
                    var resultAs = "resultAs" + subEntityTypeInheritedTypeName;
                    var subCollectionName = code.CamelCase(GetPlurial(code, container, subEntityTypeInheritedType));
#>
                    <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#> <#=valueAs#> = entityLoop.Key.<#=navigationPropertyName#> as <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#>;
                    if (<#=valueAs#> != null)
                    {
                        <#=clientEntitiesNamespace#>.<#=subEntityTypeInheritedTypeName#> <#=resultAs#>;
                        if (<#=subCollectionName#>.TryGetValue(<#=valueAs#>, out <#=resultAs#>))
                            parentEntity = <#=resultAs#>;
                    }
                    else
                    {
<#+					
                    PushIndent(CodeRegion.GetIndent(1));
                }
                if (subEntityType.Abstract)
                {
#>
                    throw new NotImplementedException();
<#+
                }
                else
                {
#>
                    <#=clientEntitiesNamespace#>.<#=subEntityTypeName#> result;
                    if (<#=code.CamelCase(GetPlurial(code, container, subEntityType))#>.TryGetValue(entityLoop.Key.<#=navigationPropertyName#>, out result))
                        parentEntity = result;
<#+
                }
                foreach (var subEntityTypeInheritedType in subEntityTypeInheritedTypes)
                {
                    PopIndent();
#>
                    }
<#+
                }
#>
                    object removedParentEntity;
                    if (parentEntity != null && ! (entity.ChangeTracker.OriginalValues.TryGetValue("<#=navigationPropertyName#>", out removedParentEntity) && removedParentEntity == parentEntity))
                        entity.<#=navigationPropertyName#> = parentEntity;
                }
<#+
            }
#>
 
<#+
        }
#>
                entity.IsInitializingRelationships = false;
            }
<#+
}

void TransformContains(string clientEntitiesNamespace, CodeGenerationTools code, EntityType entityType)
{
    string entityTypeName = code.Escape(entityType);
    var entityKeys = entityType.KeyMembers;
    if (entityKeys.Count == 1)
    {
#>
                if (typeof(IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>).IsAssignableFrom(memberExpression.Type))
                {
                    var entitiesKeys = Expression.Lambda<Func<IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>>>(memberExpression).Compile()().Select(e => e.<#=code.Escape(entityKeys[0])#>);
                    var exp = (Expression<Func<IEnumerable<<#=code.Escape(entityKeys[0].TypeUsage)#>>>>)(() => entitiesKeys);
                    return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(<#=code.Escape(entityKeys[0].TypeUsage)#>)), exp.Body, Expression.MakeMemberAccess(methodCallExpression.Arguments[argIndex], typeof(<#=clientEntitiesNamespace#>.<#=entityTypeName#>).GetProperty("<#=entityKeys[0]#>")));
                }
<#+
    }
    else
    {
#>
                if (typeof(IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>).IsAssignableFrom(memberExpression.Type))
                {
                    var entities = Expression.Lambda<Func<IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>>>(memberExpression).Compile()();
                    Expression navPropExpression = methodCallExpression.Arguments[argIndex];
                    return entities.Any() ? (Expression)entities.Select(e => <#+
        string entityKeyName;
        for (int entityIndex = 1 ; entityIndex < entityKeys.Count ; entityIndex ++)
        {
            entityKeyName = code.Escape(entityKeys[entityIndex - 1]);
#>Expression.AndAlso(Expression.Equal(Expression.MakeMemberAccess(navPropExpression, typeof(<#=clientEntitiesNamespace#>.<#=entityTypeName#>).GetProperty("<#=entityKeyName#>")), Expression.Constant(e.<#=entityKeyName#>)), <#+
        }
        entityKeyName = code.Escape(entityKeys[entityKeys.Count - 1]);
#>Expression.Equal(Expression.MakeMemberAccess(navPropExpression, typeof(<#=clientEntitiesNamespace#>.<#=entityTypeName#>).GetProperty("<#=entityKeyName#>")), Expression.Constant(e.<#=entityKeyName#>))<#+
        for (int entityIndex = 1 ; entityIndex < entityKeys.Count ; entityIndex ++)
        {
#>)<#+
        }
#>).Aggregate((e1, e2) => Expression.OrElse(e1, e2)) : Expression.Constant(false);
                }
<#+
    }
}

void GetEntity(string clientEntitiesNamespace, string entityTypeName)
{
    string entityTypeNamePlurial = GetPlurial(entityTypeName);
#>
                <#=clientEntitiesNamespace#>.<#=entityTypeName#> valueAs<#=entityTypeName#>;
                if ((valueAs<#=entityTypeName#> = (value as <#=clientEntitiesNamespace#>.<#=entityTypeName#>)) != null)
                    return GetEntity(valueAs<#=entityTypeName#>, false, mergeOption);
                var valueAs<#=entityTypeNamePlurial#> = value as IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>;
                if (valueAs<#=entityTypeNamePlurial#> != null)
                {
                    var ctor = value.GetType().GetConstructor(new Type[] { typeof(IEnumerable<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>) });
                    if (ctor != null)
                        return ctor.Invoke(new object[] { valueAs<#=entityTypeNamePlurial#>.Select(e => GetEntity(e, false, mergeOption)) });
                    valueAs<#=entityTypeNamePlurial#> = valueAs<#=entityTypeNamePlurial#>.Select(e => GetEntity(e, false, mergeOption));
                    if (type.IsArray)
                        return valueAs<#=entityTypeNamePlurial#>.ToArray();
                    if (type == typeof(TrackableCollection<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>))
                        return new TrackableCollection<<#=clientEntitiesNamespace#>.<#=entityTypeName#>>(valueAs<#=entityTypeNamePlurial#>);
                    return valueAs<#=entityTypeNamePlurial#>.ToList();
                }
<#+
}

string GetEntitySetEntityTypeName(EntityType entityType, EntityContainer container, CodeGenerationTools code)
{
    return code.Escape(GetEntitySet(container, entityType).ElementType);
}

bool GetDTOEnumerable(TypeSymbol type, IEnumerable<TypeSymbol> dtoTypes, string dtoNamespace, IEnumerable<string> entityTypesName, string clientEntitiesNamespace, string serverEntitiesNamespace, string attachedParametersString, StringBuilder toEnumerableStringBuilder, int index = 0)
{
    var arrayType = type as ArrayTypeSymbol;
    if (arrayType != null)
    {
        if (arrayType.ElementType.ContainingNamespace.ToString() == serverEntitiesNamespace && entityTypesName.Contains(arrayType.ElementType.Name))
        {
            toEnumerableStringBuilder.AppendFormat(".Select(e{0} => GetEntity(e{0}, applyState, defaultState: defaultState, mergeOption: mergeOption, applyDataTransfer: applyDataTransfer)).ToArray()", index);
            return true;
        }
        if (dtoTypes.Contains(arrayType.ElementType))
        {
            toEnumerableStringBuilder.AppendFormat(".Select(e{0} => GetDTO(e{0}", index);
            toEnumerableStringBuilder.Append(attachedParametersString);
            toEnumerableStringBuilder.Append(", applyState, mergeOption, defaultState, applyDataTransfer)).ToArray()");
            return true;
        }
        toEnumerableStringBuilder.AppendFormat(".Select(e{0} => e{0}", index);
        if (! GetDTOEnumerable(arrayType.ElementType, dtoTypes, dtoNamespace, entityTypesName, clientEntitiesNamespace, serverEntitiesNamespace, attachedParametersString, toEnumerableStringBuilder, index + 1))
            return false;
        toEnumerableStringBuilder.Append(").ToArray()");
        return true;
    }

    var namedType = type as NamedTypeSymbol;
    if (namedType != null)
    {
        if (namedType.ConstructedFrom != null)
            switch (namedType.ConstructedFrom.ToString())
            {
                case "System.Collections.Generic.List<T>":
                    if (namedType.TypeArguments[0].ContainingNamespace != null)
                    {
                        if (namedType.TypeArguments[0].ContainingNamespace.ToString() == serverEntitiesNamespace && entityTypesName.Contains(namedType.TypeArguments[0].Name))
                        {
                            toEnumerableStringBuilder.AppendFormat(".Select(e{0} => GetEntity(e{0}, applyState, mergeOption, defaultState: defaultState, applyDataTransfer: applyDataTransfer)).ToList()", index);
                            return true;
                        }
                        if (dtoTypes.Contains(namedType.TypeArguments[0]))
                        {
                            toEnumerableStringBuilder.AppendFormat(".Select(e{0} => GetDTO(e{0}", index);
                            toEnumerableStringBuilder.Append(attachedParametersString);
                            toEnumerableStringBuilder.Append(", applyState, mergeOption, defaultState, applyDataTransfer)).ToList()");
                            return true;
                        }
                    }
                    toEnumerableStringBuilder.AppendFormat(".Select(e{0} => e{0}", index);
                    if (! GetDTOEnumerable(namedType.TypeArguments[0], dtoTypes, dtoNamespace, entityTypesName, clientEntitiesNamespace, serverEntitiesNamespace, attachedParametersString, toEnumerableStringBuilder, index + 1))
                        return false;
                    toEnumerableStringBuilder.Append(").ToList()");
                    return true;
            }
    }
    return false;
}

void EntityAttachWithoutChangingStateSubEntities(EntityType entityType, CodeGenerationTools code)
{
#>
        entity.IsInitializingRelationships = true;
<#+
        AddPropertyDescriptorToEntity("entity");
        bool hasRelationshipCardinalityOne = false;
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np)))
        {
            if(navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
            {
#>
        entity.<#=code.Escape(navigationProperty)#>.CollectionChanged += <#=code.Escape(navigationProperty.FromEndMember.GetEntityType())#>_<#=code.Escape(navigationProperty)#>CollectionChanged;
<#+
            }
            else
                hasRelationshipCardinalityOne = true;
        }
        if (hasRelationshipCardinalityOne)
        {
#>
        entity.NavigationPropertyChanged += <#=code.Escape(entityType)#>NavigationPropertyChanged;
<#+
        }
#>
        EntityAttachWithoutChangingStateSubEntities(entity);
<#+
}

public class GetQueryableExtensionUsings : SyntaxVisitorOfIEnumerableOfString
{
    private ISemanticModel _semanticModel;
    private Dictionary<string, string> _namespacesReplacement;
    private DTOAndInterfacesTypesRewriter _typeRewriter;
    
    public GetQueryableExtensionUsings(SpecificationsElements specificationsElements, ISemanticModel semanticModel, IEnumerable<TypeSymbol> dtoTypes, Dictionary<string, string> namespacesReplacement)
    {
        _semanticModel = semanticModel;
        _namespacesReplacement = namespacesReplacement;
        _typeRewriter = new DTOAndInterfacesTypesRewriter(semanticModel, specificationsElements, dtoTypes, _namespacesReplacement);
    }

    public override IEnumerable<string> Visit(SyntaxNode node)
    {
        return (base.Visit(node) ?? new string[0]).Union(node.ChildNodes().SelectMany(cn => Visit(cn) ?? new string[0]));
    }

    private string VisitName(NameSyntax node, string nodeText)
    {
        var typeSymbol = _semanticModel.GetSymbolInfo(node).Symbol as TypeSymbol;
        if (typeSymbol == null)
            return null;
        if (_typeRewriter.Visit(node) != node)
            return null;
        var value = Regex.Match(typeSymbol.ToString(), @"^((.?)*)\." + nodeText).Groups[1].Value;
        string newValue;
        if (_namespacesReplacement.TryGetValue(value, out newValue))
            value = newValue;
        return value;
    }

    public override IEnumerable<string> VisitIdentifierName(IdentifierNameSyntax node)
    {
        yield return VisitName(node, node.Identifier.ValueText);
    }

    public override IEnumerable<string> VisitQualifiedName(QualifiedNameSyntax node)
    {
        yield return VisitName(node, node.ToString());
    }

    public override IEnumerable<string> VisitGenericName(GenericNameSyntax node)
    {
        yield return VisitName(node, node.Identifier.ValueText);
        foreach (var t in node.TypeArgumentList.Arguments)
            foreach (var ns in Visit(t))
                yield return ns;
    }
}

    private void GenerateIncludeFor(string className, string propertyName, MethodDeclarationSyntax method, SpecificationsElements specificationsElements, List<EntityType> entityTypes, CodeGenerationTools code, string serverEntitiesNamespace, string clientEntitiesNamespace)
    {
        var includeForSB = IncludeFor(method, specificationsElements, entityTypes, code, serverEntitiesNamespace, clientEntitiesNamespace, specificationsElements.TypeSymbols[className]);
        string includeFor;
        if (includeForSB == null)
            includeFor = "throw new NotImplementedException();";
        else
        {
            includeFor = includeForSB.ToString();
            if (includeFor.Length > 0)
                includeFor = string.Concat("query = query", includeFor, ";");
        }
#>
        [IncludeMethod]
        public static IAsyncQueryable<<#=clientEntitiesNamespace#>.<#=className#>> IncludeFor<#=propertyName#>(this IAsyncQueryable<<#=clientEntitiesNamespace#>.<#=className#>> query)
        {
            bool done = false;
            IncludeFor<#=propertyName#>CustomQueryable(ref query, ref done);
<#+
            if (includeFor.Length == 0)
            {
#>
            return query;
<#+
            }
            else
            {
#>
            if (done)
                return query;
            <#=includeFor#>
<#+
                if (includeForSB != null)
                {
#>
            return query;
<#+
                }
            }
#>
        }
        static partial void IncludeFor<#=propertyName#>CustomQueryable(ref IAsyncQueryable<<#=clientEntitiesNamespace#>.<#=className#>> query, ref bool done);

        [IncludeMethod]
        public static IAsyncQueryableValue<<#=clientEntitiesNamespace#>.<#=className#>> IncludeFor<#=propertyName#>(this IAsyncQueryableValue<<#=clientEntitiesNamespace#>.<#=className#>> query)
        {
            bool done = false;
            IncludeFor<#=propertyName#>CustomQueryableValue(ref query, ref done);
<#+
            if (includeFor.Length == 0)
            {
#>
            return query;
<#+
            }
            else
            {
#>
            if (done)
                return query;
            <#=includeFor#>
<#+
                if (includeForSB != null)
                {
#>
            return query;
<#+
                }
            }
#>
        }
        static partial void IncludeFor<#=propertyName#>CustomQueryableValue(ref IAsyncQueryableValue<<#=clientEntitiesNamespace#>.<#=className#>> query, ref bool done);

        [IncludeMethod]
        public static IEnumerable<<#=clientEntitiesNamespace#>.<#=className#>> IncludeFor<#=propertyName#>(this IEnumerable<<#=clientEntitiesNamespace#>.<#=className#>> source)
        {
            throw new InvalidOperationException();
        }

        [IncludeMethod]
        public static <#=clientEntitiesNamespace#>.<#=className#> IncludeFor<#=propertyName#>(this <#=clientEntitiesNamespace#>.<#=className#> source)
        {
            throw new InvalidOperationException();
        }
<#+
    }

    void GenerateIncludeNavigationProperty(CodeGenerationTools code, EntityContainer container, string clientFxClientContextNamespace, string clientEntitiesNamespace, string contextName, EntityType entityType, string entityTypeFullName, string entityTypeName, NavigationProperty navigationProperty, EntityType subEntityType = null, string subEntityTypeName = "", string subEntityTypeFullName = "")
    {
        if (subEntityType == null)
            subEntityType = entityType;
#>
    
<#+
        string navigationPropertyName = code.Escape(navigationProperty);
        EntityType toEntityType = (EntityType)navigationProperty.ToEndMember.GetEntityType();
        string toEntityTypeName = code.Escape(toEntityType);
        string toEntityTypeFullName = string.Format("{0}.{1}", clientEntitiesNamespace, toEntityTypeName);
        EntitySet toEntitySet = GetEntitySet(container, toEntityType);
        string toEntitySetName = code.Escape(toEntitySet);
        string eParameter = subEntityTypeName == string.Empty ? "e" : string.Concat("(", clientEntitiesNamespace, ".", subEntityTypeName, " e)");
        string subEntityTypeFullNameWithComma = subEntityTypeFullName == string.Empty ? string.Empty : subEntityTypeFullName + ", ";
        string subEntityOrEntityName = subEntityTypeName == string.Empty ? entityTypeName : subEntityTypeName;
        if (navigationProperty.ToEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
        {
            if (navigationProperty.FromEndMember.RelationshipMultiplicity == System.Data.Metadata.Edm.RelationshipMultiplicity.Many)
            {
#>
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryable<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyToMany(source, ((I<#=contextName#>)source.Context).<#=toEntitySetName#>.AsAsyncQueryable()<#=toEntitySet.ElementType == toEntityType ? "" : string.Concat(".OfType<", toEntityTypeFullName, ">()")#>, <#=eParameter#> => e.<#=navigationPropertyName#>, <#=eParameter#> => e.<#=navigationPropertyName#>, (es, e) => es.Contains(e), queryTransform, fromQuery =>	
        from e1 in fromQuery
        from e2 in e1.<#=navigationPropertyName#>
        select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty);#> { <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName);#>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName);#> }, (key, e1) => <#+TestKeys(code, subEntityType, "key", "e1", subEntityOrEntityName + "1");#>, (key, e2) => <#+TestKeys(code, toEntityType, "key", "e2", toEntityTypeName + "2");#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyToOneMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, (fromQuery, to) => 
        from e in fromQuery
        select new Include<#+WriteIncludeTo(code, subEntityType, navigationProperty);#> { <#+InitKeys(code, subEntityType, "e", prefixName: subEntityOrEntityName);#>, To = to }, k => k.To, (k, f) => <#+TestKeys(code, subEntityType, "k", "f", subEntityOrEntityName);#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryableValue<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneOneToMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, <#=eParameter#> => e.<#=navigationPropertyName#>, true);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneOneToMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, <#=eParameter#> => e.<#=navigationPropertyName#>, true);
    }
<#+
                if (subEntityTypeName == string.Empty)
                {
#>

    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName #>> <#=subEntityTypeName #>Include<#=navigationPropertyName #>(this IAsyncQueryable<<#=entityTypeFullName #>> source1, IAsyncQueryable<<#=toEntityTypeFullName #>> source2)
    {
        return <#=clientFxClientContextNamespace #>.AsyncQueryableExtensions.IncludeManyToMany(
            source1, 
            source2, 
            (fromQuery, toQuery) => from e1 in fromQuery
                                    from e2 in toQuery
                                    where e1.<#=navigationPropertyName #>.Contains(e2)
                                    select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty); #> { <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName); #>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName); #> },
            (fromValue, toQuery) => from e2 in toQuery
                                    let e1 = fromValue
                                    where e1.<#=navigationPropertyName #>.Contains(e2)
                                    select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty); #>{ <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName); #>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName); #> },
            (key, e1) => <#+TestKeys(code, subEntityType, "key", "e1", subEntityOrEntityName + "1"); #>, 
            (key, e2) => <#+TestKeys(code, toEntityType, "key", "e2", toEntityTypeName + "2"); #>, 
            <#=eParameter #> => e.<#=navigationPropertyName #>);
    }

    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName #>> <#=subEntityTypeName #>Include<#=navigationPropertyName #>(this IAsyncQueryable<<#=entityTypeFullName #>> source1, IAsyncQueryableValue<<#=toEntityTypeFullName #>> source2)
    {
        return <#=clientFxClientContextNamespace #>.AsyncQueryableExtensions.IncludeManyToOneMany(
            source1, 
            source2, 
            (fromQuery, toValue) => from e1 in fromQuery
                                    let e2 = toValue
                                    where e1.<#=navigationPropertyName #>.Contains(toValue)
                                    select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty); #>{ <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName); #>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName); #> }, 
            (key, e1) => <#+TestKeys(code, subEntityType, "key", "e1", subEntityOrEntityName + "1"); #>, 
            (key, e2) => <#+TestKeys(code, toEntityType, "key", "e2", toEntityTypeName + "2"); #>, 
            <#=eParameter #> => e.<#=navigationPropertyName #>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName #>> <#=subEntityTypeName #>Include<#=navigationPropertyName #>(this IAsyncQueryableValue<<#=entityTypeFullName #>> source1, IAsyncQueryable<<#=toEntityTypeFullName #>> source2)
    {
        return <#=clientFxClientContextNamespace #>.AsyncQueryableExtensions.IncludeOneManyToMany(
            source1, 
            source2, 
            (fromValue, toQuery) => from e2 in toQuery
                                    let e1 = fromValue
                                    where e1.<#=navigationPropertyName #>.Contains(e2)
                                    select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty); #>{ <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName); #>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName); #> }, 
            (key, e1) => <#+TestKeys(code, subEntityType, "key", "e1", subEntityOrEntityName + "1"); #>, 
            (key, e2) => <#+TestKeys(code, toEntityType, "key", "e2", toEntityTypeName + "2"); #>, 
            <#=eParameter #> => e.<#=navigationPropertyName #>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName #>> <#=subEntityTypeName #>Include<#=navigationPropertyName #>(this IAsyncQueryableValue<<#=entityTypeFullName #>> source1, IAsyncQueryableValue<<#=toEntityTypeFullName #>> source2)
    {
        return <#=clientFxClientContextNamespace #>.AsyncQueryableExtensions.IncludeOneManyToOneMany(
            source1, 
            source2, 
            (fromQuery, toValue) => from e1 in fromQuery
                                    let e2 = toValue
                                    where e1.<#=navigationPropertyName #>.Contains(toValue)
                                    select new Include<#+WriteIncludeTypeKeys(code, subEntityType, navigationProperty); #>{ <#+InitKeys(code, subEntityType, "e1", 1, prefixName: subEntityOrEntityName); #>, <#+InitKeys(code, toEntityType, "e2", 2, prefixName: toEntityTypeName); #> },
            (key, e1) => <#+TestKeys(code, subEntityType, "key", "e1", subEntityOrEntityName + "1"); #>, 
            (key, e2) => <#+TestKeys(code, toEntityType, "key", "e2", toEntityTypeName + "2"); #>, 
            <#=eParameter #> => e.<#=navigationPropertyName #>);
    }
<#+
                }
            }
            else
            {
#>
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryable<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneToMany(source, ((I<#=contextName#>)source.Context).<#=toEntitySetName#>.AsAsyncQueryable()<#=toEntitySet.ElementType == toEntityType ? "" : string.Concat(".OfType<", toEntityTypeFullName, ">()")#>, <#=eParameter#> => e.<#=navigationPropertyName#>, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, queryTransform, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryableValue<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneOneToMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneToMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneOneToMany(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>>)null);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyOneToMany<<#=entityTypeFullName#>, <#=subEntityTypeFullNameWithComma#><#=toEntityTypeFullName#>>(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyOneToOneMany<<#=entityTypeFullName#>, <#=subEntityTypeFullNameWithComma#><#=toEntityTypeFullName#>>(source, <#=eParameter#> => e.<#=navigationPropertyName#>, queryTransform, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, <#=eParameter#> => e.<#=navigationPropertyName#>);
    }
<#+
            }
#>
 
    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IEnumerable<<#=entityTypeFullName#>> source)
    {
        throw new InvalidOperationException();
    }
    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IEnumerable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        throw new InvalidOperationException();
    }

    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this <#=entityTypeFullName#> source)
    {
        throw new InvalidOperationException();
    }
    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this <#=entityTypeFullName#> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>>> queryTransform)
    {
        throw new InvalidOperationException();
    }

    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IEnumerable<<#=entityTypeFullName#>> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        throw new InvalidOperationException();
    }

    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this <#=entityTypeFullName#> source, Expression<Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        throw new InvalidOperationException();
    }
<#+
        }
        else
        {
#>
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryable<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryable<<#=entityTypeFullName#>> source, Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>> addIncludes)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyToOne(source, ((I<#=contextName#>)source.Context).<#=toEntitySetName#>.AsAsyncQueryable()<#=toEntitySet.ElementType == toEntityType ? "" : string.Concat(".OfType<", toEntityTypeFullName, ">()")#>, <#=eParameter#> => e.<#=navigationPropertyName#>, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, addIncludes, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, (e, value) => e.<#=navigationPropertyName#> = value);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryableValue<<#=entityTypeFullName#>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>>)null);
    }
    [IncludeMethod]
    public static IAsyncQueryableValue<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<<#=entityTypeFullName#>> source, Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>> addIncludes)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeOneManyToOne(source, <#=eParameter#> => e.<#=navigationPropertyName#>, addIncludes, (e, value) => e.<#=navigationPropertyName#> = value);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> source)
    {
        return <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(source, (Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>>)null);
    }

    [IncludeMethod]
    public static IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IAsyncQueryableValue<IEnumerable<<#=entityTypeFullName#>>> source, Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>> addIncludes)
    {
        return <#=clientFxClientContextNamespace#>.AsyncQueryableExtensions.IncludeManyOneToOne<<#=entityTypeFullName#>, <#=subEntityTypeFullNameWithComma#><#=toEntityTypeFullName#>>(source, <#=eParameter#> => e.<#=navigationPropertyName#>, addIncludes, (e1, e2) => <#+TestNavigationKeys(code, navigationProperty);#>, (e, value) => e.<#=navigationPropertyName#> = value);
    }

    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this IEnumerable<<#=entityTypeFullName#>> source)
    {
        throw new InvalidOperationException();
    }
    [IncludeMethod]
    public static IEnumerable<<#=entityTypeFullName#>> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this IEnumerable<<#=entityTypeFullName#>> source, Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        throw new InvalidOperationException();
    }

    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName#>Include<#=navigationPropertyName#>(this <#=entityTypeFullName#> source)
    {
        throw new InvalidOperationException();
    }
    [IncludeMethod]
    public static <#=entityTypeFullName#> <#=subEntityTypeName#>Include<#=navigationPropertyName#>WithExpression(this <#=entityTypeFullName#> source, Expression<Func<<#=toEntityTypeFullName#>, <#=toEntityTypeFullName#>>> queryTransform)
    {
        throw new InvalidOperationException();
    }
<#+
        }
    }

	void SetValuePropertyFromEntityProperty(EdmProperty edmProperty, string propertyName, bool utc)
	{
        if (utc && edmProperty.TypeUsage.ToString() == "Edm.DateTime")
        {
            if (edmProperty.Nullable)
            {
#>
                            if (entity.<#=propertyName#>.HasValue)
    <#+	
            }
#>
                            value.<#=propertyName#> = entity.<#=propertyName#><#+if (edmProperty.Nullable){#>.Value<#+}#>.ToUniversalTime();
<#+
        }
        else
        {
#>
                            value.<#=propertyName#> = entity.<#=propertyName#>;
<#+
		}
	}
#>
