<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ output extension=".txt"#>
<#+
// Copyright (c) Matthieu MEZIL.  All rights reserved.
void WriteClientFxConverters(string namespaceName = null)
{
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
if (namespaceName == null)
	namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

fileManager.StartNewFile("BoolToVisibilityConverter.cs");
WriteHeader(namespaceName, code, "System", "System.Globalization", "System.Windows", "System.Windows.Data");
#>
public partial class BoolToVisibilityConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
		bool boolValue = (bool)value;
		if (parameter != null && ((string)parameter).ToLower() == "false")
			boolValue = !boolValue;
		return boolValue ? Visibility.Visible : Visibility.Collapsed;
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{
        object result = null;
        bool proceed = false;
        CustomConvertBack(value, targetType, parameter, culture, ref result, ref proceed);
        if (proceed || result != null)
        {
            return result;
        }

        throw new NotImplementedException();
    }

    partial void CustomConvertBack(object value, Type targetType, object parameter, CultureInfo culture, ref object result, ref bool proceed);
}
<#+
WriteFooter(namespaceName);

fileManager.StartNewFile("DateConverter.cs");
WriteHeader(namespaceName, code, "System", "System.Globalization", "System.Windows.Data");
#>
public class DateConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
		return ((DateTime)value).ToShortDateString();
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{
		return DateTime.Parse((string)value);
	}
}
<#+
WriteFooter(namespaceName);

fileManager.StartNewFile("TimeConverter.cs");
WriteHeader(namespaceName, code, "System", "System.Globalization", "System.Windows.Data");
#>
public partial class TimeConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
		return ((DateTime)value).TimeOfDay;
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{
        object result = null;
        bool proceed = false;
        CustomConvertBack(value, targetType, parameter, culture, ref result, ref proceed);
        if (proceed || result != null)
        {
            return result;
        }

        throw new NotImplementedException();
    }

    partial void CustomConvertBack(object value, Type targetType, object parameter, CultureInfo culture, ref object result, ref bool proceed);
}
<#+
WriteFooter(namespaceName);

fileManager.StartNewFile("IntToVisibilityCollapsedIfZeroConverter.cs");
WriteHeader(namespaceName, code, "System", "System.Globalization", "System.Windows", "System.Windows.Data");
#>
public partial class IntToVisibilityCollapsedIfZeroConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
		return (int)value == 0 ? Visibility.Collapsed : Visibility.Visible;
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{
        object result = null;
        bool proceed = false;
        CustomConvertBack(value, targetType, parameter, culture, ref result, ref proceed);
        if (proceed || result != null)
        {
            return result;
        }

        throw new NotImplementedException();
    }

    partial void CustomConvertBack(object value, Type targetType, object parameter, CultureInfo culture, ref object result, ref bool proceed);
}
<#+
WriteFooter(namespaceName);

fileManager.StartNewFile("NumberRoundConverter.cs");
WriteHeader(namespaceName, code, "System", "System.Globalization", "System.Windows", "System.Windows.Data");
#>
public partial class NumberRoundConverter : IValueConverter
{
	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
        double doubleValue;
        if (double.TryParse(value.ToString(), out doubleValue))
        {
            var decimals = parameter == null ? 2 : (int)parameter;
            var roundValue = Math.Round(doubleValue, decimals);
            if (roundValue == doubleValue)
                return roundValue;
            else
                return roundValue.ToString("0.00");
        }
        return value;
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{
        object result = null;
        bool proceed = false;
        CustomConvertBack(value, targetType, parameter, culture, ref result, ref proceed);
        if (proceed || result != null)
        {
            return result;
        }

        var valueString = value.ToString();
        double valueDouble;
        if (double.TryParse(valueString, out valueDouble))
        {
            if (targetType == typeof(double))
            {
                return valueDouble;
            }
            if (targetType == typeof(decimal))
            {
                return (decimal)valueDouble;
            }
            if (targetType == typeof(float))
            {
                return (float)valueDouble;
            }
            if (targetType == typeof(double?))
            {
                return (double?)valueDouble;
            }
            if (targetType == typeof(decimal?))
            {
                return (decimal?)valueDouble;
            }
            if (targetType == typeof(float?))
            {
                return (float?)valueDouble;
            }
        }
        if (string.IsNullOrWhiteSpace(valueString))
        {
            if (targetType == typeof(decimal?))
            {
                return (decimal?)null;
            }
            if (targetType == typeof(float?))
            {
                return (float?)null;
            }
            if (targetType == typeof(double?))
            {
                return (double?)null;
            }
        }
        throw new NotImplementedException();
    }

    partial void CustomConvertBack(object value, Type targetType, object parameter, CultureInfo culture, ref object result, ref bool proceed);
}
<#+
WriteFooter(namespaceName);

fileManager.Process();
}
#>
