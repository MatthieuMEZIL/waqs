<#@ include file="WAQS.Client.WCFServiceProxy.ttinclude"#>
<#+
// Copyright (c) Matthieu MEZIL.  All rights reserved.

public class Reference<T>
{
	public T Value { get; set; }
}

private Reference<string> _interfaceName; 

string GetProxyTransformationValue(Dictionary<string, string> namespaces, CompilationUnitSyntax codeExpression)
{
	return new WCFProxyNetRewriter(_interfaceName = new Reference<string>()).Visit(new NamespaceFilter(namespaces.Keys).Visit(codeExpression)).NormalizeWhitespace().ToString();
}

public class WCFProxyNetRewriter : SyntaxRewriter
{
	private Reference<string> _interfaceName;

	public WCFProxyNetRewriter(Reference<string> interfaceName)
	{
		_interfaceName = interfaceName;
	}

	public override SyntaxNode VisitClassDeclaration(ClassDeclarationSyntax node)
	{
		var baseType = node.BaseList.Types.FirstOrDefault();
		if (baseType != null)
		{
			var qualifiedName = baseType as QualifiedNameSyntax;
			if (qualifiedName != null)
				baseType = qualifiedName.Right;
			var genericBaseType = baseType as GenericNameSyntax;
			string baseClassName;
			if (genericBaseType == null)
				baseClassName = baseType.GetText().ToString();
			else
				baseClassName = genericBaseType.Identifier.ValueText;
			switch (baseClassName)
			{
				case "ClientBase":
					return ClassDeclaration.DefineMembers(node, node.Members.Select(m => Visit(m)).OfType<MemberDeclarationSyntax>().Where(m => m != null).Union(Syntax.ParseCompilationUnit("void System.IDisposable.Dispose() { switch (State) { case System.ServiceModel.CommunicationState.Created: case System.ServiceModel.CommunicationState.Opened: case System.ServiceModel.CommunicationState.Opening: Channel.Close(); break; } }").Members));
			}
		}
		return base.VisitClassDeclaration(node);
	}

	public override SyntaxNode VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
	{
		if (node.AttributeLists.Any(al => al.Attributes.Any(a => a.Name.ToString() == "System.ServiceModel.ServiceContractAttribute")))
			_interfaceName.Value = node.Identifier.ValueText;
		return base.VisitInterfaceDeclaration(node);
	}

	public override SyntaxNode VisitPropertyDeclaration(PropertyDeclarationSyntax node)
	{
		if (node.Identifier.ValueText == "CookieContainer")
			return null;
		return base.VisitPropertyDeclaration(node);
	}

	public override SyntaxNode VisitMethodDeclaration(MethodDeclarationSyntax node)
	{
		switch (node.Identifier.ValueText)
		{
			case "OnBeginOpen":
			case "OnEndOpen":
			case "OnOpenCompleted":
			case "OpenAsync":
			case "OnBeginClose":
			case "OnEndClose":
			case "OnCloseCompleted":
			case "CloseAsync":
				return null;
		}
		return node;
	}

	public override SyntaxNode VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
	{
		var variables = node.Declaration.Variables;
		if (variables.Count == 1)
			switch (variables[0].Identifier.ValueText)
			{
				case "OpenCompleted":
				case "CloseCompleted":
					return null;
			}
		return node;
	}

	public override SyntaxNode VisitFieldDeclaration(FieldDeclarationSyntax node)
	{
		if (Visit(node.ChildNodes().Single()) == null)
			return null;
		return node;
	}

	public override SyntaxNode VisitVariableDeclaration(VariableDeclarationSyntax node)
	{
		if (node.Variables.Count == 1)
			switch (node.Variables[0].Identifier.ValueText)
			{
				case "onBeginOpenDelegate":
				case "onEndOpenDelegate":
				case "onOpenCompletedDelegate":
				case "onBeginCloseDelegate":
				case "onEndCloseDelegate":
				case "onCloseCompletedDelegate":
					return null;
			}
		return base.VisitVariableDeclaration(node);
	}
}

void WriteSpecificClasses(EntityFrameworkTemplateFileManager fileManager, CodeGenerationTools code, string servicePath, string namespaceName)
{
	var serviceName = Regex.Match(servicePath, @"/(\w[\w\d]*)\.svc\?wsdl$").Groups[1].Value;
	fileManager.StartNewFile(serviceName + "ServiceFactory.cs");
	WriteHeader(namespaceName, code, "System");
#>
public class <#=serviceName#>ServiceFactory
{
	private Func<<#=_interfaceName.Value#>> _serviceFactory;

	public <#=serviceName#>ServiceFactory(Func<<#=_interfaceName.Value#>> serviceFactory)
	{
		_serviceFactory = serviceFactory;
	}

	public <#=_interfaceName.Value#> GetNewService()
	{
		return _serviceFactory();
	}
}
<#+
	WriteFooter(namespaceName);
}
#>
