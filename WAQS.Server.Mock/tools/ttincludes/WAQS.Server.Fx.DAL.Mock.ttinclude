<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ output extension=".txt"#>
<#+
// Copyright (c) Matthieu MEZIL.  All rights reserved.

void WriteServerFxDALMock(string serverFxEntitiesNamespace, string serverFxDALInterfacesNamespace, string serverFxCommonNamespace, string namespaceName = null)
{
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    if (namespaceName == null)
        namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    fileManager.StartNewFile("EntitySetMock.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks", serverFxDALInterfacesNamespace, serverFxEntitiesNamespace);
#>
public partial class EntitySetMock<T> : IEntitySet<T> 
    where T : class, IEntity
{
    private IDataContext _context;
    private IEntitySet<T> _source;

    public EntitySetMock(IDataContext context, IEntitySet<T> source)
    {
        _context = context;
        _source = source;
    }
        
    public void Add(T item)
    {
        _source.Add(item);
    }
        
    public void Attach(T item)
    {
        _source.Attach(item);
    }
        
    public void AttachAsModified(T item)
    {
        _source.AttachAsModified(item);
    }
        
    public void AttachAsDeleted(T item)
    {
        _source.AttachAsDeleted(item);
    }
    public void Detach(T item)
    {
        _source.Detach(item);
    }
        
    public void Delete(T item)
    {
        _source.Delete(item);
    }
        
    public IEnumerable<T> Local
    {
        get { return _source.Local; }
    }
        
    public IEnumerator<T> GetEnumerator()
    {
        return _source.Local.GetEnumerator();
    }
        
    IEnumerator IEnumerable.GetEnumerator()
    {
        return _source.Local.GetEnumerator();
    }
        
    public Type ElementType
    {
        get { return typeof(T); }
    }
        
    public Expression Expression
    {
        get { return _source.Local.AsQueryable().Expression; }
    }
        
    public IQueryProvider Provider
    {
        get { return _source.AsQueryable().Provider; }
    }
        
    public IDataContext DataContext 
    {
        get { return _context; }
    }
        
    IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> IWAQSQueryBase.QueryableIncludes
    {
        get { throw new InvalidOperationException(); }
        set { throw new InvalidOperationException(); }
    }
        
    IEnumerable<string> IWAQSQueryBase.WithSpecifications
    {
        get { throw new InvalidOperationException(); }
        set { throw new InvalidOperationException(); }
    }
                
    private MergeOption _mergeOption;
    public MergeOption MergeOption
    {
        get { return _mergeOption; }
        set { _mergeOption = value; }
    }
        
    public IQueryable<T> WithMergeOption(MergeOption mergeOption)
    {
        var value = new EntitySetMock<T>(_context, _source);
        value.MergeOption = mergeOption;
        return value;
    }
        
    Func<Expression, Expression> IWAQSQueryBase.ExpressionTransformation
    {
        get { throw new NotImplementedException(); }
    }

    bool IWAQSQueryBase.FromQuery
    {
        get { return false; }
        set
        {
            throw new InvalidOperationException();
        }
    }

    public IAsyncQueryProviderFactory AsyncQueryProviderFactory
    {
        get { throw new NotImplementedException(); }
    }
<#+
CompleteEntitySetMock();
#>
}
<#+
    WriteFooter(namespaceName);	
    fileManager.Process();
}
#>
