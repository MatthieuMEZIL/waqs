<#@ include file="WAQS.Specifications.ttinclude"#>
<#@ include file="WAQS.DTO.ttinclude"#>
<#+
// Copyright (c) Matthieu MEZIL.  All rights reserved.
void WriteServerEntitiesSpecificationsMock(string edmxPath, SpecificationPath[] specificationPathes, SpecificationPath[] dtoPathes, string dtoNamespace, SpecificationPath entitiesPath, string serverFxSpecificationsNamespace, string serverFxDALInterfacesNamespace, string serverFxServiceInterfacesNamespace, string serverEntitiesNamespace, string namespaceName = null)
{
	var fileManager = EntityFrameworkTemplateFileManager.Create(this);
	var edmxElements = EdmxElements.Get(Host, edmxPath, namespaceName);
	var code = edmxElements.Code;
	var dtoTypes = GetClasses(dtoPathes).ToList();
	var dtoNamespaces = GetNamespaces(dtoPathes).ToList();
	var specificationsElements = SpecificationsElements.Get(Host, specificationPathes, entitiesPath, serverFxSpecificationsNamespace, serverFxDALInterfacesNamespace, serverFxServiceInterfacesNamespace, serverEntitiesNamespace, edmxElements, SpecificationsElements.Type.UnitTest);

	if (namespaceName == null)
		namespaceName = code.VsNamespaceSuggestion() + ".Mock";

	var semanticModels = new ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel>();
	var methods = new Dictionary<MethodSymbol, MethodDeclarationSyntax>();
	var classes = new Dictionary<string, TypeSymbol>();
	var classesPerCompilationUnits = new Dictionary<CompilationUnitSyntax, List<string>>();
	foreach (var compilationUnitSyntax in specificationsElements.CompilationUnitSyntaxes)
	{
		var semanticModel = specificationsElements.SemanticModelPerCompilationUnits[compilationUnitSyntax];
		var getSpecificationsInfoVisitor = new GetSpecificationsInfoVisitor(semanticModel);
		getSpecificationsInfoVisitor.Visit(compilationUnitSyntax);
		foreach (var m in getSpecificationsInfoVisitor.Methods)
		{
			semanticModels.TryAdd(m.Value, semanticModel);
			methods.Add(m.Key, m.Value);
		}
		foreach (var c in getSpecificationsInfoVisitor.Types)
			classes.Add(c.Key, c.Value);

		classesPerCompilationUnits.Add(compilationUnitSyntax, getSpecificationsInfoVisitor.Types.Select(c => c.Key).ToList());
	}
	int index = 0;
	foreach (var compilationUnitSyntax in specificationsElements.CompilationUnitSyntaxes)
	{
		var semanticModel = specificationsElements.SemanticModelPerCompilationUnits[compilationUnitSyntax];
		var result = new StubMethodSyntaxRewriter(semanticModel, serverFxSpecificationsNamespace, serverFxDALInterfacesNamespace, serverFxServiceInterfacesNamespace, serverEntitiesNamespace, namespaceName, methods, classes, semanticModels, specificationsElements, edmxElements, classesPerCompilationUnits, dtoNamespaces, dtoTypes).Visit(compilationUnitSyntax);
		fileManager.StartNewFile(Path.GetFileNameWithoutExtension(specificationsElements.Documents[index ++].Name) + ".Mock.cs"); 
#>
<#=result.NormalizeWhitespace().ToString()#>
<#+
	}

	string contextName = code.Escape(edmxElements.Container);
	fileManager.StartNewFile(edmxElements.EdmxName + "QueryableExtension.cs");
	WriteHeader(edmxElements.NamespaceName, code, "System", "System.Collections.Generic", serverEntitiesNamespace);
#>
public static partial class <#=edmxElements.EdmxName#>QueryableExtensionMock
{
<#+
foreach (EntityType entityType in edmxElements.EntityTypes)
{
	string entityTypeName = code.Escape(entityType);
	string entityTypeFullName = string.Format("{0}.{1}", serverEntitiesNamespace, entityTypeName);
	foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np)))
	{
		string navigationPropertyName = code.Escape(navigationProperty);
		EntityType toEntityType = (EntityType)navigationProperty.ToEndMember.GetEntityType();
		string toEntityTypeName = code.Escape(toEntityType);
		string toEntityTypeFullName = string.Format("{0}.{1}", serverEntitiesNamespace, toEntityTypeName);
		EntitySet toEntitySet = GetEntitySet(edmxElements.Container, toEntityType);
		string toEntitySetName = code.Escape(toEntitySet);
#>
	public static IEnumerable<<#=entityTypeFullName#>> Include<#=navigationPropertyName#>WithExpression(this IEnumerable<<#=entityTypeFullName#>> source, Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>> queryTransform)
	{
		return source;
	}

	public static <#=entityTypeFullName#> Include<#=navigationPropertyName#>(this <#=entityTypeFullName#> source)
	{
		return source;
	}

	public static <#=entityTypeFullName#> Include<#=navigationPropertyName#>WithExpression(this <#=entityTypeFullName#> source, Func<IEnumerable<<#=toEntityTypeFullName#>>, IEnumerable<<#=toEntityTypeFullName#>>> queryTransform)
	{
		return source;
	}

	public static IEnumerable<<#=entityTypeFullName#>> Include<#=navigationPropertyName#>WithExpression(this IEnumerable<<#=entityTypeFullName#>> source, Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>> queryTransform)
	{
		return source;
	}

	public static <#=entityTypeFullName#> Include<#=navigationPropertyName#>WithExpression(this <#=entityTypeFullName#> source, Func<IEnumerable<<#=toEntityTypeFullName#>>, <#=toEntityTypeFullName#>> queryTransform)
	{
		return source;
	}
<#+
	}
}
foreach (var getMethodsPerClass in specificationsElements.GetMethods)
{
	foreach (var getMethod in getMethodsPerClass.Value)
	{
		var propertyName = GetPropertyNameFromMethod(getMethod);
		var includeForSB = IncludeFor(getMethod, specificationsElements, edmxElements.EntityTypes, code, serverEntitiesNamespace, serverEntitiesNamespace, specificationsElements.TypeSymbols[getMethodsPerClass.Key]);
		string includeFor;
		if (includeForSB == null)
			includeFor = "throw new NotImplementedException();";
		else
		{
			includeFor = includeForSB.ToString();
			if (includeFor.Length > 0)
				includeFor = string.Concat("query = query", includeFor, ";");
		}
#>

		public static IEnumerable<<#=serverEntitiesNamespace#>.<#=getMethodsPerClass.Key#>> IncludeFor<#=propertyName#>(this IEnumerable<<#=serverEntitiesNamespace#>.<#=getMethodsPerClass.Key#>> source)
		{
			return source;
		}

		public static <#=serverEntitiesNamespace#>.<#=getMethodsPerClass.Key#> IncludeFor<#=propertyName#>(this <#=serverEntitiesNamespace#>.<#=getMethodsPerClass.Key#> source)
		{
			return source;
		}

<#+
	}
}
#>
}
<#+
	WriteFooter(namespaceName);

	fileManager.Process();
}

public class GetSpecificationsInfoVisitor : SyntaxVisitor
{
	private ISemanticModel _semanticModel;

	public GetSpecificationsInfoVisitor(ISemanticModel semanticModel)
	{
		_semanticModel = semanticModel;
	}

	private List<KeyValuePair<MethodSymbol, MethodDeclarationSyntax>> _methods;
	public List<KeyValuePair<MethodSymbol, MethodDeclarationSyntax>> Methods
	{
		get { return _methods ?? (_methods = new List<KeyValuePair<MethodSymbol, MethodDeclarationSyntax>>()); }
	}

	private List<KeyValuePair<string, TypeSymbol>> _types;
	public List<KeyValuePair<string, TypeSymbol>> Types
	{
		get { return _types ?? (_types = new List<KeyValuePair<string, TypeSymbol>>()); }
	}

	public override void VisitCompilationUnit(CompilationUnitSyntax node)
	{
		foreach (var m in node.Members)
			Visit(m);
	}

	public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
	{
		foreach (var m in node.Members)
			Visit(m);
	}

	public override void VisitClassDeclaration(ClassDeclarationSyntax node)
	{
		foreach (var m in node.Members)
			Visit(m);
		var type = (TypeSymbol)_semanticModel.GetDeclaredSymbol(node);
		Types.Add(new KeyValuePair<string, TypeSymbol>(type.ToString(), type));
	}

	public override void VisitStructDeclaration(StructDeclarationSyntax node)
	{
		foreach (var m in node.Members)
			Visit(m);
		var type = (TypeSymbol)_semanticModel.GetDeclaredSymbol(node);
		Types.Add(new KeyValuePair<string, TypeSymbol>(type.ToString(), type));
	}

	public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
	{
		Methods.Add(new KeyValuePair<MethodSymbol, MethodDeclarationSyntax>((MethodSymbol)_semanticModel.GetDeclaredSymbol(node), node));
	}
}

public class StubMethodSyntaxRewriter : DTOAndInterfacesTypesRewriter
{
	private string _serverFxSpecificationsNamespace;
	private string _serverFxDALInterfacesNamespace;
	private string _serverFxServiceInterfacesNamespace;
	private string _serverEntitiesNamespace;
	private string _serverSpecificationsMockNamespace;
	private Dictionary<MethodSymbol, MethodDeclarationSyntax> _methods;
	private Dictionary<string, TypeSymbol> _classes;
	private ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel> _semanticModels;
	private EdmxElements _edmxElements;
	private Dictionary<CompilationUnitSyntax, List<string>> _classesPerCompilationUnits;
	private List<NamespaceSymbol> _dtoNamespaces; 
	private List<string> _usings = new List<string>();
	private bool _includeOverride = false;
	private string _prefix;
	private Dictionary<MethodSymbol, ParameterSyntax> _invocations = new Dictionary<MethodSymbol, ParameterSyntax>();

	public StubMethodSyntaxRewriter(ISemanticModel semanticModel, string serverFxSpecificationsNamespace, string serverFxDALInterfacesNamespace, string serverFxServiceInterfacesNamespace, string serverEntitiesNamespace, string serverSpecificationsMockNamespace, Dictionary<MethodSymbol, MethodDeclarationSyntax> methods, Dictionary<string, TypeSymbol> classes, ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel> semanticModels, SpecificationsElements specificationsElements, EdmxElements edmxElements, Dictionary<CompilationUnitSyntax, List<string>> classesPerCompilationUnits, List<NamespaceSymbol> dtoNamespaces, IEnumerable<TypeSymbol> dtoTypes)
		: base(semanticModel, specificationsElements, dtoTypes)
	{
		_serverFxSpecificationsNamespace = serverFxSpecificationsNamespace;
		_serverFxDALInterfacesNamespace = serverFxDALInterfacesNamespace;
		_serverFxServiceInterfacesNamespace = serverFxServiceInterfacesNamespace;
		_serverEntitiesNamespace = serverEntitiesNamespace;
		_serverSpecificationsMockNamespace = serverSpecificationsMockNamespace;
		_methods = methods;
		_classes = classes;
		_semanticModels = semanticModels;
		_edmxElements = edmxElements;
		_classesPerCompilationUnits = classesPerCompilationUnits;
		_dtoNamespaces = dtoNamespaces;
	}

	private StubMethodSyntaxRewriter(ISemanticModel semanticModel, string serverFxSpecificationsNamespace, string serverFxDALInterfacesNamespace, string serverFxServiceInterfacesNamespace, string serverEntitiesNamespace, string serverSpecificationsMockNamespace, Dictionary<MethodSymbol, MethodDeclarationSyntax> methods, Dictionary<string, TypeSymbol> classes, ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel> semanticModels, SpecificationsElements specificationsElements, EdmxElements edmxElements, Dictionary<CompilationUnitSyntax, List<string>> classesPerCompilationUnits, List<NamespaceSymbol> dtoNamespaces, IEnumerable<TypeSymbol> dtoTypes, string prefix)
		: this(semanticModel, serverFxSpecificationsNamespace, serverFxDALInterfacesNamespace, serverFxServiceInterfacesNamespace, serverEntitiesNamespace, serverSpecificationsMockNamespace, methods, classes, semanticModels, specificationsElements, edmxElements, classesPerCompilationUnits, dtoNamespaces, dtoTypes)
	{
		_prefix = prefix ?? "";
		_includeOverride = true;
	}

	public override SyntaxNode VisitCompilationUnit(CompilationUnitSyntax node)
	{
		foreach(var u in node.Usings.Select(us => us.Name.GetText().ToString()).Where(us => ! _dtoNamespaces.Any(n => n.ToString() == us)))
			_usings.Add(u);
		foreach (var className in node.ChildNodes().OfType<NamespaceDeclarationSyntax>().SelectMany(ns => ns.ChildNodes().OfType<ClassDeclarationSyntax>().Select(cd => SemanticModel.GetDeclaredSymbol(cd).ToString())))
		{
			List<string> additionalUsings;
			if (SpecificationsElements.Usings.TryGetValue(className, out additionalUsings))
				foreach (var u in additionalUsings)
					if (! _usings.Contains(u) && ! _dtoNamespaces.Any(n => n.ToString() == u))
						_usings.Add(u);
		}
		if (! _usings.Contains("System"))
			_usings.Add("System");
		if (! _usings.Contains(_serverEntitiesNamespace))
			_usings.Add(_serverEntitiesNamespace);
		foreach (var className in _classesPerCompilationUnits[node])
		{
			List<string> usings;
			if (SpecificationsElements.Usings.TryGetValue(className, out usings))
				foreach (var @using in usings.Where(us => ! _dtoNamespaces.Any(n => n.ToString() == us)))
					if (! _usings.Contains(@using))
						_usings.Add(@using);
		}
		node = (CompilationUnitSyntax)base.VisitCompilationUnit(node);
		return SyntaxFactory.CompilationUnit(node.Externs, SyntaxFactory.List<UsingDirectiveSyntax>(_usings.Select(u => SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(u)))), node.AttributeLists, node.Members);
	}

	public override SyntaxNode VisitUsingDirective(UsingDirectiveSyntax node)
	{
		var usingName = node.Name.GetText().ToString().Trim();
		if (_methods.Any(m => m.Key.ContainingNamespace.ToString() == usingName))
			return null;
		return base.VisitUsingDirective(node);
	}

	public override SyntaxNode VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
	{
		node = (NamespaceDeclarationSyntax)base.VisitNamespaceDeclaration(node);
		foreach(var u in node.Usings.Select(us => us.Name.GetText().ToString()).Where(us => ! _dtoNamespaces.Any(n => n.ToString() == us)))
		{
			if (! _usings.Contains(u))
				_usings.Add(u);
		}
		return SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(_serverSpecificationsMockNamespace), node.Externs, SyntaxFactory.List<UsingDirectiveSyntax>(), node.Members);
	}

	public override SyntaxNode VisitClassDeclaration(ClassDeclarationSyntax node)
	{
		node = (ClassDeclarationSyntax)base.VisitClassDeclaration(node);
		SyntaxKind kind;
		node = node.WithModifiers(SyntaxFactory.TokenList(new [] { SyntaxFactory.Token(SyntaxKind.PublicKeyword) }.Union(node.Modifiers.Where(m => !((kind = GetKind(m)) == SyntaxKind.PublicKeyword || kind == SyntaxKind.InternalKeyword || kind == SyntaxKind.ProtectedKeyword || kind == SyntaxKind.PrivateKeyword)))));
		return node;
	}

	public override SyntaxNode VisitStructDeclaration(StructDeclarationSyntax node)
	{
		node = (StructDeclarationSyntax)base.VisitStructDeclaration(node);
		SyntaxKind kind;
		node = node.WithModifiers(SyntaxFactory.TokenList(new [] { SyntaxFactory.Token(SyntaxKind.PublicKeyword) }.Union(node.Modifiers.Where(m => !((kind = GetKind(m)) == SyntaxKind.PublicKeyword || kind == SyntaxKind.InternalKeyword || kind == SyntaxKind.ProtectedKeyword || kind == SyntaxKind.PrivateKeyword)))));
		return node;
	}
	
	public override SyntaxNode VisitMethodDeclaration(MethodDeclarationSyntax node)
	{
		var method = (MethodSymbol)SemanticModel.GetDeclaredSymbol(node);
		List<List<PropertySymbolInfo>> dependentProperties;
		if (! _includeOverride && method.GetAttributes().Any(a => a.AttributeClass.ContainingNamespace.ToString() == _serverFxSpecificationsNamespace && a.AttributeClass.Name == "OverrideAttribute") || ! SpecificationsElements.MethodsDependentProperties.TryGetValue(node, out dependentProperties))
			return null;
		var methodAttributes = method.GetAttributes().ToList();
		_invocations.Clear();
		var value = (MethodDeclarationSyntax)new SpecificationMethodBodyRewriterMock(SpecificationsElements, dependentProperties, SemanticModel, DTOTypes, _serverFxServiceInterfacesNamespace, method.Parameters.Length == 0 ? null : method.Parameters[0].Name, new Dictionary<string, SyntaxNode>(), _semanticModels, _methods, _serverFxDALInterfacesNamespace, _serverSpecificationsMockNamespace, _classes, _dtoNamespaces, _invocations, null, _edmxElements, _serverFxSpecificationsNamespace).VisitMethodDeclaration(node);
		bool isAbstract = false;
		bool isVirtual = false;
		var attributes = SyntaxFactory.List<AttributeListSyntax>(node.AttributeLists.SelectMany(a => a.Attributes).Select((a, i) => new { Attibute = a, Index = i }).Where(a =>
			{
				var attributeClass = methodAttributes[a.Index].AttributeClass;
				var isSpecificationAttribute = attributeClass.ContainingNamespace.ToString() != _serverFxSpecificationsNamespace;
				isAbstract = attributeClass.Name == "AbstractAttribute";
				isVirtual = attributeClass.Name == "VirtualAttribute";
				return isSpecificationAttribute;
			}).Select(a => 
				SyntaxFactory.AttributeList(
					SyntaxFactory.SeparatedList(
						new [] { a.Attibute },
						new SyntaxToken[0]))));
		List<ParameterSyntax> parameters;
		BlockSyntax body = value.Body;
		if (_invocations.Any())
			parameters = value.ParameterList.Parameters.Union(_invocations.Values).ToList();
		else
			parameters = value.ParameterList.Parameters.ToList();
		if (isAbstract)
			body = MakeAbstractVirtualBody(node, SyntaxFactory.Block(SyntaxFactory.ParseStatement("throw new InvalidOperationException();")), method, parameters);
		else if (isVirtual)
			body = MakeAbstractVirtualBody(node, body, method, parameters);
		SyntaxKind kind;
		return SyntaxFactory.MethodDeclaration(value.ReturnType, value.Identifier).WithAttributeLists(attributes).WithModifiers(SyntaxFactory.TokenList(new [] { SyntaxFactory.Token(SyntaxKind.PublicKeyword) }.Union(value.Modifiers.Where(m => !((kind = GetKind(m)) == SyntaxKind.PublicKeyword || kind == SyntaxKind.InternalKeyword || kind == SyntaxKind.ProtectedKeyword || kind == SyntaxKind.PrivateKeyword))))).WithExplicitInterfaceSpecifier(value.ExplicitInterfaceSpecifier).WithTypeParameterList(value.TypeParameterList).WithParameterList(SyntaxFactory.ParameterList(SyntaxFactory.SeparatedList<ParameterSyntax>(parameters, parameters.Skip(1).Select(p => SyntaxFactory.Token(SyntaxKind.CommaToken))))).WithConstraintClauses(value.ConstraintClauses).WithBody(body);
	}

	private BlockSyntax MakeAbstractVirtualBody(MethodDeclarationSyntax methodSyntax, BlockSyntax body, MethodSymbol method, List<ParameterSyntax> parameters)
	{
		var candidateMethodsDepth = new List<Tuple<MethodSymbol, int>>();
		foreach (var _ in _methods.Keys.Where(m =>
			{
				if (m.Name == method.Name && m.GetAttributes().Any(a => a.AttributeClass.ContainingNamespace.ToString() == _serverFxSpecificationsNamespace && a.AttributeClass.Name == "OverrideAttribute") && m.Parameters.OfType<ParameterSymbol>().Count() == method.Parameters.OfType<ParameterSymbol>().Count())
				{
					int parametersCount = method.Parameters.OfType<ParameterSymbol>().Count();
					for (int i = 1; i < parametersCount; i++)
						if (m.Parameters[i].Type.ToString() != method.Parameters[i].Type.ToString())
							return false;
					int depth = 1;
					ITypeSymbol baseType = m.Parameters[0].Type;
					while ((baseType = baseType.BaseType) != null)
					{
						if (baseType.ToString() == method.Parameters[0].Type.ToString())
						{
							candidateMethodsDepth.Add(new Tuple<MethodSymbol, int>(m, depth));
							return true;
						}
						depth++;
					}
					return false;
				}
				return false;
			})) ;
		body = SyntaxFactory.Block(SyntaxFactory.List<StatementSyntax>(candidateMethodsDepth.OrderByDescending(cm => cm.Item2).Select(cm => cm.Item1).SelectMany(m =>
			{
				var statements = new List<StatementSyntax>();
				var parameterTypeName = m.Parameters[0].Type.Name;
				var parameterType = SyntaxFactory.ParseTypeName(parameterTypeName);
				var parameterName = string.Concat(m.Parameters[0].Name, "As", parameterTypeName);
				var variableDeclarator = SyntaxFactory.VariableDeclarator(parameterName).WithInitializer(SyntaxFactory.EqualsValueClause(SyntaxFactory.BinaryExpression(SyntaxKind.AsExpression, SyntaxFactory.IdentifierName(method.Parameters[0].Name), parameterType)));
				var variableDeclaration = 
					SyntaxFactory.VariableDeclaration(
						parameterType, 
						SyntaxFactory.SeparatedList(
							new [] { variableDeclarator },
							new SyntaxToken[0]));
				statements.Add(SyntaxFactory.LocalDeclarationStatement(variableDeclaration));
				var subMethod = _methods[m];
				var parent = subMethod.Parent;
				while ((parent = parent.Parent) != null)
				{
					var namespaceDeclaration = parent as NamespaceDeclarationSyntax;
					if (namespaceDeclaration != null)
						foreach (var u in namespaceDeclaration.Usings)
						{
							var usingName = u.Name.GetText().ToString().Trim();
							if (! _usings.Contains(usingName))
								_usings.Add(usingName);
						}
					var compilationUnit = parent as CompilationUnitSyntax;
					if (compilationUnit != null)
						foreach (var u in compilationUnit.Usings)
						{
							var usingName = u.Name.GetText().ToString().Trim();
							if (! _usings.Contains(usingName))
								_usings.Add(usingName);
						}
				}
				var subMethodStubMethodSyntaxRewriter = new StubMethodSyntaxRewriter(_semanticModels[subMethod], _serverFxSpecificationsNamespace, _serverFxDALInterfacesNamespace, _serverFxServiceInterfacesNamespace, _serverEntitiesNamespace, _serverSpecificationsMockNamespace, _methods, _classes, _semanticModels, SpecificationsElements, _edmxElements, _classesPerCompilationUnits, _dtoNamespaces, DTOTypes, _prefix + m.Parameters[0].Type.Name);
				var newSubMethodParameters = (ParameterListSyntax)subMethodStubMethodSyntaxRewriter.Visit(subMethod.ParameterList);
				foreach (var p in newSubMethodParameters.Parameters.Where(p => ! subMethod.ParameterList.Parameters.Any(p2 => p.Identifier.ValueText == p2.Identifier.ValueText)))
					parameters.Add(p);
				 var newBody = (StatementSyntax)new SpecificationMethodBodyRewriterMock(SpecificationsElements, SpecificationsElements.MethodsDependentProperties[subMethod], subMethodStubMethodSyntaxRewriter.SemanticModel, DTOTypes, _serverFxServiceInterfacesNamespace, parameterName, new Dictionary<string, SyntaxNode>() {{m.Parameters[0].Name, SyntaxFactory.IdentifierName(parameterName)}}, _semanticModels, _methods, _serverFxDALInterfacesNamespace, _serverSpecificationsMockNamespace, _classes, _dtoNamespaces, _invocations, subMethodStubMethodSyntaxRewriter._prefix, _edmxElements, _serverFxSpecificationsNamespace).Visit(subMethod.Body);
				statements.Add(SyntaxFactory.IfStatement(SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression, SyntaxFactory.IdentifierName(parameterName), SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)), newBody));
				return statements;
			}).Union(body.Statements)));
		return body;
	}
}

class SpecificationMethodBodyRewriterMock : SpecificationMethodBodyRewriter
{
	private ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel> _semanticModels;
	private Dictionary<MethodSymbol, MethodDeclarationSyntax> _methods;
	private string _serverFxDALInterfacesNamespace;
	private string _serverSpecificationsMockNamespace;
	private Dictionary<string, TypeSymbol> _classes;
	private List<NamespaceSymbol> _dtoNamespaces;
	private Dictionary<MethodSymbol, ParameterSyntax> _invocations;
	private string _prefix;
	private EdmxElements _edmxElements;
	private string _serverFxSpecificationsNamespace;
	private string _parameterName;
	private Dictionary<string, SyntaxNode> _parameterNames;

	public SpecificationMethodBodyRewriterMock(SpecificationsElements specificationsElements, List<List<PropertySymbolInfo>> dependentProperties, ISemanticModel semanticModel, IEnumerable<TypeSymbol> dtoTypes, string serverFxServiceInterfacesNamespace, string parameterName, Dictionary<string, SyntaxNode> parameterNames,  ConcurrentDictionary<MethodDeclarationSyntax, ISemanticModel> semanticModels, Dictionary<MethodSymbol, MethodDeclarationSyntax> methods, string serverFxDALInterfacesNamespace, string serverSpecificationsMockNamespace, Dictionary<string, TypeSymbol> classes, List<NamespaceSymbol> dtoNamespaces, Dictionary<MethodSymbol, ParameterSyntax> invocations, string prefix, EdmxElements edmxElements, string serverFxSpecificationsNamespace)
		: base(specificationsElements, dependentProperties, semanticModel, dtoTypes, serverFxServiceInterfacesNamespace)
	{
		_semanticModels = semanticModels;
		_methods = methods;
		_serverFxDALInterfacesNamespace = serverFxDALInterfacesNamespace;
		_serverSpecificationsMockNamespace = serverSpecificationsMockNamespace;
		_classes = classes;
		_dtoNamespaces = dtoNamespaces;
		_invocations = invocations;
		_prefix = prefix;
		_edmxElements = edmxElements;
		_serverFxSpecificationsNamespace = serverFxSpecificationsNamespace;
		_parameterName = parameterName;
		_parameterNames = parameterNames;
		GetGenericNameSyntaxFunc = (g, gv) =>
			{
				var value = gv();
				var symbol = SemanticModel.GetSymbolInfo(g).Symbol as NamedTypeSymbol;
				if (symbol != null && symbol.ConstructedFrom.ToString() == "System.Linq.IQueryable<T>")
					return SyntaxFactory.GenericName(SyntaxFactory.Identifier("System.Collections.Generic.IEnumerable"), value.TypeArgumentList);
				return value;
			};
	}

	protected override string GetDataTransfertEntityKeyParameter()
	{
		return _parameterName + ".";
	}

	private MethodSymbol GetInvocationSpecification(ExpressionSyntax n)
	{
		var methodSymbol = SemanticModel.GetSymbolInfo(n).Symbol as MethodSymbol;
		if (methodSymbol == null)
			return null;
		if (! (methodSymbol.IsStatic || SpecificationsElements.GetSpecificationEquivalentMethod(ref methodSymbol, () => _methods.Values)))
			return null;
		return methodSymbol;
	}

	public override SyntaxNode VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
	{
		var value = base.VisitMemberAccessExpression(node);
		var propertySymbol = SemanticModel.GetSymbolInfo(node).Symbol as PropertySymbol;
		NamedTypeSymbol namedTypeSymbol;
		if (propertySymbol != null && (namedTypeSymbol = propertySymbol.Type as NamedTypeSymbol) != null && namedTypeSymbol.ConstructedFrom != null && namedTypeSymbol.ConstructedFrom.ToString() == _serverFxDALInterfacesNamespace + ".IEntitySet<T>")
			return SyntaxFactory.ParseExpression(value.NormalizeWhitespace().ToString() + ".Local");
		return value;
	}

	private string GetTypeSymbolName(TypeSymbol type, Func<TypeSymbol, TypeSymbol> transformType = null)
	{
		if (_classes.ContainsKey(type.ToString()))
			return string.Concat(_serverSpecificationsMockNamespace, ".", type.ToString().Substring(type.ContainingNamespace.ToString().Length + 1));
		if (_dtoNamespaces.Any(n => type.ContainingNamespace.ToString() == n.ToString()))
			return type.Name;
		return GetTypeSymbolInfoName(new TypeSymbolInfo(type), transformType);
	}
	private string GetTypeSymbolInfoName(TypeSymbolInfo type, Func<TypeSymbol, TypeSymbol> transformType)
	{
		if (transformType != null)
			type = TypeSymbolInfo.Get(transformType(type.TypeSymbol));
		var value = type.FullName;
		foreach (var ta in type.TypeArguments)
		{
			TypeSymbolInfo taValue;
			if (transformType == null)
				taValue = ta;
			else
				taValue = TypeSymbolInfo.Get(transformType(ta.TypeSymbol));
			value = Regex.Replace(value, string.Concat(@"(<|\,)", ta.FullName, @"(>|\,)"), m => string.Concat(m.Groups[1].Value, (_classes.ContainsKey(taValue.FullName) ? string.Concat(_serverSpecificationsMockNamespace, ".", taValue.FullName.Substring(taValue.ContainingNamespace.Length + 1)) : GetTypeSymbolInfoName(taValue, transformType)), m.Groups[2].Value));
		}
		return value;
	}

	public override SyntaxNode VisitInvocationExpression(InvocationExpressionSyntax node)
	{
		var method = GetInvocationSpecification(node.Expression) ?? (MethodSymbol)SemanticModel.GetSymbolInfo(node).Symbol;

		NamedTypeSymbol methodContainingType;
		SyntaxNode value;
		if (method != null && (methodContainingType = method.ContainingType as NamedTypeSymbol) != null && methodContainingType.ConstructedFrom != null && methodContainingType.ConstructedFrom.ToString() == _serverFxDALInterfacesNamespace + ".IEntitySet<T>")
			value = node;
		else
		{
			var arguments = node.ArgumentList.Arguments.ToList();
			int parametersCount = method.Parameters.OfType<ParameterSymbol>().Count();
			int argumentsCount = arguments.Count;
			bool hasChanges = false;
			for (int parameterIndex = argumentsCount == parametersCount ? 0 : 1, argumentIndex = 0 ; argumentIndex < argumentsCount ; parameterIndex ++, argumentIndex ++)
			{
				var parameterType = (parametersCount > parameterIndex ? method.Parameters[parameterIndex].Type : /*params*/((ArrayTypeSymbol)method.Parameters[parametersCount - 1].Type).ElementType) as NamedTypeSymbol;
				if (parameterType != null && parameterType.ConstructedFrom != null && parameterType.ConstructedFrom.ToString() == _serverFxDALInterfacesNamespace + ".IEntitySet<T>")
					continue;
				var argumentsValue = (ArgumentSyntax)Visit(arguments[argumentIndex]);
				if (argumentsValue != arguments[argumentIndex])
				{
					arguments[argumentIndex] = argumentsValue;
					hasChanges = true;
				}
			}
			var valueInvocationExpression = node;
			if (hasChanges)
				valueInvocationExpression = valueInvocationExpression.WithArgumentList(SyntaxFactory.ArgumentList(SyntaxFactory.SeparatedList(arguments, arguments.Skip(1).Select(_ => SyntaxFactory.Token(SyntaxKind.CommaToken)))));
			NamedTypeSymbol expressionType;
			if (argumentsCount == parametersCount || (expressionType = method.Parameters[0].Type as NamedTypeSymbol) == null || expressionType.ConstructedFrom == null || expressionType.ConstructedFrom.ToString() != _serverFxDALInterfacesNamespace + ".IEntitySet<T>")
			{
				var valueExp = (ExpressionSyntax)Visit(node.Expression);
				if (valueInvocationExpression.Expression != valueExp)
					valueInvocationExpression = valueInvocationExpression.WithExpression(valueExp);
			}
			value = valueInvocationExpression;
		}

		if (method == null || ! SpecificationsElements.MethodPerMethodSymbols.ContainsKey(method.ToString()))
			return value;

		ParameterSyntax parameter;
		if (!_invocations.TryGetValue(method, out parameter))
		{
			var parameterTypesConcat = new StringBuilder();
			var parameterName = new StringBuilder();
			parameterName.Append(_prefix);
			parameterName.Append(_edmxElements.Code.CamelCase(method.Name));
			var genericArguments = ((MethodSymbol)SemanticModel.GetSymbolInfo(node.Expression).Symbol).TypeArguments;
			Func<TypeSymbol, TypeSymbol> getTypeTransformingGeneric = t => 
			{
				if (method.TypeArguments != null)
				{
					int typeArgumentsCount = method.TypeArguments.OfType<TypeSymbol>().Count();
					for (int typeArgumentIndex = 0; typeArgumentIndex < typeArgumentsCount ; typeArgumentIndex ++)
					{
						var typeArgument = method.TypeArguments[typeArgumentIndex];
						if (t == typeArgument)
							return genericArguments[typeArgumentIndex];
					}
				}
				return t;
			};
			var parametersTypes = method.Parameters.OfType<ParameterSymbol>().Select(p => getTypeTransformingGeneric(p.Type)).ToList();
			if (! method.ReturnsVoid)
				parametersTypes.Add(getTypeTransformingGeneric(method.ReturnType));
			var parametersTypesEnumerator = parametersTypes.GetEnumerator();
			var methodSyntax = SpecificationsElements.MethodPerMethodSymbols[method.ToString()];
			var methodSyntaxSemanticModel = SpecificationsElements.SemanticModelPerMethods[methodSyntax];
			var parametersTypesSyntax = methodSyntax.ParameterList.Parameters.Select(p => p.Type).GetEnumerator();
			if (parametersTypesEnumerator.MoveNext())
			{
				bool hasNextParameterSyntax = parametersTypesSyntax.MoveNext();
				parameterName.Append("_");
				for(;;)
				{
					parameterName.Append(TypeSymbolInfo.GetBasicTypeName(parametersTypesEnumerator.Current, getTypeTransformingGeneric).Replace("<", "_Of_").Replace(" ", "_").Replace(",", "_").Replace(">", "__"));
					parameterName.Append("_");
					bool done = false;
					if (hasNextParameterSyntax)
					{
						var initialSemanticModel = SemanticModel;
						SemanticModel = methodSyntaxSemanticModel;
						var newParameterType = (TypeSyntax)Visit(parametersTypesSyntax.Current);
						SemanticModel = initialSemanticModel;
						if (newParameterType != parametersTypesSyntax.Current)
						{
							done = true;
							parameterTypesConcat.Append(newParameterType.NormalizeWhitespace().ToString());
						}
					}
					if (! done)
						parameterTypesConcat.Append(GetTypeSymbolName(parametersTypesEnumerator.Current, getTypeTransformingGeneric));
					if (parametersTypesEnumerator.MoveNext())
					{
						hasNextParameterSyntax = parametersTypesSyntax.MoveNext();
						parameterTypesConcat.Append(", ");
					}
					else
						break;
				}
			}
			var actionFunc = method.ReturnsVoid ? "Action" : "Func";
			parameterName.Append(actionFunc);
			parameter = SyntaxFactory.Parameter(SyntaxFactory.Identifier(parameterName.ToString())).WithType(SyntaxFactory.ParseTypeName(string.Format("{0}<{1}>", actionFunc, parameterTypesConcat))).WithDefault(SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)));
			_invocations.Add(method, parameter);
		}

		var parameterIdentifier = SyntaxFactory.IdentifierName(parameter.Identifier.ValueText);
		var invocationExpressionSyntax = node;
		if (method.IsStatic)
		{
			var memberAccessExpressionSyntax = invocationExpressionSyntax.Expression as MemberAccessExpressionSyntax;
			if (! (memberAccessExpressionSyntax == null || memberAccessExpressionSyntax.Expression == null ||  SemanticModel.GetSymbolInfo(memberAccessExpressionSyntax.Expression).Symbol is ITypeSymbol))
			{
				var arguments = new [] { SyntaxFactory.Argument(memberAccessExpressionSyntax.Expression) }.Union( invocationExpressionSyntax.ArgumentList.Arguments);
				invocationExpressionSyntax = invocationExpressionSyntax.WithArgumentList(SyntaxFactory.ArgumentList(SyntaxFactory.SeparatedList<ArgumentSyntax>(arguments, arguments.Skip(1).Select(_ => SyntaxFactory.Token(SyntaxKind.CommaToken)))));
			}
			var containingType = method.ContainingType;
			if (method.GetAttributes().Any(a => a.AttributeClass.ContainingNamespace.ToString() == _serverFxSpecificationsNamespace && a.AttributeClass.Name == "OverrideAttribute"))
			{
				var virtualContainingType = _methods.Keys.FirstOrDefault(m =>
				{
					int parametersCount = method.Parameters.OfType<ParameterSymbol>().Count();
					if (m.Name == method.Name && m.GetAttributes().Any(a => a.AttributeClass.ContainingNamespace.ToString() == _serverFxSpecificationsNamespace && (a.AttributeClass.Name == "VirtualAttribute" || a.AttributeClass.Name == "AbstractAttribute")) && m.Parameters.OfType<ParameterSymbol>().Count() == parametersCount)
					{
						for (int i = 1; i < parametersCount; i++)
							if (m.Parameters[i].Type.ToString() != method.Parameters[i].Type.ToString())
								return false;
						ITypeSymbol baseType = method.Parameters[0].Type;
						while ((baseType = baseType.BaseType) != null)
							if (baseType.ToString() == m.Parameters[0].Type.ToString())
								return true;
						return false;
					}
					return false;
				}).ContainingType;
				if (virtualContainingType != null)
					containingType = virtualContainingType;
			}
			SimpleNameSyntax identifierName = invocationExpressionSyntax.Expression as IdentifierNameSyntax;
			if (identifierName == null)
				identifierName = ((MemberAccessExpressionSyntax)invocationExpressionSyntax.Expression).Name;
			invocationExpressionSyntax = invocationExpressionSyntax.WithExpression(SyntaxFactory.MemberAccessExpression(SyntaxKindMemberAccessExpression, SyntaxFactory.ParseExpression(containingType.Name), identifierName));
		}
		if (node.Parent is ExpressionStatementSyntax)
			return SyntaxFactory.IfStatement(SyntaxFactory.BinaryExpression(SyntaxKind.EqualsExpression, parameterIdentifier, SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)), SyntaxFactory.ExpressionStatement(invocationExpressionSyntax), SyntaxFactory.ElseClause(SyntaxFactory.ExpressionStatement(SyntaxFactory.InvocationExpression(parameterIdentifier, invocationExpressionSyntax.ArgumentList))));
		return SyntaxFactory.ParenthesizedExpression(SyntaxFactory.ConditionalExpression(SyntaxFactory.BinaryExpression(SyntaxKind.EqualsExpression, parameterIdentifier, SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)), invocationExpressionSyntax, SyntaxFactory.InvocationExpression(parameterIdentifier, invocationExpressionSyntax.ArgumentList)));
	}

	public override SyntaxNode VisitExpressionStatement(ExpressionStatementSyntax node)
	{
		var value = Visit(node.Expression);
		if (value is StatementSyntax)
			return value;
		return SyntaxFactory.ExpressionStatement((ExpressionSyntax)value);
	}

	public override SyntaxNode VisitIdentifierName(IdentifierNameSyntax node)
	{
		SyntaxNode result;
		if (_parameterNames != null && _parameterNames.TryGetValue(node.Identifier.ValueText, out result))
			return result;
		return base.VisitIdentifierName(node);
	}
}
#>
