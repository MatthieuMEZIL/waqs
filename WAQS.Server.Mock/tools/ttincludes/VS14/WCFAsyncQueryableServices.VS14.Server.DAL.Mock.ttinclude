<#@ include file="WCFAsyncQueryableServices.VS14.Specifications.ttinclude"#>
<#@ include file="WCFAsyncQueryableServices.VS14.Edmx.Utility.ttinclude"#>
<#@ include file="WCFAsyncQueryableServices.Server.DAL.Mock.ttinclude"#>
<#+
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Copyright (c) Matthieu MEZIL.  All rights reserved.
void WriteEdmFunction(CodeGenerationTools code, EntityContainer container, string icontextName, IEnumerable<FunctionImportParameter> parameters, TypeUsage returnType, string returnTypeFullName, EdmFunction edmFunction, string paramList)
{
	if (edmFunction.IsComposableAttribute)
	{
#>
	public Func<<#=String.Join(", ", parameters.Select(p => p.FunctionParameterType).ToArray())#>, IQueryable<<#=returnTypeFullName#>>> <#=code.Escape(edmFunction)#>Func { get; set; }
	public IQueryable<<#=returnTypeFullName#>> <#=code.Escape(edmFunction)#>(<#=paramList#>)
	{
		return <#=code.Escape(edmFunction)#>Func(<#=String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray())#>);
	}
	Expression <#=icontextName#>.<#=code.Escape(edmFunction)#>Expression(<#=paramList#>)
	{
		Expression<Func<IQueryable<<#=returnTypeFullName#>>>> <#=code.CamelCase(code.Escape(edmFunction))#> = () => <#=code.Escape(edmFunction)#>(<#=String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray())#>);
		var callExpression = (MethodCallExpression)<#=code.CamelCase(code.Escape(edmFunction))#>.Body;
		return Expression.Call(((Expression<Func<<#=code.Escape(container)#>>>)(() => this)).Body, callExpression.Method, callExpression.Arguments);
	}
<#+
	}
	else
	{
#>
	public Func<<#=String.Join(", ", parameters.Select(p => p.FunctionParameterType).ToArray())#>, <#=returnType == null ? "int" : "IEnumerable<" + returnTypeFullName + ">"#>> <#=code.Escape(edmFunction)#>Func{ get; set; }
	public <#=returnType == null ? "int" : "IEnumerable<" + returnTypeFullName + ">"#> <#=code.Escape(edmFunction)#>(<#=paramList#>)
	{
		return <#=code.Escape(edmFunction)#>Func(<#=String.Join(", ", parameters.Select(p => p.FunctionParameterName).ToArray())#>);
	}
<#+
		if(returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
		{
#>
<#+
		}
	}
}
#>
