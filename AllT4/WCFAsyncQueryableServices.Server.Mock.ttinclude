<#@ include file="WCFAsyncQueryableServices.Root.Base.ttinclude"#>
<#@ import namespace="System.IO"#>
<#+ 
// Copyright (c) Matthieu MEZIL.  All rights reserved.

void WriteServerMock(string waqsFilePath, string namespaceName = null, string relativePath = "")
{
	var merge = string.IsNullOrEmpty(relativePath) ? "" : ".merge";

	CodeGenerationTools code = new CodeGenerationTools(this);
	
	if (namespaceName == null)
		namespaceName = code.VsNamespaceSuggestion();
	EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

	var root = XElement.Load(Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), waqsFilePath));
	XAttribute edmxPathAttribute = root.Attribute("EdmxPath");
	string edmxPath = null;
	string edmxName = null;
	if (edmxPathAttribute != null)
	{
		edmxPath = edmxPathAttribute.Value;
		edmxName = Path.GetFileNameWithoutExtension(edmxPath);
	}

	var fx = root.Element("Framework");
	if (fx == null)
		throw new InvalidOperationException(@"Framework can't be null");

	string fxCommonNamespaceName = null;
	var fxCommon = fx.Element("Common");
	if (fxCommon != null)
	{
		var fxCommonNamespaceNameAttribute = fxCommon.Attribute("NamespaceName");
		if (fxCommonNamespaceNameAttribute == null)
			fxCommonNamespaceName = "WCFAsyncQueryableServices.Common";
		else
			fxCommonNamespaceName = fxCommonNamespaceNameAttribute.Value;
		var fxCommonGenerateAttribute = fxCommon.Attribute("Generate");
		if (fxCommonGenerateAttribute == null || fxCommonGenerateAttribute.Value != "false")
		{
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.Common.tt");
#>
<#=string.Format("{0}#@ include file=\"{5}WCFAsyncQueryableServices.{4}.{3}.Server.Fx.Common{6}.ttinclude\"#{1}{0}#WriteServerFxCommon(\"{2}\");#{1}", "<", ">", fxCommonNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}

	string fxSpecificationsNamespaceName = null;
	var fxSpecifications = fx.Element("Specifications");
	if (fxSpecifications != null)
	{
		var fxSpecificationsNamespaceNameAttribute = fxSpecifications.Attribute("NamespaceName");
		if (fxSpecificationsNamespaceNameAttribute == null)
			fxSpecificationsNamespaceName = "WCFAsyncQueryableServices.Entities";
		else
			fxSpecificationsNamespaceName = fxSpecificationsNamespaceNameAttribute.Value;
		var fxSpecificationsGenerateAttribute = fxSpecifications.Attribute("Generate");
		if (fxSpecificationsGenerateAttribute == null || fxSpecificationsGenerateAttribute.Value != "false")
		{
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.Entities.tt");
#>
<#=string.Format("{0}#@ include file=\"{5}WCFAsyncQueryableServices.{4}.{3}.Server.Fx.Specifications{6}.ttinclude\"#{1}{0}#WriteServerFxSpecifications(\"{2}\");#{1}", "<", ">", fxSpecificationsNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}

	string fxEntitiesNamespaceName = null;
	var fxEntities = fx.Element("Entities");
	if (fxEntities != null)
	{
		var fxEntitiesNamespaceNameAttribute = fxEntities.Attribute("NamespaceName");
		if (fxEntitiesNamespaceNameAttribute == null)
			fxEntitiesNamespaceName = "WCFAsyncQueryableServices.Entities";
		else
			fxEntitiesNamespaceName = fxEntitiesNamespaceNameAttribute.Value;
		var fxEntitiesGenerateAttribute = fxEntities.Attribute("Generate");
		if (fxEntitiesGenerateAttribute == null || fxEntitiesGenerateAttribute.Value != "false")
		{
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.Entities.tt");
#>
<#=string.Format("{0}#@ include file=\"{5}WCFAsyncQueryableServices.{4}.{3}.Server.Fx.Entities{6}.ttinclude\"#{1}{0}#WriteServerFxEntities(\"{2}\");#{1}", "<", ">", fxEntitiesNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}

	string fxDALInterfacesNamespaceName = null;
	var fxDALInterfaces = fx.Element("DALInterfaces");
	if (fxDALInterfaces != null)
	{
		var fxDALInterfacesNamespaceNameAttribute = fxDALInterfaces.Attribute("NamespaceName");
		if (fxDALInterfacesNamespaceNameAttribute == null)
			fxDALInterfacesNamespaceName = "WCFAsyncQueryableServices.DAL.Interfaces";
		else
			fxDALInterfacesNamespaceName = fxDALInterfacesNamespaceNameAttribute.Value;
		var fxDALInterfacesGenerateAttribute = fxDALInterfaces.Attribute("Generate");
		if (fxDALInterfacesGenerateAttribute == null || fxDALInterfacesGenerateAttribute.Value != "false")
		{
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.DAL.Interfaces.tt");
#>
<#=string.Format("{0}#@ include file=\"{5}WCFAsyncQueryableServices.{4}.{3}.Server.Fx.DAL.Interfaces{6}.ttinclude\"#{1}{0}#WriteServerFxDALInterfaces(\"{2}\");#{1}", "<", ">", fxDALInterfacesNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}

	string fxExpressionsNamespaceName = null;
	var fxExpressions = fx.Element("Expressions");
	if (fxExpressions != null)
	{
		var fxExpressionsAttributeNamespaceNameAttribute = fxExpressions.Attribute("NamespaceName");
		if (fxExpressionsAttributeNamespaceNameAttribute == null)
			fxExpressionsNamespaceName = "WCFAsyncQueryableServices.SerializableExpressions";
		else
			fxExpressionsNamespaceName = fxExpressionsAttributeNamespaceNameAttribute.Value;
		var fxExpressionsGenerateAttribute = fxExpressions.Attribute("Generate");
		if (fxExpressionsGenerateAttribute == null || fxExpressionsGenerateAttribute.Value != "false")
		{
			if (fxEntitiesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Entities can't be null");
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.SerializableExpressions.tt");
#>
<#=string.Format("{0}#@ include file=\"{7}WCFAsyncQueryableServices.{6}.{5}.Server.Fx.SerializableExpressions{8}.ttinclude\"#{1}{0}#WriteSerializableExpressions(\"{2}\", \"{3}\", \"{4}\");#{1}", "<", ">", fxEntitiesNamespaceName, fxDALInterfacesNamespaceName, fxExpressionsNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}

	string fxServiceInterfacesNamespaceName = null;
	var fxServiceInterfaces = fx.Element("ServiceInterfaces");
	if (fxServiceInterfaces != null)
	{
		var fxServiceInterfacesNamespaceNameAttribute = fxServiceInterfaces.Attribute("NamespaceName");
		if (fxServiceInterfacesNamespaceNameAttribute == null)
			fxServiceInterfacesNamespaceName = "WCFAsyncQueryableServices.Service.Interfaces";
		else
			fxServiceInterfacesNamespaceName = fxServiceInterfacesNamespaceNameAttribute.Value;
		var fxServiceInterfacesGenerateAttribute = fxServiceInterfaces.Attribute("Generate");
		if (fxServiceInterfacesGenerateAttribute == null || fxServiceInterfacesGenerateAttribute.Value != "false")
		{
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.Service.Interfaces.tt");
#>
<#=string.Format("{0}#@ include file=\"{6}WCFAsyncQueryableServices.{5}.{4}.Server.Fx.Service.Interfaces{7}.ttinclude\"#{1}{0}#WriteServerFxServiceInterfaces(\"{2}\", \"{3}\");#{1}", "<", ">", fxExpressionsNamespaceName, fxServiceInterfacesNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}
	
	string fxDALMockNamespaceName = null;
	var fxDALMock = fx.Element("DALMock");
	if (fxDALMock != null)
	{
		var fxDALMockNamespaceNameAttribute = fxDALMock.Attribute("NamespaceName");
		if (fxDALMockNamespaceNameAttribute == null)
			fxDALMockNamespaceName = "WCFAsyncQueryableServices.DAL.Mock";
		else
			fxDALMockNamespaceName = fxDALMockNamespaceNameAttribute.Value;
		var fxDALMockGenerateAttribute = fxDALMock.Attribute("Generate");
		if (fxDALMockGenerateAttribute == null || fxDALMockGenerateAttribute.Value != "false")
		{
			if (fxEntitiesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Entities can't be null");
			if (fxDALInterfacesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\DALInterfaces can't be null");
			if (fxCommonNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Common can't be null");
			fileManager.StartNewFile("WCFAsyncQueryableServices.Server.Fx.DAL.Mock.tt");
#>
<#=string.Format("{0}#@ include file=\"{8}WCFAsyncQueryableServices.{7}.{6}.Server.Fx.DAL.Mock{9}.ttinclude\"#{1}{0}#WriteServerFxDALMock(\"{2}\", \"{3}\", \"{4}\", \"{5}\");#{1}", "<", ">", fxEntitiesNamespaceName, fxDALInterfacesNamespaceName, fxCommonNamespaceName, fxDALMockNamespaceName, netVersion, vsVersion, relativePath, merge)#>
<#+
		}
	}




	var specificationPathes = GetSpecificationsPathes(root.Element("Specifications"));

	string entitiesNamespaceName = null;
	var entities = root.Element("Entities");
	SpecificationPath entitiesPath = null;
	if (entities != null)
	{
		var entitiesNamespaceNameAttribute = entities.Attribute("NamespaceName");
		if (entitiesNamespaceNameAttribute == null)
			entitiesNamespaceName = namespaceName;
		else
			entitiesNamespaceName = entitiesNamespaceNameAttribute.Value;
		entitiesPath = GetSpecificationPath(entities);
	}

	var dtos = root.Element("DTOs");
	string dtoNamespaceName = null;
	var dtoSB = new StringBuilder();
	if (dtos == null)
		dtoSB.Append("null");
	else
	{
		var dtoNamespaceNameAttribute = dtos.Attribute("NamespaceName");
		if (dtoNamespaceNameAttribute == null)
			dtoNamespaceName = entitiesNamespaceName;
		else
			dtoNamespaceName = dtoNamespaceNameAttribute.Value;
		var dtoWCFNamespaceAttribute = dtos.Attribute("WCFNamespace");
		dtoSB.Append("new SpecificationPath[] { ");
		var dtosEnumerator = dtos.Elements("DTO").GetEnumerator();
		if (dtosEnumerator.MoveNext())
			for(;;)
			{
				var dto = dtosEnumerator.Current;
				dtoSB.Append("new SpecificationPath { Sln = @\"");
				dtoSB.Append(dto.Attribute("SlnFilePath").Value);
				dtoSB.Append("\", Csproj = @\"");
				dtoSB.Append(dto.Attribute("CsprojPath").Value);
				dtoSB.Append("\", Folder = @\"");
				dtoSB.Append(dto.Attribute("FolderPath").Value);
				dtoSB.Append("\"}");
				if (! dtosEnumerator.MoveNext())
					break;
				dtoSB.Append(", ");
			}
		dtoSB.Append(" }");
	}

	string dalInterfacesNamespaceName = null;
	var dalInterfaces = root.Element("DALInterfaces");
	if (dalInterfaces != null)
	{
		var dalInterfacesNamespaceNameAttribute = dalInterfaces.Attribute("NamespaceName");
		if (dalInterfacesNamespaceNameAttribute == null)
			dalInterfacesNamespaceName = namespaceName + ".DAL.Interfaces";
		else
			dalInterfacesNamespaceName = dalInterfacesNamespaceNameAttribute.Value;
	}

	string dalNamespaceName = null;
	var dal = root.Element("DAL");
	if (dal != null)
	{
		var dalNamespaceNameAttribute = dal.Attribute("NamespaceName");
		if (dalNamespaceNameAttribute == null)
			dalNamespaceName = namespaceName + ".DAL.";
		else
			dalNamespaceName = dalNamespaceNameAttribute.Value;
	}

	string dalMockNamespaceName = null;
	var dalMock = root.Element("DALMock");
	if (dalMock != null)
	{
		var dalMockNamespaceNameAttribute = dalMock.Attribute("NamespaceName");
		if (dalMockNamespaceNameAttribute == null)
			dalMockNamespaceName = namespaceName + ".DAL.Mock";
		else
			dalMockNamespaceName = dalMockNamespaceNameAttribute.Value;
		var dalMockGenerateAttribute = dalMock.Attribute("Generate");
		if (dalMockGenerateAttribute == null || dalMockGenerateAttribute.Value != "false")
		{
			if (fxCommonNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Common can't be null");
			if (fxEntitiesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Entities can't be null");
			if (fxDALMockNamespaceName == null)
				throw new InvalidOperationException(@"Framework\DALMock can't be null");
			if (fxDALInterfacesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\DALInterfaces can't be null");
			if (entitiesNamespaceName == null)
				throw new InvalidOperationException(@"Entities can't be null");
			if (fxDALInterfacesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\DALInterfaces can't be null");
			if (fxServiceInterfacesNamespaceName == null)
				throw new InvalidOperationException(@"Framework\ServiceInterfaces can't be null");
			fileManager.StartNewFile(string.Format("{0}.Server.DAL.Mock.tt", edmxName));
			var sb = new StringBuilder();
			sb.Append("<");
			sb.Append("#@ include file=\"");
			sb.Append(relativePath);
			sb.Append("WCFAsyncQueryableServices.");
			sb.Append(vsVersion);
			sb.Append(".");
			sb.Append(netVersion);
			sb.Append(".Server.DAL.Mock");
			sb.Append(merge);
			sb.Append(".ttinclude\"#");
			sb.Append("><");
			sb.Append("#WriteServerDALMock(@\"");
			sb.Append(edmxPath);
			sb.Append("\", ");
			FillSpecifications(specificationPathes, sb);
			sb.Append(", ");
			FillSpecification(entitiesPath, sb);
			sb.Append(", @\"");
			sb.Append(fxCommonNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxSpecificationsNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxEntitiesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxDALInterfacesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxServiceInterfacesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxDALMockNamespaceName);
			sb.Append("\", @\"");
			sb.Append(entitiesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(dalInterfacesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(dalNamespaceName);
			sb.Append("\", @\"");
			sb.Append(dalMockNamespaceName);
			sb.Append("\");#");
			sb.Append(">");
#>
<#=sb.ToString()#>
<#+
		}
	}

	string specificationsMockNamespaceName = null;
	var specificationsMock = root.Element("SpecificationsMock");
	if (specificationsMock != null)
	{
		var specificationsMockNamespaceNameAttribute = specificationsMock.Attribute("NamespaceName");
		if (specificationsMockNamespaceNameAttribute == null)
			specificationsMockNamespaceName = namespaceName + ".Specifications.Mock";
		else
			specificationsMockNamespaceName = specificationsMockNamespaceNameAttribute.Value;
		var specificationsMockGenerateAttribute = specificationsMock.Attribute("Generate");
		if (specificationsMockGenerateAttribute == null || specificationsMockGenerateAttribute.Value != "false")
		{
			if (fxSpecificationsNamespaceName == null)
				throw new InvalidOperationException(@"Framework\Common can't be null");
			fileManager.StartNewFile(string.Format("{0}.Server.Specifications.Mock.tt", edmxName));
			var sb = new StringBuilder();
			sb.Append("<");
			sb.Append("#@ include file=\"");
			sb.Append(relativePath);
			sb.Append("WCFAsyncQueryableServices.");
			sb.Append(vsVersion);
			sb.Append(".");
			sb.Append(netVersion);
			sb.Append(".Server.Entities.Specifications.Mock");
			sb.Append(merge);
			sb.Append(".ttinclude\"#");
			sb.Append("><");
			sb.Append("#WriteServerEntitiesSpecificationsMock(@\"");
			sb.Append(edmxPath);
			sb.Append("\", ");
			FillSpecifications(specificationPathes, sb);
			sb.Append(", ");
			sb.Append(dtoSB);
			sb.Append(", @\"");
			sb.Append(dtoNamespaceName);
			sb.Append("\", ");
			FillSpecification(entitiesPath, sb);
			sb.Append(", @\"");
			sb.Append(fxSpecificationsNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxDALInterfacesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(fxServiceInterfacesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(entitiesNamespaceName);
			sb.Append("\", @\"");
			sb.Append(specificationsMockNamespaceName);
			sb.Append("\");#");
			sb.Append(">");
#>
<#=sb.ToString()#>
<#+
		}
	}

	fileManager.Process();
}
#>
