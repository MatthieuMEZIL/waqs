<#+
private void CompleteIWAQSQueryValue()
    {
#>
    Task<object> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQueryValueOfT()
    {
#>
    new Task<T> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQuery()
    {
#>
    Task ForeachAsync(Action<object> action, CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQueryOfT()
    {
#>
    Task ForeachAsync(Action<T> action, CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteWAQSQueryValue()
    {
#>

    public Task<object> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
        return WAQSQueryProvider.ExecuteAsync(Expression, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryValueOfT()
    {
#>

    public new Task<T> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
        return WAQSQueryProvider.ExecuteAsync<T>(Expression, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQuery()
    {
#>
        
    protected virtual Tuple<IAsyncEnumerator, Func<T>> GetQueryAsyncEnumerator<T>(IQueryProvider provider, Expression expression)
    {
        var q = provider.CreateQuery(expression);
        var enumerator = AsyncQueryProviderFactory.AsyncEnumerableFactory.GetAsyncEnumerable(q).GetAsyncEnumerator();
        return new Tuple<IAsyncEnumerator, Func<T>>(enumerator, () => (T)enumerator.Current);
    }

    protected async internal static Task<object> LoadIncludesAsync(IWAQSQueryBase queryBase, Dictionary<string, object> addedIncludesPathes = null, object value = null, bool withValue = false, string path = null, CancellationToken cancellationToken = default(CancellationToken))
    {
        if (addedIncludesPathes == null)
            addedIncludesPathes = new Dictionary<string, object>();
        if (!withValue)
        {
            var query = queryBase as IWAQSQuery;
            IWAQSQueryValue queryValue;
            if (query != null)
            {
                var queryType = query.GetType();
                if (!queryType.IsGenericType)
                    throw new InvalidOperationException();
                value = await ((Task<object>)typeof(WAQSQuery).GetMethod("GetIncludeListAsync").MakeGenericMethod(queryType.GetGenericArguments()[0]).Invoke(null, new object[] { query, cancellationToken }));
            }
            else if ((queryValue = queryBase as IWAQSQueryValue) != null)
            {
                queryValue.FromQuery = true;
                value = await queryValue.ExecuteAsync(cancellationToken);
            }
            else
                throw new InvalidOperationException();
        }
        if (queryBase.QueryableIncludes != null)
            foreach (var include in queryBase.QueryableIncludes)
            {
                var queryableInclude = include(queryBase);
                object includeValue = null;
                bool includeWithValue = false;
                if (queryableInclude.Path == null || !(includeWithValue = addedIncludesPathes.TryGetValue(queryableInclude.Path, out includeValue)))
                {
                    var includesValues = new object[queryableInclude.Queries.Length];
                    for (int i = 0 ; i < includesValues.Length ; i ++)
                        includesValues[i] = await LoadIncludesAsync(queryableInclude.Queries[i], addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path, cancellationToken: cancellationToken);
                    queryableInclude.Load(value, includesValues);
                }
                else
                    foreach (var query in queryableInclude.Queries)
                        await LoadIncludesAsync(query, addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path, cancellationToken: cancellationToken);
            }
        return value;
    }
    
    private async Task<object> GetIncludeListAsync<T>(IWAQSQuery query, CancellationToken cancellationToken = default(CancellationToken))
    {
        query.FromQuery = true;
        var values = new List<T>();
        await query.ForeachAsync(o => values.Add((T) o), cancellationToken);
        return values;
    }
    
    private async Task GetEnumerableWithoutIncludeAsync<T>(Func<IQueryProvider, Tuple<IAsyncEnumerator, Func<T>>> asyncEnumeratorFactory, Action<T> action, CancellationToken cancellationToken)
    {
        var asyncEnumerator = asyncEnumeratorFactory(((WAQSQueryProvider)Provider).SourceProvider);
        var values = new List<T>();
        while (await asyncEnumerator.Item1.MoveNextAsync(cancellationToken))
        {
            EntitiesInitializer.FromQuery = true;
            var o = asyncEnumerator.Item2();
            EntitiesInitializer.FromQuery = false;
            WithType withType;
            if (WAQSQuery.WithTypes.TryGetValue(typeof(T), out withType))
                o = (T)withType.TransformToOriginalType(o);
            action(o);
        }
    }
    
    protected async Task ForeachAsync<T>(Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        var expression = InitWith();
        try
        {
            if (!(FromQuery || QueryableIncludes == null) && QueryableIncludes.Any())
            {
                var value = new List<T>();
                await GetEnumerableWithoutIncludeAsync<T>(provider => GetQueryAsyncEnumerator<T>(provider, expression), item => value.Add(item), cancellationToken);
                await LoadIncludesAsync(this, value: value, withValue: true);
                foreach (T item in value)
                    action(item);
            }
            await GetEnumerableWithoutIncludeAsync<T>(provider => GetQueryAsyncEnumerator<T>(provider, expression), action, cancellationToken);
        }
        finally
        {
            EntitiesInitializer.FromQuery = false;
        }
    }
    
    public Task ForeachAsync(Action<object> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ForeachAsync<object>(action, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryOfT()
    {
#>
    
    protected override Tuple<IAsyncEnumerator, Func<T2>> GetQueryAsyncEnumerator<T2>(IQueryProvider provider, Expression expression)
    {
        if (typeof(T2) != typeof(T))
            return base.GetQueryAsyncEnumerator<T2>(provider, expression);
        var q = provider.CreateQuery<T2>(expression);
        var enumerator = AsyncQueryProviderFactory.AsyncEnumerableFactory.GetAsyncEnumerable<T2>(q).GetAsyncEnumerator();
        return new Tuple<IAsyncEnumerator, Func<T2>>(enumerator, () => enumerator.Current);
    }
    
    public Task ForeachAsync(Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ForeachAsync<T>(action, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryProvider()
    {
#>
                    
    private async Task<TResult> ExecuteAsync<TResult>(Expression expression, Func<Expression, Task<TResult>> executeAsync, Func<TResult, TResult> fromWith = null)
    {
        try
        {
            EntitiesInitializer.FromQuery = true;
            var result = await executeAsync(expression);
            EntitiesInitializer.FromQuery = false;
            if (fromWith != null)
                result = fromWith(result);
            if (!(CurrentQuery == null || CurrentQuery.FromQuery || CurrentQuery.QueryableIncludes == null))
                await WAQSQuery.LoadIncludesAsync(CurrentQuery, value: new TResult[] {result}, withValue: true);
            return result;
        }
        finally
        {
            EntitiesInitializer.FromQuery = false;
        }
    }
                        
    public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = default(CancellationToken))
    {
        Func<TResult, TResult> fromWith = null;
        if (CurrentQuery != null && CurrentQuery.WithSpecifications != null && CurrentQuery.WithSpecifications.Any())
        {
            var query = ((WAQSQuery)CurrentQuery).ApplyWith();
            expression = Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == ((MethodCallExpression)expression).Method.Name && m.GetParameters().Length == 1).MakeGenericMethod(typeof(TResult)), query.Expression);
            fromWith = item =>
            {
                WithType withType;
                if (WAQSQuery.WithTypes.TryGetValue(typeof (TResult), out withType))
                    item = (TResult)withType.TransformToOriginalType(item);
                return item;
            };
        }
        return ExecuteAsync<TResult>(expression, e => AsyncQueryProviderFactory.ExecuteAsync<TResult>(SourceProvider, e, cancellationToken), fromWith);
    }
                                
    public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ExecuteAsync<object>(expression, e => AsyncQueryProviderFactory.ExecuteAsync(SourceProvider, e, cancellationToken));
    }
<#+
    }

    private void CompleteIAsyncEnumerableFactory()
    {
#>
    IAsyncEnumerable GetAsyncEnumerable(IQueryable query);
    IAsyncEnumerable<T> GetAsyncEnumerable<T>(IQueryable<T> query);
<#+
    }

    private void CompleteIAsyncQueryProviderFactory()
    {
#>
    Task<object> ExecuteAsync(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken = default(CancellationToken));
    Task<T> ExecuteAsync<T>(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken = default(CancellationToken));
    IAsyncEnumerableFactory AsyncEnumerableFactory { get; }
<#+
    }

    private void CompleteQueryableExtensions()
    {
#>
    
    public static Task<bool> AllAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethod("All").MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<bool> AnyAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<bool> AnyAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(new Type[] { typeof(T) }), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<decimal> AverageAsync(this IWAQSQuery<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<decimal>(source, cancellationToken);
    }
        
    public static Task<decimal> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, decimal>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<decimal?> AverageAsync(this IWAQSQuery<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<decimal?>(source, cancellationToken);
    }
        
    public static Task<decimal?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, decimal?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double> AverageAsync(this IWAQSQuery<double> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<double>(source, cancellationToken);
    }
        
    public static Task<double> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, double>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double?> AverageAsync(this IWAQSQuery<double?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<double?>(source, cancellationToken);
    }
        
    public static Task<double?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, double?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int> AverageAsync(this IWAQSQuery<int> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<int>(source, cancellationToken);
    }
        
    public static Task<int> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, int>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int?> AverageAsync(this IWAQSQuery<int?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<int?>(source, cancellationToken);
    }
        
    public static Task<int?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, int?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long> AverageAsync(this IWAQSQuery<long> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<long>(source, cancellationToken);
    }
        
    public static Task<long> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, long>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long?> AverageAsync(this IWAQSQuery<long?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<long?>(source, cancellationToken);
    }
        
    public static Task<long?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, long?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float> AverageAsync(this IWAQSQuery<float> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<float>(source, cancellationToken);
    }
        
    public static Task<float> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, float>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float?> AverageAsync(this IWAQSQuery<float?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<float?>(source, cancellationToken);
    }
        
    public static Task<float?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, float?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    private static Task<T> AverageAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Average" && (parameters = m.GetParameters()).Length == 1 && parameters[0].ParameterType == typeof(IQueryable<T>)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    private static Task<T2> AverageAsync<T, T2>(IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Average" && (parameters = m.GetParameters()).Length == 2 && parameters[1].ParameterType.GetGenericArguments()[0].GetGenericArguments()[1] == typeof(T2)).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<bool> ContainsAsync<T>(this IWAQSQuery<T> source, T item, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Constant(item, typeof(T)) }), cancellationToken);
    }
        
    public static Task<int> CountAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<int>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<int> CountAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<int>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> FirstAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "First" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> FirstAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "First" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> FirstOrDefaultAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> FirstOrDefaultAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task LoadAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return source.ForeachAsync(_ => { }, cancellationToken);
    }
        
    public static Task<long> LongCountAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<long>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "LongCount" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<long> LongCountAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<long>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "LongCount" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> MaxAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Max" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T2> MaxAsync<T, T2>(this IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Max" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T), typeof(T2)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<T> MinAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Min" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T2> MinAsync<T, T2>(this IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Min" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T), typeof(T2)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<T> SingleAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "Single" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> SingleAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "Single" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> SingleOrDefaultAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "SingleOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> SingleOrDefaultAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "SingleOrDefault" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<decimal> SumAsync(this IWAQSQuery<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<decimal>(source, cancellationToken);
    }
        
    public static Task<decimal> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, decimal>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<decimal?> SumAsync(this IWAQSQuery<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<decimal?>(source, cancellationToken);
    }
        
    public static Task<decimal?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, decimal?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double> SumAsync(this IWAQSQuery<double> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<double>(source, cancellationToken);
    }
        
    public static Task<double> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, double>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double?> SumAsync(this IWAQSQuery<double?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<double?>(source, cancellationToken);
    }
        
    public static Task<double?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, double?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int> SumAsync(this IWAQSQuery<int> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<int>(source, cancellationToken);
    }
        
    public static Task<int> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, int>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int?> SumAsync(this IWAQSQuery<int?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<int?>(source, cancellationToken);
    }
        
    public static Task<int?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, int?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long> SumAsync(this IWAQSQuery<long> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<long>(source, cancellationToken);
    }
        
    public static Task<long> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, long>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long?> SumAsync(this IWAQSQuery<long?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<long?>(source, cancellationToken);
    }
        
    public static Task<long?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, long?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float> SumAsync(this IWAQSQuery<float> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<float>(source, cancellationToken);
    }
        
    public static Task<float> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, float>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float?> SumAsync(this IWAQSQuery<float?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<float?>(source, cancellationToken);
    }
        
    public static Task<float?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, float?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    private static Task<T> SumAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Sum" && (parameters = m.GetParameters()).Length == 1 && parameters[0].ParameterType == typeof(IQueryable<T>)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    private static Task<T2> SumAsync<T, T2>(IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Sum" && (parameters = m.GetParameters()).Length == 2 && parameters[1].ParameterType.GetGenericArguments()[0].GetGenericArguments()[1] == typeof(T2)).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public async static Task<T[]> ToArrayAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return (await source.ToListAsync(cancellationToken)).ToArray();
    }
        
    public async static Task<List<T>> ToListAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        var result = new List<T>();
        await source.ForeachAsync(item => result.Add(item), cancellationToken);
        return result;
    }
<#+
    }

    private void CompleteIDataContextUsings(List<string> idataContextUsings)
    {
        idataContextUsings.Add("System.Threading.Tasks");
    }

    private void CompleteIDataContextUsings()
    {
#>
 
    Task SaveChangesAsync(bool acceptChanges = true);
<#+
    }
#>
